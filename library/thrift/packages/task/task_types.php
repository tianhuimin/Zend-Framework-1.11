<?php
/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
include_once $GLOBALS['THRIFT_ROOT'].'/Thrift.php';


class Active {
  static $_TSPEC;

  public $activeGet = null;
  public $limitActive = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'activeGet',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'limitActive',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['activeGet'])) {
        $this->activeGet = $vals['activeGet'];
      }
      if (isset($vals['limitActive'])) {
        $this->limitActive = $vals['limitActive'];
      }
    }
  }

  public function getName() {
    return 'Active';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->activeGet);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->limitActive);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Active');
    if ($this->activeGet !== null) {
      $xfer += $output->writeFieldBegin('activeGet', TType::I32, 1);
      $xfer += $output->writeI32($this->activeGet);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->limitActive !== null) {
      $xfer += $output->writeFieldBegin('limitActive', TType::I32, 2);
      $xfer += $output->writeI32($this->limitActive);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class QueryTaskResult {
  static $_TSPEC;

  public $taskid = null;
  public $userid = null;
  public $taskname = null;
  public $state = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'taskid',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'userid',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'taskname',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'state',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['taskid'])) {
        $this->taskid = $vals['taskid'];
      }
      if (isset($vals['userid'])) {
        $this->userid = $vals['userid'];
      }
      if (isset($vals['taskname'])) {
        $this->taskname = $vals['taskname'];
      }
      if (isset($vals['state'])) {
        $this->state = $vals['state'];
      }
    }
  }

  public function getName() {
    return 'QueryTaskResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->taskid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->userid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->taskname);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->state);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('QueryTaskResult');
    if ($this->taskid !== null) {
      $xfer += $output->writeFieldBegin('taskid', TType::I32, 1);
      $xfer += $output->writeI32($this->taskid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userid !== null) {
      $xfer += $output->writeFieldBegin('userid', TType::I32, 2);
      $xfer += $output->writeI32($this->userid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->taskname !== null) {
      $xfer += $output->writeFieldBegin('taskname', TType::STRING, 3);
      $xfer += $output->writeString($this->taskname);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->state !== null) {
      $xfer += $output->writeFieldBegin('state', TType::I32, 4);
      $xfer += $output->writeI32($this->state);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TaskResult {
  static $_TSPEC;

  public $taskid = null;
  public $userid = null;
  public $taskname = null;
  public $state = null;
  public $taskdescript = null;
  public $type = null;
  public $award = null;
  public $link = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'taskid',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'userid',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'taskname',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'state',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'taskdescript',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'type',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'award',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'link',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['taskid'])) {
        $this->taskid = $vals['taskid'];
      }
      if (isset($vals['userid'])) {
        $this->userid = $vals['userid'];
      }
      if (isset($vals['taskname'])) {
        $this->taskname = $vals['taskname'];
      }
      if (isset($vals['state'])) {
        $this->state = $vals['state'];
      }
      if (isset($vals['taskdescript'])) {
        $this->taskdescript = $vals['taskdescript'];
      }
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['award'])) {
        $this->award = $vals['award'];
      }
      if (isset($vals['link'])) {
        $this->link = $vals['link'];
      }
    }
  }

  public function getName() {
    return 'TaskResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->taskid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->userid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->taskname);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->state);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->taskdescript);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->award);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->link);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TaskResult');
    if ($this->taskid !== null) {
      $xfer += $output->writeFieldBegin('taskid', TType::I32, 1);
      $xfer += $output->writeI32($this->taskid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userid !== null) {
      $xfer += $output->writeFieldBegin('userid', TType::I32, 2);
      $xfer += $output->writeI32($this->userid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->taskname !== null) {
      $xfer += $output->writeFieldBegin('taskname', TType::STRING, 3);
      $xfer += $output->writeString($this->taskname);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->state !== null) {
      $xfer += $output->writeFieldBegin('state', TType::I32, 4);
      $xfer += $output->writeI32($this->state);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->taskdescript !== null) {
      $xfer += $output->writeFieldBegin('taskdescript', TType::STRING, 5);
      $xfer += $output->writeString($this->taskdescript);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::I32, 6);
      $xfer += $output->writeI32($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->award !== null) {
      $xfer += $output->writeFieldBegin('award', TType::I32, 7);
      $xfer += $output->writeI32($this->award);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->link !== null) {
      $xfer += $output->writeFieldBegin('link', TType::STRING, 8);
      $xfer += $output->writeString($this->link);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SubmitTaskResult {
  static $_TSPEC;

  public $taskid = null;
  public $taskname = null;
  public $award = null;
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'taskid',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'taskname',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'award',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['taskid'])) {
        $this->taskid = $vals['taskid'];
      }
      if (isset($vals['taskname'])) {
        $this->taskname = $vals['taskname'];
      }
      if (isset($vals['award'])) {
        $this->award = $vals['award'];
      }
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'SubmitTaskResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->taskid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->taskname);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->award);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SubmitTaskResult');
    if ($this->taskid !== null) {
      $xfer += $output->writeFieldBegin('taskid', TType::I32, 1);
      $xfer += $output->writeI32($this->taskid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->taskname !== null) {
      $xfer += $output->writeFieldBegin('taskname', TType::STRING, 2);
      $xfer += $output->writeString($this->taskname);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->award !== null) {
      $xfer += $output->writeFieldBegin('award', TType::I32, 3);
      $xfer += $output->writeI32($this->award);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 4);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TaskList {
  static $_TSPEC;

  public $elements = null;
  public $count = null;
  public $act = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'elements',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'QueryTaskResult',
            ),
          ),
        2 => array(
          'var' => 'count',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'act',
          'type' => TType::STRUCT,
          'class' => 'Active',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['elements'])) {
        $this->elements = $vals['elements'];
      }
      if (isset($vals['count'])) {
        $this->count = $vals['count'];
      }
      if (isset($vals['act'])) {
        $this->act = $vals['act'];
      }
    }
  }

  public function getName() {
    return 'TaskList';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->elements = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readListBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $elem5 = new QueryTaskResult();
              $xfer += $elem5->read($input);
              $this->elements []= $elem5;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->count);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->act = new Active();
            $xfer += $this->act->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TaskList');
    if ($this->elements !== null) {
      if (!is_array($this->elements)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('elements', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->elements));
        {
          foreach ($this->elements as $iter6)
          {
            $xfer += $iter6->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->count !== null) {
      $xfer += $output->writeFieldBegin('count', TType::I32, 2);
      $xfer += $output->writeI32($this->count);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->act !== null) {
      if (!is_object($this->act)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('act', TType::STRUCT, 3);
      $xfer += $this->act->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class UserLuckInfo {
  static $_TSPEC;

  public $userid = null;
  public $sendLuck = null;
  public $receiveLuck = null;
  public $medalLevel = null;
  public $luckTimes = null;
  public $userName = null;
  public $userPhoto = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'userid',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'sendLuck',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'receiveLuck',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'medalLevel',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'luckTimes',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'userName',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'userPhoto',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['userid'])) {
        $this->userid = $vals['userid'];
      }
      if (isset($vals['sendLuck'])) {
        $this->sendLuck = $vals['sendLuck'];
      }
      if (isset($vals['receiveLuck'])) {
        $this->receiveLuck = $vals['receiveLuck'];
      }
      if (isset($vals['medalLevel'])) {
        $this->medalLevel = $vals['medalLevel'];
      }
      if (isset($vals['luckTimes'])) {
        $this->luckTimes = $vals['luckTimes'];
      }
      if (isset($vals['userName'])) {
        $this->userName = $vals['userName'];
      }
      if (isset($vals['userPhoto'])) {
        $this->userPhoto = $vals['userPhoto'];
      }
    }
  }

  public function getName() {
    return 'UserLuckInfo';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->userid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->sendLuck);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->receiveLuck);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->medalLevel);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->luckTimes);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->userName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->userPhoto);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('UserLuckInfo');
    if ($this->userid !== null) {
      $xfer += $output->writeFieldBegin('userid', TType::I32, 1);
      $xfer += $output->writeI32($this->userid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sendLuck !== null) {
      $xfer += $output->writeFieldBegin('sendLuck', TType::I32, 2);
      $xfer += $output->writeI32($this->sendLuck);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->receiveLuck !== null) {
      $xfer += $output->writeFieldBegin('receiveLuck', TType::I32, 3);
      $xfer += $output->writeI32($this->receiveLuck);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->medalLevel !== null) {
      $xfer += $output->writeFieldBegin('medalLevel', TType::I32, 4);
      $xfer += $output->writeI32($this->medalLevel);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->luckTimes !== null) {
      $xfer += $output->writeFieldBegin('luckTimes', TType::I32, 5);
      $xfer += $output->writeI32($this->luckTimes);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userName !== null) {
      $xfer += $output->writeFieldBegin('userName', TType::STRING, 6);
      $xfer += $output->writeString($this->userName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userPhoto !== null) {
      $xfer += $output->writeFieldBegin('userPhoto', TType::STRING, 7);
      $xfer += $output->writeString($this->userPhoto);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class UserLuckList {
  static $_TSPEC;

  public $elements = null;
  public $count = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'elements',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'UserLuckInfo',
            ),
          ),
        2 => array(
          'var' => 'count',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['elements'])) {
        $this->elements = $vals['elements'];
      }
      if (isset($vals['count'])) {
        $this->count = $vals['count'];
      }
    }
  }

  public function getName() {
    return 'UserLuckList';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->elements = array();
            $_size7 = 0;
            $_etype10 = 0;
            $xfer += $input->readListBegin($_etype10, $_size7);
            for ($_i11 = 0; $_i11 < $_size7; ++$_i11)
            {
              $elem12 = null;
              $elem12 = new UserLuckInfo();
              $xfer += $elem12->read($input);
              $this->elements []= $elem12;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->count);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('UserLuckList');
    if ($this->elements !== null) {
      if (!is_array($this->elements)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('elements', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->elements));
        {
          foreach ($this->elements as $iter13)
          {
            $xfer += $iter13->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->count !== null) {
      $xfer += $output->writeFieldBegin('count', TType::I32, 2);
      $xfer += $output->writeI32($this->count);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class FoolProps {
  static $_TSPEC;

  public $glue = null;
  public $nail = null;
  public $feces = null;
  public $rose = null;
  public $snake = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'glue',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'nail',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'feces',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'rose',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'snake',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['glue'])) {
        $this->glue = $vals['glue'];
      }
      if (isset($vals['nail'])) {
        $this->nail = $vals['nail'];
      }
      if (isset($vals['feces'])) {
        $this->feces = $vals['feces'];
      }
      if (isset($vals['rose'])) {
        $this->rose = $vals['rose'];
      }
      if (isset($vals['snake'])) {
        $this->snake = $vals['snake'];
      }
    }
  }

  public function getName() {
    return 'FoolProps';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->glue);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->nail);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->feces);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->rose);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->snake);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('FoolProps');
    if ($this->glue !== null) {
      $xfer += $output->writeFieldBegin('glue', TType::STRING, 1);
      $xfer += $output->writeString($this->glue);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->nail !== null) {
      $xfer += $output->writeFieldBegin('nail', TType::STRING, 2);
      $xfer += $output->writeString($this->nail);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->feces !== null) {
      $xfer += $output->writeFieldBegin('feces', TType::STRING, 3);
      $xfer += $output->writeString($this->feces);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->rose !== null) {
      $xfer += $output->writeFieldBegin('rose', TType::STRING, 4);
      $xfer += $output->writeString($this->rose);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->snake !== null) {
      $xfer += $output->writeFieldBegin('snake', TType::STRING, 5);
      $xfer += $output->writeString($this->snake);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class FunnyInfo {
  static $_TSPEC;

  public $funnyOther = null;
  public $beFunny = null;
  public $receiveProps = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'funnyOther',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'beFunny',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'receiveProps',
          'type' => TType::STRUCT,
          'class' => 'FoolProps',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['funnyOther'])) {
        $this->funnyOther = $vals['funnyOther'];
      }
      if (isset($vals['beFunny'])) {
        $this->beFunny = $vals['beFunny'];
      }
      if (isset($vals['receiveProps'])) {
        $this->receiveProps = $vals['receiveProps'];
      }
    }
  }

  public function getName() {
    return 'FunnyInfo';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->funnyOther);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->beFunny);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->receiveProps = new FoolProps();
            $xfer += $this->receiveProps->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('FunnyInfo');
    if ($this->funnyOther !== null) {
      $xfer += $output->writeFieldBegin('funnyOther', TType::STRING, 1);
      $xfer += $output->writeString($this->funnyOther);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->beFunny !== null) {
      $xfer += $output->writeFieldBegin('beFunny', TType::STRING, 2);
      $xfer += $output->writeString($this->beFunny);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->receiveProps !== null) {
      if (!is_object($this->receiveProps)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('receiveProps', TType::STRUCT, 3);
      $xfer += $this->receiveProps->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

?>
