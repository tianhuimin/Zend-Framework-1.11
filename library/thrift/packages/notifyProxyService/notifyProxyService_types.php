<?php
/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
include_once $GLOBALS['THRIFT_ROOT'].'/Thrift.php';


class NotifyMessageThrift {
  static $_TSPEC;

  public $source_id = null;
  public $source_type_id = null;
  public $target_uid = null;
  public $message_content = null;
  public $template_id = null;
  public $create_time = null;
  public $flag = null;
  public $id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'source_id',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'source_type_id',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'target_uid',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'message_content',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'template_id',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'create_time',
          'type' => TType::I64,
          ),
        7 => array(
          'var' => 'flag',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'id',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['source_id'])) {
        $this->source_id = $vals['source_id'];
      }
      if (isset($vals['source_type_id'])) {
        $this->source_type_id = $vals['source_type_id'];
      }
      if (isset($vals['target_uid'])) {
        $this->target_uid = $vals['target_uid'];
      }
      if (isset($vals['message_content'])) {
        $this->message_content = $vals['message_content'];
      }
      if (isset($vals['template_id'])) {
        $this->template_id = $vals['template_id'];
      }
      if (isset($vals['create_time'])) {
        $this->create_time = $vals['create_time'];
      }
      if (isset($vals['flag'])) {
        $this->flag = $vals['flag'];
      }
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
    }
  }

  public function getName() {
    return 'NotifyMessageThrift';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->source_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->source_type_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->target_uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->message_content);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->template_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->create_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->flag);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('NotifyMessageThrift');
    if ($this->source_id !== null) {
      $xfer += $output->writeFieldBegin('source_id', TType::STRING, 1);
      $xfer += $output->writeString($this->source_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->source_type_id !== null) {
      $xfer += $output->writeFieldBegin('source_type_id', TType::STRING, 2);
      $xfer += $output->writeString($this->source_type_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->target_uid !== null) {
      $xfer += $output->writeFieldBegin('target_uid', TType::STRING, 3);
      $xfer += $output->writeString($this->target_uid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->message_content !== null) {
      $xfer += $output->writeFieldBegin('message_content', TType::STRING, 4);
      $xfer += $output->writeString($this->message_content);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->template_id !== null) {
      $xfer += $output->writeFieldBegin('template_id', TType::STRING, 5);
      $xfer += $output->writeString($this->template_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->create_time !== null) {
      $xfer += $output->writeFieldBegin('create_time', TType::I64, 6);
      $xfer += $output->writeI64($this->create_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->flag !== null) {
      $xfer += $output->writeFieldBegin('flag', TType::I32, 7);
      $xfer += $output->writeI32($this->flag);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::STRING, 8);
      $xfer += $output->writeString($this->id);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SystemNotifyThrift {
  static $_TSPEC;

  public $createTime = null;
  public $content = null;
  public $id = null;
  public $is_read = null;
  public $title = null;
  public $titleName = null;
  public $source = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'createTime',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'content',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'id',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'is_read',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'title',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'titleName',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'source',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['createTime'])) {
        $this->createTime = $vals['createTime'];
      }
      if (isset($vals['content'])) {
        $this->content = $vals['content'];
      }
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['is_read'])) {
        $this->is_read = $vals['is_read'];
      }
      if (isset($vals['title'])) {
        $this->title = $vals['title'];
      }
      if (isset($vals['titleName'])) {
        $this->titleName = $vals['titleName'];
      }
      if (isset($vals['source'])) {
        $this->source = $vals['source'];
      }
    }
  }

  public function getName() {
    return 'SystemNotifyThrift';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->createTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->content);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->is_read);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->title);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->titleName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->source);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SystemNotifyThrift');
    if ($this->createTime !== null) {
      $xfer += $output->writeFieldBegin('createTime', TType::I64, 1);
      $xfer += $output->writeI64($this->createTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->content !== null) {
      $xfer += $output->writeFieldBegin('content', TType::STRING, 2);
      $xfer += $output->writeString($this->content);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::STRING, 3);
      $xfer += $output->writeString($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->is_read !== null) {
      $xfer += $output->writeFieldBegin('is_read', TType::STRING, 4);
      $xfer += $output->writeString($this->is_read);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->title !== null) {
      $xfer += $output->writeFieldBegin('title', TType::STRING, 5);
      $xfer += $output->writeString($this->title);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->titleName !== null) {
      $xfer += $output->writeFieldBegin('titleName', TType::STRING, 6);
      $xfer += $output->writeString($this->titleName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->source !== null) {
      $xfer += $output->writeFieldBegin('source', TType::STRING, 7);
      $xfer += $output->writeString($this->source);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class UserNotifyThrift {
  static $_TSPEC;

  public $unid = null;
  public $app_id = null;
  public $source_type_id = null;
  public $is_read = null;
  public $createTime = null;
  public $userId = null;
  public $nickName = null;
  public $commContent = null;
  public $content = null;
  public $tid = null;
  public $refTid = null;
  public $refCommContent = null;
  public $refContent = null;
  public $myNickName = null;
  public $threadId = null;
  public $threadTitle = null;
  public $commContentId = null;
  public $refCommContentId = null;
  public $photo = null;
  public $count = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'unid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'app_id',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'source_type_id',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'is_read',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'createTime',
          'type' => TType::I64,
          ),
        6 => array(
          'var' => 'userId',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'nickName',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'commContent',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'content',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'tid',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'refTid',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'refCommContent',
          'type' => TType::STRING,
          ),
        13 => array(
          'var' => 'refContent',
          'type' => TType::STRING,
          ),
        14 => array(
          'var' => 'myNickName',
          'type' => TType::STRING,
          ),
        15 => array(
          'var' => 'threadId',
          'type' => TType::STRING,
          ),
        16 => array(
          'var' => 'threadTitle',
          'type' => TType::STRING,
          ),
        17 => array(
          'var' => 'commContentId',
          'type' => TType::STRING,
          ),
        18 => array(
          'var' => 'refCommContentId',
          'type' => TType::STRING,
          ),
        19 => array(
          'var' => 'photo',
          'type' => TType::STRING,
          ),
        20 => array(
          'var' => 'count',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['unid'])) {
        $this->unid = $vals['unid'];
      }
      if (isset($vals['app_id'])) {
        $this->app_id = $vals['app_id'];
      }
      if (isset($vals['source_type_id'])) {
        $this->source_type_id = $vals['source_type_id'];
      }
      if (isset($vals['is_read'])) {
        $this->is_read = $vals['is_read'];
      }
      if (isset($vals['createTime'])) {
        $this->createTime = $vals['createTime'];
      }
      if (isset($vals['userId'])) {
        $this->userId = $vals['userId'];
      }
      if (isset($vals['nickName'])) {
        $this->nickName = $vals['nickName'];
      }
      if (isset($vals['commContent'])) {
        $this->commContent = $vals['commContent'];
      }
      if (isset($vals['content'])) {
        $this->content = $vals['content'];
      }
      if (isset($vals['tid'])) {
        $this->tid = $vals['tid'];
      }
      if (isset($vals['refTid'])) {
        $this->refTid = $vals['refTid'];
      }
      if (isset($vals['refCommContent'])) {
        $this->refCommContent = $vals['refCommContent'];
      }
      if (isset($vals['refContent'])) {
        $this->refContent = $vals['refContent'];
      }
      if (isset($vals['myNickName'])) {
        $this->myNickName = $vals['myNickName'];
      }
      if (isset($vals['threadId'])) {
        $this->threadId = $vals['threadId'];
      }
      if (isset($vals['threadTitle'])) {
        $this->threadTitle = $vals['threadTitle'];
      }
      if (isset($vals['commContentId'])) {
        $this->commContentId = $vals['commContentId'];
      }
      if (isset($vals['refCommContentId'])) {
        $this->refCommContentId = $vals['refCommContentId'];
      }
      if (isset($vals['photo'])) {
        $this->photo = $vals['photo'];
      }
      if (isset($vals['count'])) {
        $this->count = $vals['count'];
      }
    }
  }

  public function getName() {
    return 'UserNotifyThrift';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->unid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->app_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->source_type_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->is_read);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->createTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->userId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->nickName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->commContent);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->content);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->refTid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->refCommContent);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->refContent);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->myNickName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->threadId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->threadTitle);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->commContentId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 18:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->refCommContentId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 19:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->photo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 20:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->count);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('UserNotifyThrift');
    if ($this->unid !== null) {
      $xfer += $output->writeFieldBegin('unid', TType::STRING, 1);
      $xfer += $output->writeString($this->unid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->app_id !== null) {
      $xfer += $output->writeFieldBegin('app_id', TType::STRING, 2);
      $xfer += $output->writeString($this->app_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->source_type_id !== null) {
      $xfer += $output->writeFieldBegin('source_type_id', TType::STRING, 3);
      $xfer += $output->writeString($this->source_type_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->is_read !== null) {
      $xfer += $output->writeFieldBegin('is_read', TType::I32, 4);
      $xfer += $output->writeI32($this->is_read);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->createTime !== null) {
      $xfer += $output->writeFieldBegin('createTime', TType::I64, 5);
      $xfer += $output->writeI64($this->createTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userId !== null) {
      $xfer += $output->writeFieldBegin('userId', TType::I32, 6);
      $xfer += $output->writeI32($this->userId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->nickName !== null) {
      $xfer += $output->writeFieldBegin('nickName', TType::STRING, 7);
      $xfer += $output->writeString($this->nickName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->commContent !== null) {
      $xfer += $output->writeFieldBegin('commContent', TType::STRING, 8);
      $xfer += $output->writeString($this->commContent);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->content !== null) {
      $xfer += $output->writeFieldBegin('content', TType::STRING, 9);
      $xfer += $output->writeString($this->content);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tid !== null) {
      $xfer += $output->writeFieldBegin('tid', TType::STRING, 10);
      $xfer += $output->writeString($this->tid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->refTid !== null) {
      $xfer += $output->writeFieldBegin('refTid', TType::STRING, 11);
      $xfer += $output->writeString($this->refTid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->refCommContent !== null) {
      $xfer += $output->writeFieldBegin('refCommContent', TType::STRING, 12);
      $xfer += $output->writeString($this->refCommContent);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->refContent !== null) {
      $xfer += $output->writeFieldBegin('refContent', TType::STRING, 13);
      $xfer += $output->writeString($this->refContent);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->myNickName !== null) {
      $xfer += $output->writeFieldBegin('myNickName', TType::STRING, 14);
      $xfer += $output->writeString($this->myNickName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->threadId !== null) {
      $xfer += $output->writeFieldBegin('threadId', TType::STRING, 15);
      $xfer += $output->writeString($this->threadId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->threadTitle !== null) {
      $xfer += $output->writeFieldBegin('threadTitle', TType::STRING, 16);
      $xfer += $output->writeString($this->threadTitle);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->commContentId !== null) {
      $xfer += $output->writeFieldBegin('commContentId', TType::STRING, 17);
      $xfer += $output->writeString($this->commContentId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->refCommContentId !== null) {
      $xfer += $output->writeFieldBegin('refCommContentId', TType::STRING, 18);
      $xfer += $output->writeString($this->refCommContentId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->photo !== null) {
      $xfer += $output->writeFieldBegin('photo', TType::STRING, 19);
      $xfer += $output->writeString($this->photo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->count !== null) {
      $xfer += $output->writeFieldBegin('count', TType::STRING, 20);
      $xfer += $output->writeString($this->count);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class UserPrivateMessageThrift {
  static $_TSPEC;

  public $id = null;
  public $send_uid = null;
  public $rev_uid = null;
  public $content = null;
  public $create_time = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'send_uid',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'rev_uid',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'content',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'create_time',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['send_uid'])) {
        $this->send_uid = $vals['send_uid'];
      }
      if (isset($vals['rev_uid'])) {
        $this->rev_uid = $vals['rev_uid'];
      }
      if (isset($vals['content'])) {
        $this->content = $vals['content'];
      }
      if (isset($vals['create_time'])) {
        $this->create_time = $vals['create_time'];
      }
    }
  }

  public function getName() {
    return 'UserPrivateMessageThrift';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->send_uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->rev_uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->content);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->create_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('UserPrivateMessageThrift');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::STRING, 1);
      $xfer += $output->writeString($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->send_uid !== null) {
      $xfer += $output->writeFieldBegin('send_uid', TType::STRING, 2);
      $xfer += $output->writeString($this->send_uid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->rev_uid !== null) {
      $xfer += $output->writeFieldBegin('rev_uid', TType::STRING, 3);
      $xfer += $output->writeString($this->rev_uid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->content !== null) {
      $xfer += $output->writeFieldBegin('content', TType::STRING, 4);
      $xfer += $output->writeString($this->content);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->create_time !== null) {
      $xfer += $output->writeFieldBegin('create_time', TType::I64, 5);
      $xfer += $output->writeI64($this->create_time);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class UserPrivateMessageRelThrift {
  static $_TSPEC;

  public $rel_id = null;
  public $fid = null;
  public $last_content = null;
  public $last_edit_time = null;
  public $messageCount = null;
  public $is_read = null;
  public $allCount = null;
  public $photo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'rel_id',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'fid',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'last_content',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'last_edit_time',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'messageCount',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'is_read',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'allCount',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'photo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['rel_id'])) {
        $this->rel_id = $vals['rel_id'];
      }
      if (isset($vals['fid'])) {
        $this->fid = $vals['fid'];
      }
      if (isset($vals['last_content'])) {
        $this->last_content = $vals['last_content'];
      }
      if (isset($vals['last_edit_time'])) {
        $this->last_edit_time = $vals['last_edit_time'];
      }
      if (isset($vals['messageCount'])) {
        $this->messageCount = $vals['messageCount'];
      }
      if (isset($vals['is_read'])) {
        $this->is_read = $vals['is_read'];
      }
      if (isset($vals['allCount'])) {
        $this->allCount = $vals['allCount'];
      }
      if (isset($vals['photo'])) {
        $this->photo = $vals['photo'];
      }
    }
  }

  public function getName() {
    return 'UserPrivateMessageRelThrift';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->rel_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->fid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->last_content);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->last_edit_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->messageCount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->is_read);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->allCount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->photo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('UserPrivateMessageRelThrift');
    if ($this->rel_id !== null) {
      $xfer += $output->writeFieldBegin('rel_id', TType::STRING, 1);
      $xfer += $output->writeString($this->rel_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->fid !== null) {
      $xfer += $output->writeFieldBegin('fid', TType::STRING, 2);
      $xfer += $output->writeString($this->fid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->last_content !== null) {
      $xfer += $output->writeFieldBegin('last_content', TType::STRING, 3);
      $xfer += $output->writeString($this->last_content);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->last_edit_time !== null) {
      $xfer += $output->writeFieldBegin('last_edit_time', TType::I64, 4);
      $xfer += $output->writeI64($this->last_edit_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->messageCount !== null) {
      $xfer += $output->writeFieldBegin('messageCount', TType::I32, 5);
      $xfer += $output->writeI32($this->messageCount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->is_read !== null) {
      $xfer += $output->writeFieldBegin('is_read', TType::I32, 6);
      $xfer += $output->writeI32($this->is_read);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->allCount !== null) {
      $xfer += $output->writeFieldBegin('allCount', TType::I32, 7);
      $xfer += $output->writeI32($this->allCount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->photo !== null) {
      $xfer += $output->writeFieldBegin('photo', TType::STRING, 8);
      $xfer += $output->writeString($this->photo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class UserNoReadNotifyThrift {
  static $_TSPEC;

  public $title = null;
  public $notifyType = null;
  public $from = null;
  public $fromId = null;
  public $time = null;
  public $privateMessageNoReadNum = null;
  public $id = null;
  public $relId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'title',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'notifyType',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'from',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'fromId',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'time',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'privateMessageNoReadNum',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'id',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'relId',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['title'])) {
        $this->title = $vals['title'];
      }
      if (isset($vals['notifyType'])) {
        $this->notifyType = $vals['notifyType'];
      }
      if (isset($vals['from'])) {
        $this->from = $vals['from'];
      }
      if (isset($vals['fromId'])) {
        $this->fromId = $vals['fromId'];
      }
      if (isset($vals['time'])) {
        $this->time = $vals['time'];
      }
      if (isset($vals['privateMessageNoReadNum'])) {
        $this->privateMessageNoReadNum = $vals['privateMessageNoReadNum'];
      }
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['relId'])) {
        $this->relId = $vals['relId'];
      }
    }
  }

  public function getName() {
    return 'UserNoReadNotifyThrift';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->title);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->notifyType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->from);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->fromId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->privateMessageNoReadNum);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->relId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('UserNoReadNotifyThrift');
    if ($this->title !== null) {
      $xfer += $output->writeFieldBegin('title', TType::STRING, 1);
      $xfer += $output->writeString($this->title);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->notifyType !== null) {
      $xfer += $output->writeFieldBegin('notifyType', TType::I32, 2);
      $xfer += $output->writeI32($this->notifyType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->from !== null) {
      $xfer += $output->writeFieldBegin('from', TType::STRING, 3);
      $xfer += $output->writeString($this->from);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->fromId !== null) {
      $xfer += $output->writeFieldBegin('fromId', TType::STRING, 4);
      $xfer += $output->writeString($this->fromId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->time !== null) {
      $xfer += $output->writeFieldBegin('time', TType::STRING, 5);
      $xfer += $output->writeString($this->time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->privateMessageNoReadNum !== null) {
      $xfer += $output->writeFieldBegin('privateMessageNoReadNum', TType::I32, 6);
      $xfer += $output->writeI32($this->privateMessageNoReadNum);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::STRING, 7);
      $xfer += $output->writeString($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->relId !== null) {
      $xfer += $output->writeFieldBegin('relId', TType::STRING, 8);
      $xfer += $output->writeString($this->relId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class UserNotifyListThrift {
  static $_TSPEC;

  public $title = null;
  public $from = null;
  public $time = null;
  public $isRead = null;
  public $id = null;
  public $appId = null;
  public $type = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'title',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'from',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'time',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'isRead',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'id',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'appId',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'type',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['title'])) {
        $this->title = $vals['title'];
      }
      if (isset($vals['from'])) {
        $this->from = $vals['from'];
      }
      if (isset($vals['time'])) {
        $this->time = $vals['time'];
      }
      if (isset($vals['isRead'])) {
        $this->isRead = $vals['isRead'];
      }
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['appId'])) {
        $this->appId = $vals['appId'];
      }
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
    }
  }

  public function getName() {
    return 'UserNotifyListThrift';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->title);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->from);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->isRead);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->appId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('UserNotifyListThrift');
    if ($this->title !== null) {
      $xfer += $output->writeFieldBegin('title', TType::STRING, 1);
      $xfer += $output->writeString($this->title);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->from !== null) {
      $xfer += $output->writeFieldBegin('from', TType::STRING, 2);
      $xfer += $output->writeString($this->from);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->time !== null) {
      $xfer += $output->writeFieldBegin('time', TType::STRING, 3);
      $xfer += $output->writeString($this->time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->isRead !== null) {
      $xfer += $output->writeFieldBegin('isRead', TType::I32, 4);
      $xfer += $output->writeI32($this->isRead);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::STRING, 5);
      $xfer += $output->writeString($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->appId !== null) {
      $xfer += $output->writeFieldBegin('appId', TType::STRING, 6);
      $xfer += $output->writeString($this->appId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::I32, 7);
      $xfer += $output->writeI32($this->type);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class RecentlyVisitedUserThrift {
  static $_TSPEC;

  public $userId = null;
  public $nickName = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'userId',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'nickName',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['userId'])) {
        $this->userId = $vals['userId'];
      }
      if (isset($vals['nickName'])) {
        $this->nickName = $vals['nickName'];
      }
    }
  }

  public function getName() {
    return 'RecentlyVisitedUserThrift';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->userId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->nickName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('RecentlyVisitedUserThrift');
    if ($this->userId !== null) {
      $xfer += $output->writeFieldBegin('userId', TType::STRING, 1);
      $xfer += $output->writeString($this->userId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->nickName !== null) {
      $xfer += $output->writeFieldBegin('nickName', TType::STRING, 2);
      $xfer += $output->writeString($this->nickName);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class NotifyNoReadCountThrift {
  static $_TSPEC;

  public $pMessageNoRCount = null;
  public $notifyNoRCount = null;
  public $sysNotifyNoRCount = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'pMessageNoRCount',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'notifyNoRCount',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'sysNotifyNoRCount',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['pMessageNoRCount'])) {
        $this->pMessageNoRCount = $vals['pMessageNoRCount'];
      }
      if (isset($vals['notifyNoRCount'])) {
        $this->notifyNoRCount = $vals['notifyNoRCount'];
      }
      if (isset($vals['sysNotifyNoRCount'])) {
        $this->sysNotifyNoRCount = $vals['sysNotifyNoRCount'];
      }
    }
  }

  public function getName() {
    return 'NotifyNoReadCountThrift';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->pMessageNoRCount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->notifyNoRCount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->sysNotifyNoRCount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('NotifyNoReadCountThrift');
    if ($this->pMessageNoRCount !== null) {
      $xfer += $output->writeFieldBegin('pMessageNoRCount', TType::I32, 1);
      $xfer += $output->writeI32($this->pMessageNoRCount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->notifyNoRCount !== null) {
      $xfer += $output->writeFieldBegin('notifyNoRCount', TType::I32, 2);
      $xfer += $output->writeI32($this->notifyNoRCount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sysNotifyNoRCount !== null) {
      $xfer += $output->writeFieldBegin('sysNotifyNoRCount', TType::I32, 3);
      $xfer += $output->writeI32($this->sysNotifyNoRCount);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ChatRoomAuthThrift {
  static $_TSPEC;

  public $authId = null;
  public $authName = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'authId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'authName',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['authId'])) {
        $this->authId = $vals['authId'];
      }
      if (isset($vals['authName'])) {
        $this->authName = $vals['authName'];
      }
    }
  }

  public function getName() {
    return 'ChatRoomAuthThrift';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->authId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->authName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ChatRoomAuthThrift');
    if ($this->authId !== null) {
      $xfer += $output->writeFieldBegin('authId', TType::I32, 1);
      $xfer += $output->writeI32($this->authId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->authName !== null) {
      $xfer += $output->writeFieldBegin('authName', TType::STRING, 2);
      $xfer += $output->writeString($this->authName);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ChatRoomAuthListThrift {
  static $_TSPEC;

  public $forbidden = null;
  public $setHost = null;
  public $setGuest = null;
  public $removeRecord = null;
  public $setPolic = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'forbidden',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'setHost',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'setGuest',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'removeRecord',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'setPolic',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['forbidden'])) {
        $this->forbidden = $vals['forbidden'];
      }
      if (isset($vals['setHost'])) {
        $this->setHost = $vals['setHost'];
      }
      if (isset($vals['setGuest'])) {
        $this->setGuest = $vals['setGuest'];
      }
      if (isset($vals['removeRecord'])) {
        $this->removeRecord = $vals['removeRecord'];
      }
      if (isset($vals['setPolic'])) {
        $this->setPolic = $vals['setPolic'];
      }
    }
  }

  public function getName() {
    return 'ChatRoomAuthListThrift';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->forbidden);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->setHost);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->setGuest);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->removeRecord);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->setPolic);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ChatRoomAuthListThrift');
    if ($this->forbidden !== null) {
      $xfer += $output->writeFieldBegin('forbidden', TType::I32, 1);
      $xfer += $output->writeI32($this->forbidden);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->setHost !== null) {
      $xfer += $output->writeFieldBegin('setHost', TType::I32, 2);
      $xfer += $output->writeI32($this->setHost);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->setGuest !== null) {
      $xfer += $output->writeFieldBegin('setGuest', TType::I32, 3);
      $xfer += $output->writeI32($this->setGuest);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->removeRecord !== null) {
      $xfer += $output->writeFieldBegin('removeRecord', TType::I32, 4);
      $xfer += $output->writeI32($this->removeRecord);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->setPolic !== null) {
      $xfer += $output->writeFieldBegin('setPolic', TType::I32, 5);
      $xfer += $output->writeI32($this->setPolic);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ChatRoomRecommandThrift {
  static $_TSPEC;

  public $userId = null;
  public $nickName = null;
  public $level = null;
  public $levelIndex = null;
  public $reason = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'userId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'nickName',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'level',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'levelIndex',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'reason',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['userId'])) {
        $this->userId = $vals['userId'];
      }
      if (isset($vals['nickName'])) {
        $this->nickName = $vals['nickName'];
      }
      if (isset($vals['level'])) {
        $this->level = $vals['level'];
      }
      if (isset($vals['levelIndex'])) {
        $this->levelIndex = $vals['levelIndex'];
      }
      if (isset($vals['reason'])) {
        $this->reason = $vals['reason'];
      }
    }
  }

  public function getName() {
    return 'ChatRoomRecommandThrift';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->userId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->nickName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->level);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->levelIndex);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->reason);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ChatRoomRecommandThrift');
    if ($this->userId !== null) {
      $xfer += $output->writeFieldBegin('userId', TType::I32, 1);
      $xfer += $output->writeI32($this->userId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->nickName !== null) {
      $xfer += $output->writeFieldBegin('nickName', TType::STRING, 2);
      $xfer += $output->writeString($this->nickName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->level !== null) {
      $xfer += $output->writeFieldBegin('level', TType::STRING, 3);
      $xfer += $output->writeString($this->level);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->levelIndex !== null) {
      $xfer += $output->writeFieldBegin('levelIndex', TType::I32, 4);
      $xfer += $output->writeI32($this->levelIndex);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->reason !== null) {
      $xfer += $output->writeFieldBegin('reason', TType::I32, 5);
      $xfer += $output->writeI32($this->reason);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GroonChatRoomThrift {
  static $_TSPEC;

  public $chatRoomId = null;
  public $chatRoomName = null;
  public $count = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'chatRoomId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'chatRoomName',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'count',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['chatRoomId'])) {
        $this->chatRoomId = $vals['chatRoomId'];
      }
      if (isset($vals['chatRoomName'])) {
        $this->chatRoomName = $vals['chatRoomName'];
      }
      if (isset($vals['count'])) {
        $this->count = $vals['count'];
      }
    }
  }

  public function getName() {
    return 'GroonChatRoomThrift';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->chatRoomId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->chatRoomName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->count);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GroonChatRoomThrift');
    if ($this->chatRoomId !== null) {
      $xfer += $output->writeFieldBegin('chatRoomId', TType::I32, 1);
      $xfer += $output->writeI32($this->chatRoomId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->chatRoomName !== null) {
      $xfer += $output->writeFieldBegin('chatRoomName', TType::STRING, 2);
      $xfer += $output->writeString($this->chatRoomName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->count !== null) {
      $xfer += $output->writeFieldBegin('count', TType::I64, 3);
      $xfer += $output->writeI64($this->count);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ChatRoomUsersThrift {
  static $_TSPEC;

  public $userId = null;
  public $nickName = null;
  public $onLine = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'userId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'nickName',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'onLine',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['userId'])) {
        $this->userId = $vals['userId'];
      }
      if (isset($vals['nickName'])) {
        $this->nickName = $vals['nickName'];
      }
      if (isset($vals['onLine'])) {
        $this->onLine = $vals['onLine'];
      }
    }
  }

  public function getName() {
    return 'ChatRoomUsersThrift';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->userId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->nickName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->onLine);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ChatRoomUsersThrift');
    if ($this->userId !== null) {
      $xfer += $output->writeFieldBegin('userId', TType::I32, 1);
      $xfer += $output->writeI32($this->userId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->nickName !== null) {
      $xfer += $output->writeFieldBegin('nickName', TType::STRING, 2);
      $xfer += $output->writeString($this->nickName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->onLine !== null) {
      $xfer += $output->writeFieldBegin('onLine', TType::I32, 3);
      $xfer += $output->writeI32($this->onLine);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ChatRoomRecordThrift {
  static $_TSPEC;

  public $sendId = null;
  public $revId = null;
  public $createTime = null;
  public $content = null;
  public $type = null;
  public $contentId = null;
  public $sendNickName = null;
  public $revNickName = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'sendId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'revId',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'createTime',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'content',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'type',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'contentId',
          'type' => TType::I64,
          ),
        7 => array(
          'var' => 'sendNickName',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'revNickName',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['sendId'])) {
        $this->sendId = $vals['sendId'];
      }
      if (isset($vals['revId'])) {
        $this->revId = $vals['revId'];
      }
      if (isset($vals['createTime'])) {
        $this->createTime = $vals['createTime'];
      }
      if (isset($vals['content'])) {
        $this->content = $vals['content'];
      }
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['contentId'])) {
        $this->contentId = $vals['contentId'];
      }
      if (isset($vals['sendNickName'])) {
        $this->sendNickName = $vals['sendNickName'];
      }
      if (isset($vals['revNickName'])) {
        $this->revNickName = $vals['revNickName'];
      }
    }
  }

  public function getName() {
    return 'ChatRoomRecordThrift';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->sendId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->revId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->createTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->content);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->contentId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->sendNickName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->revNickName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ChatRoomRecordThrift');
    if ($this->sendId !== null) {
      $xfer += $output->writeFieldBegin('sendId', TType::I32, 1);
      $xfer += $output->writeI32($this->sendId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->revId !== null) {
      $xfer += $output->writeFieldBegin('revId', TType::I32, 2);
      $xfer += $output->writeI32($this->revId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->createTime !== null) {
      $xfer += $output->writeFieldBegin('createTime', TType::I64, 3);
      $xfer += $output->writeI64($this->createTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->content !== null) {
      $xfer += $output->writeFieldBegin('content', TType::STRING, 4);
      $xfer += $output->writeString($this->content);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::I32, 5);
      $xfer += $output->writeI32($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->contentId !== null) {
      $xfer += $output->writeFieldBegin('contentId', TType::I64, 6);
      $xfer += $output->writeI64($this->contentId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sendNickName !== null) {
      $xfer += $output->writeFieldBegin('sendNickName', TType::STRING, 7);
      $xfer += $output->writeString($this->sendNickName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->revNickName !== null) {
      $xfer += $output->writeFieldBegin('revNickName', TType::STRING, 8);
      $xfer += $output->writeString($this->revNickName);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ChatRoomWallInfoThrift {
  static $_TSPEC;

  public $admidId = null;
  public $lockDay = null;
  public $wallUserId = null;
  public $reason = null;
  public $create_time = null;
  public $admindName = null;
  public $wallUserNames = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'admidId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'lockDay',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'wallUserId',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'reason',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'create_time',
          'type' => TType::I64,
          ),
        6 => array(
          'var' => 'admindName',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'wallUserNames',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['admidId'])) {
        $this->admidId = $vals['admidId'];
      }
      if (isset($vals['lockDay'])) {
        $this->lockDay = $vals['lockDay'];
      }
      if (isset($vals['wallUserId'])) {
        $this->wallUserId = $vals['wallUserId'];
      }
      if (isset($vals['reason'])) {
        $this->reason = $vals['reason'];
      }
      if (isset($vals['create_time'])) {
        $this->create_time = $vals['create_time'];
      }
      if (isset($vals['admindName'])) {
        $this->admindName = $vals['admindName'];
      }
      if (isset($vals['wallUserNames'])) {
        $this->wallUserNames = $vals['wallUserNames'];
      }
    }
  }

  public function getName() {
    return 'ChatRoomWallInfoThrift';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->admidId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->lockDay);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->wallUserId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->reason);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->create_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->admindName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->wallUserNames);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ChatRoomWallInfoThrift');
    if ($this->admidId !== null) {
      $xfer += $output->writeFieldBegin('admidId', TType::I32, 1);
      $xfer += $output->writeI32($this->admidId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lockDay !== null) {
      $xfer += $output->writeFieldBegin('lockDay', TType::I32, 2);
      $xfer += $output->writeI32($this->lockDay);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->wallUserId !== null) {
      $xfer += $output->writeFieldBegin('wallUserId', TType::I32, 3);
      $xfer += $output->writeI32($this->wallUserId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->reason !== null) {
      $xfer += $output->writeFieldBegin('reason', TType::STRING, 4);
      $xfer += $output->writeString($this->reason);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->create_time !== null) {
      $xfer += $output->writeFieldBegin('create_time', TType::I64, 5);
      $xfer += $output->writeI64($this->create_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->admindName !== null) {
      $xfer += $output->writeFieldBegin('admindName', TType::STRING, 6);
      $xfer += $output->writeString($this->admindName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->wallUserNames !== null) {
      $xfer += $output->writeFieldBegin('wallUserNames', TType::STRING, 7);
      $xfer += $output->writeString($this->wallUserNames);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ChatRoomWallInfoListThrift {
  static $_TSPEC;

  public $chatRoomList = null;
  public $count = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'chatRoomList',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'ChatRoomWallInfoThrift',
            ),
          ),
        2 => array(
          'var' => 'count',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['chatRoomList'])) {
        $this->chatRoomList = $vals['chatRoomList'];
      }
      if (isset($vals['count'])) {
        $this->count = $vals['count'];
      }
    }
  }

  public function getName() {
    return 'ChatRoomWallInfoListThrift';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->chatRoomList = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readListBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $elem5 = new ChatRoomWallInfoThrift();
              $xfer += $elem5->read($input);
              $this->chatRoomList []= $elem5;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->count);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ChatRoomWallInfoListThrift');
    if ($this->chatRoomList !== null) {
      if (!is_array($this->chatRoomList)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('chatRoomList', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->chatRoomList));
        {
          foreach ($this->chatRoomList as $iter6)
          {
            $xfer += $iter6->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->count !== null) {
      $xfer += $output->writeFieldBegin('count', TType::I64, 2);
      $xfer += $output->writeI64($this->count);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

?>
