<?php
/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
include_once $GLOBALS['THRIFT_ROOT'].'/Thrift.php';

include_once $GLOBALS['THRIFT_ROOT'].'/packages/common/common_types.php';

$GLOBALS['E_OpType'] = array(
  'DISABLE_OPTYPE' => 0,
  'ENABLE_OPTYPE' => 1,
);

final class OpType {
  const DISABLE_OPTYPE = 0;
  const ENABLE_OPTYPE = 1;
  static public $__names = array(
    0 => 'DISABLE_OPTYPE',
    1 => 'ENABLE_OPTYPE',
  );
}

$GLOBALS['E_RebateType'] = array(
  'REBATE_EVERYONCE' => 1,
  'REBATE_FOR_TOTAL' => 2,
  'REBATE_FOR_CHANCE' => 3,
);

final class RebateType {
  const REBATE_EVERYONCE = 1;
  const REBATE_FOR_TOTAL = 2;
  const REBATE_FOR_CHANCE = 3;
  static public $__names = array(
    1 => 'REBATE_EVERYONCE',
    2 => 'REBATE_FOR_TOTAL',
    3 => 'REBATE_FOR_CHANCE',
  );
}

$GLOBALS['E_ActivityType'] = array(
  'ALL_TYPE' => 0,
  'CP_TYPE' => 1,
  'H5_TYPE' => 2,
  'NOTICE_TYPE' => 3,
  'LOTTERY_TYPE' => 4,
  'RECHARGE_REBATE_TYPE' => 5,
);

final class ActivityType {
  const ALL_TYPE = 0;
  const CP_TYPE = 1;
  const H5_TYPE = 2;
  const NOTICE_TYPE = 3;
  const LOTTERY_TYPE = 4;
  const RECHARGE_REBATE_TYPE = 5;
  static public $__names = array(
    0 => 'ALL_TYPE',
    1 => 'CP_TYPE',
    2 => 'H5_TYPE',
    3 => 'NOTICE_TYPE',
    4 => 'LOTTERY_TYPE',
    5 => 'RECHARGE_REBATE_TYPE',
  );
}

$GLOBALS['E_JoinType'] = array(
  'NO_NEED_JOIN' => 0,
  'NEED_JOIN' => 1,
);

final class JoinType {
  const NO_NEED_JOIN = 0;
  const NEED_JOIN = 1;
  static public $__names = array(
    0 => 'NO_NEED_JOIN',
    1 => 'NEED_JOIN',
  );
}

class Packages {
  static $_TSPEC;

  public $packageId = null;
  public $packageName = null;
  public $packageDesc = null;
  public $packagePrice = null;
  public $startTime = null;
  public $endTime = null;
  public $gameCodeNum = null;
  public $leftNum = null;
  public $vip = null;
  public $consumepoint = null;
  public $status = null;
  public $gameCode = null;
  public $gameId = null;
  public $expiredTime = null;
  public $showStartTime = null;
  public $packageIcon = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'packageId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'packageName',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'packageDesc',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'packagePrice',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'startTime',
          'type' => TType::I64,
          ),
        6 => array(
          'var' => 'endTime',
          'type' => TType::I64,
          ),
        7 => array(
          'var' => 'gameCodeNum',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'leftNum',
          'type' => TType::I32,
          ),
        9 => array(
          'var' => 'vip',
          'type' => TType::I32,
          ),
        10 => array(
          'var' => 'consumepoint',
          'type' => TType::I32,
          ),
        11 => array(
          'var' => 'status',
          'type' => TType::I32,
          ),
        12 => array(
          'var' => 'gameCode',
          'type' => TType::STRING,
          ),
        13 => array(
          'var' => 'gameId',
          'type' => TType::I32,
          ),
        14 => array(
          'var' => 'expiredTime',
          'type' => TType::I64,
          ),
        15 => array(
          'var' => 'showStartTime',
          'type' => TType::I64,
          ),
        16 => array(
          'var' => 'packageIcon',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['packageId'])) {
        $this->packageId = $vals['packageId'];
      }
      if (isset($vals['packageName'])) {
        $this->packageName = $vals['packageName'];
      }
      if (isset($vals['packageDesc'])) {
        $this->packageDesc = $vals['packageDesc'];
      }
      if (isset($vals['packagePrice'])) {
        $this->packagePrice = $vals['packagePrice'];
      }
      if (isset($vals['startTime'])) {
        $this->startTime = $vals['startTime'];
      }
      if (isset($vals['endTime'])) {
        $this->endTime = $vals['endTime'];
      }
      if (isset($vals['gameCodeNum'])) {
        $this->gameCodeNum = $vals['gameCodeNum'];
      }
      if (isset($vals['leftNum'])) {
        $this->leftNum = $vals['leftNum'];
      }
      if (isset($vals['vip'])) {
        $this->vip = $vals['vip'];
      }
      if (isset($vals['consumepoint'])) {
        $this->consumepoint = $vals['consumepoint'];
      }
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
      if (isset($vals['gameCode'])) {
        $this->gameCode = $vals['gameCode'];
      }
      if (isset($vals['gameId'])) {
        $this->gameId = $vals['gameId'];
      }
      if (isset($vals['expiredTime'])) {
        $this->expiredTime = $vals['expiredTime'];
      }
      if (isset($vals['showStartTime'])) {
        $this->showStartTime = $vals['showStartTime'];
      }
      if (isset($vals['packageIcon'])) {
        $this->packageIcon = $vals['packageIcon'];
      }
    }
  }

  public function getName() {
    return 'Packages';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->packageId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->packageName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->packageDesc);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->packagePrice);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->startTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->endTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->gameCodeNum);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->leftNum);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->vip);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->consumepoint);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->gameCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->gameId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->expiredTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->showStartTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->packageIcon);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Packages');
    if ($this->packageId !== null) {
      $xfer += $output->writeFieldBegin('packageId', TType::I32, 1);
      $xfer += $output->writeI32($this->packageId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->packageName !== null) {
      $xfer += $output->writeFieldBegin('packageName', TType::STRING, 2);
      $xfer += $output->writeString($this->packageName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->packageDesc !== null) {
      $xfer += $output->writeFieldBegin('packageDesc', TType::STRING, 3);
      $xfer += $output->writeString($this->packageDesc);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->packagePrice !== null) {
      $xfer += $output->writeFieldBegin('packagePrice', TType::STRING, 4);
      $xfer += $output->writeString($this->packagePrice);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->startTime !== null) {
      $xfer += $output->writeFieldBegin('startTime', TType::I64, 5);
      $xfer += $output->writeI64($this->startTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->endTime !== null) {
      $xfer += $output->writeFieldBegin('endTime', TType::I64, 6);
      $xfer += $output->writeI64($this->endTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->gameCodeNum !== null) {
      $xfer += $output->writeFieldBegin('gameCodeNum', TType::I32, 7);
      $xfer += $output->writeI32($this->gameCodeNum);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->leftNum !== null) {
      $xfer += $output->writeFieldBegin('leftNum', TType::I32, 8);
      $xfer += $output->writeI32($this->leftNum);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->vip !== null) {
      $xfer += $output->writeFieldBegin('vip', TType::I32, 9);
      $xfer += $output->writeI32($this->vip);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->consumepoint !== null) {
      $xfer += $output->writeFieldBegin('consumepoint', TType::I32, 10);
      $xfer += $output->writeI32($this->consumepoint);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->status !== null) {
      $xfer += $output->writeFieldBegin('status', TType::I32, 11);
      $xfer += $output->writeI32($this->status);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->gameCode !== null) {
      $xfer += $output->writeFieldBegin('gameCode', TType::STRING, 12);
      $xfer += $output->writeString($this->gameCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->gameId !== null) {
      $xfer += $output->writeFieldBegin('gameId', TType::I32, 13);
      $xfer += $output->writeI32($this->gameId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->expiredTime !== null) {
      $xfer += $output->writeFieldBegin('expiredTime', TType::I64, 14);
      $xfer += $output->writeI64($this->expiredTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->showStartTime !== null) {
      $xfer += $output->writeFieldBegin('showStartTime', TType::I64, 15);
      $xfer += $output->writeI64($this->showStartTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->packageIcon !== null) {
      $xfer += $output->writeFieldBegin('packageIcon', TType::STRING, 16);
      $xfer += $output->writeString($this->packageIcon);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class PackageForGrab {
  static $_TSPEC;

  public $packageId = null;
  public $packageName = null;
  public $packageDesc = null;
  public $packagePrice = null;
  public $startTime = null;
  public $endTime = null;
  public $gameCodeNum = null;
  public $leftNum = null;
  public $vip = null;
  public $consumepoint = null;
  public $status = null;
  public $gameCode = null;
  public $gameId = null;
  public $expiredTime = null;
  public $showStartTime = null;
  public $showEndTime = null;
  public $packageIcon = null;
  public $endTimeForecastPoint = null;
  public $vipAccessLevel = null;
  public $lackOfStockThreshold = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'packageId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'packageName',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'packageDesc',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'packagePrice',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'startTime',
          'type' => TType::I64,
          ),
        6 => array(
          'var' => 'endTime',
          'type' => TType::I64,
          ),
        7 => array(
          'var' => 'gameCodeNum',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'leftNum',
          'type' => TType::I32,
          ),
        9 => array(
          'var' => 'vip',
          'type' => TType::I32,
          ),
        10 => array(
          'var' => 'consumepoint',
          'type' => TType::I32,
          ),
        11 => array(
          'var' => 'status',
          'type' => TType::I32,
          ),
        12 => array(
          'var' => 'gameCode',
          'type' => TType::STRING,
          ),
        13 => array(
          'var' => 'gameId',
          'type' => TType::I32,
          ),
        14 => array(
          'var' => 'expiredTime',
          'type' => TType::I64,
          ),
        15 => array(
          'var' => 'showStartTime',
          'type' => TType::I64,
          ),
        16 => array(
          'var' => 'showEndTime',
          'type' => TType::I64,
          ),
        17 => array(
          'var' => 'packageIcon',
          'type' => TType::STRING,
          ),
        19 => array(
          'var' => 'endTimeForecastPoint',
          'type' => TType::I64,
          ),
        20 => array(
          'var' => 'vipAccessLevel',
          'type' => TType::I32,
          ),
        21 => array(
          'var' => 'lackOfStockThreshold',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['packageId'])) {
        $this->packageId = $vals['packageId'];
      }
      if (isset($vals['packageName'])) {
        $this->packageName = $vals['packageName'];
      }
      if (isset($vals['packageDesc'])) {
        $this->packageDesc = $vals['packageDesc'];
      }
      if (isset($vals['packagePrice'])) {
        $this->packagePrice = $vals['packagePrice'];
      }
      if (isset($vals['startTime'])) {
        $this->startTime = $vals['startTime'];
      }
      if (isset($vals['endTime'])) {
        $this->endTime = $vals['endTime'];
      }
      if (isset($vals['gameCodeNum'])) {
        $this->gameCodeNum = $vals['gameCodeNum'];
      }
      if (isset($vals['leftNum'])) {
        $this->leftNum = $vals['leftNum'];
      }
      if (isset($vals['vip'])) {
        $this->vip = $vals['vip'];
      }
      if (isset($vals['consumepoint'])) {
        $this->consumepoint = $vals['consumepoint'];
      }
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
      if (isset($vals['gameCode'])) {
        $this->gameCode = $vals['gameCode'];
      }
      if (isset($vals['gameId'])) {
        $this->gameId = $vals['gameId'];
      }
      if (isset($vals['expiredTime'])) {
        $this->expiredTime = $vals['expiredTime'];
      }
      if (isset($vals['showStartTime'])) {
        $this->showStartTime = $vals['showStartTime'];
      }
      if (isset($vals['showEndTime'])) {
        $this->showEndTime = $vals['showEndTime'];
      }
      if (isset($vals['packageIcon'])) {
        $this->packageIcon = $vals['packageIcon'];
      }
      if (isset($vals['endTimeForecastPoint'])) {
        $this->endTimeForecastPoint = $vals['endTimeForecastPoint'];
      }
      if (isset($vals['vipAccessLevel'])) {
        $this->vipAccessLevel = $vals['vipAccessLevel'];
      }
      if (isset($vals['lackOfStockThreshold'])) {
        $this->lackOfStockThreshold = $vals['lackOfStockThreshold'];
      }
    }
  }

  public function getName() {
    return 'PackageForGrab';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->packageId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->packageName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->packageDesc);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->packagePrice);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->startTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->endTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->gameCodeNum);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->leftNum);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->vip);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->consumepoint);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->gameCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->gameId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->expiredTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->showStartTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->showEndTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->packageIcon);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 19:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->endTimeForecastPoint);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 20:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->vipAccessLevel);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 21:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->lackOfStockThreshold);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PackageForGrab');
    if ($this->packageId !== null) {
      $xfer += $output->writeFieldBegin('packageId', TType::I32, 1);
      $xfer += $output->writeI32($this->packageId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->packageName !== null) {
      $xfer += $output->writeFieldBegin('packageName', TType::STRING, 2);
      $xfer += $output->writeString($this->packageName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->packageDesc !== null) {
      $xfer += $output->writeFieldBegin('packageDesc', TType::STRING, 3);
      $xfer += $output->writeString($this->packageDesc);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->packagePrice !== null) {
      $xfer += $output->writeFieldBegin('packagePrice', TType::STRING, 4);
      $xfer += $output->writeString($this->packagePrice);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->startTime !== null) {
      $xfer += $output->writeFieldBegin('startTime', TType::I64, 5);
      $xfer += $output->writeI64($this->startTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->endTime !== null) {
      $xfer += $output->writeFieldBegin('endTime', TType::I64, 6);
      $xfer += $output->writeI64($this->endTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->gameCodeNum !== null) {
      $xfer += $output->writeFieldBegin('gameCodeNum', TType::I32, 7);
      $xfer += $output->writeI32($this->gameCodeNum);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->leftNum !== null) {
      $xfer += $output->writeFieldBegin('leftNum', TType::I32, 8);
      $xfer += $output->writeI32($this->leftNum);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->vip !== null) {
      $xfer += $output->writeFieldBegin('vip', TType::I32, 9);
      $xfer += $output->writeI32($this->vip);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->consumepoint !== null) {
      $xfer += $output->writeFieldBegin('consumepoint', TType::I32, 10);
      $xfer += $output->writeI32($this->consumepoint);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->status !== null) {
      $xfer += $output->writeFieldBegin('status', TType::I32, 11);
      $xfer += $output->writeI32($this->status);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->gameCode !== null) {
      $xfer += $output->writeFieldBegin('gameCode', TType::STRING, 12);
      $xfer += $output->writeString($this->gameCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->gameId !== null) {
      $xfer += $output->writeFieldBegin('gameId', TType::I32, 13);
      $xfer += $output->writeI32($this->gameId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->expiredTime !== null) {
      $xfer += $output->writeFieldBegin('expiredTime', TType::I64, 14);
      $xfer += $output->writeI64($this->expiredTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->showStartTime !== null) {
      $xfer += $output->writeFieldBegin('showStartTime', TType::I64, 15);
      $xfer += $output->writeI64($this->showStartTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->showEndTime !== null) {
      $xfer += $output->writeFieldBegin('showEndTime', TType::I64, 16);
      $xfer += $output->writeI64($this->showEndTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->packageIcon !== null) {
      $xfer += $output->writeFieldBegin('packageIcon', TType::STRING, 17);
      $xfer += $output->writeString($this->packageIcon);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->endTimeForecastPoint !== null) {
      $xfer += $output->writeFieldBegin('endTimeForecastPoint', TType::I64, 19);
      $xfer += $output->writeI64($this->endTimeForecastPoint);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->vipAccessLevel !== null) {
      $xfer += $output->writeFieldBegin('vipAccessLevel', TType::I32, 20);
      $xfer += $output->writeI32($this->vipAccessLevel);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lackOfStockThreshold !== null) {
      $xfer += $output->writeFieldBegin('lackOfStockThreshold', TType::I32, 21);
      $xfer += $output->writeI32($this->lackOfStockThreshold);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class PackageListResult {
  static $_TSPEC;

  public $packageList = null;
  public $error = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'packageList',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'PackageForGrab',
            ),
          ),
        2 => array(
          'var' => 'error',
          'type' => TType::STRUCT,
          'class' => 'ExceptionDes',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['packageList'])) {
        $this->packageList = $vals['packageList'];
      }
      if (isset($vals['error'])) {
        $this->error = $vals['error'];
      }
    }
  }

  public function getName() {
    return 'PackageListResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->packageList = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readListBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $elem5 = new PackageForGrab();
              $xfer += $elem5->read($input);
              $this->packageList []= $elem5;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->error = new ExceptionDes();
            $xfer += $this->error->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PackageListResult');
    if ($this->packageList !== null) {
      if (!is_array($this->packageList)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('packageList', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->packageList));
        {
          foreach ($this->packageList as $iter6)
          {
            $xfer += $iter6->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->error !== null) {
      if (!is_object($this->error)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('error', TType::STRUCT, 2);
      $xfer += $this->error->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CollectionInfo {
  static $_TSPEC;

  public $gameId = null;
  public $packageCount = null;
  public $collectionBackgroundPic = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'gameId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'packageCount',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'collectionBackgroundPic',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['gameId'])) {
        $this->gameId = $vals['gameId'];
      }
      if (isset($vals['packageCount'])) {
        $this->packageCount = $vals['packageCount'];
      }
      if (isset($vals['collectionBackgroundPic'])) {
        $this->collectionBackgroundPic = $vals['collectionBackgroundPic'];
      }
    }
  }

  public function getName() {
    return 'CollectionInfo';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->gameId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->packageCount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->collectionBackgroundPic);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CollectionInfo');
    if ($this->gameId !== null) {
      $xfer += $output->writeFieldBegin('gameId', TType::I32, 1);
      $xfer += $output->writeI32($this->gameId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->packageCount !== null) {
      $xfer += $output->writeFieldBegin('packageCount', TType::I32, 2);
      $xfer += $output->writeI32($this->packageCount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->collectionBackgroundPic !== null) {
      $xfer += $output->writeFieldBegin('collectionBackgroundPic', TType::STRING, 3);
      $xfer += $output->writeString($this->collectionBackgroundPic);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class PackageCollectionListView {
  static $_TSPEC;

  public $isCollection = null;
  public $packageForGrab = null;
  public $collectionInfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'isCollection',
          'type' => TType::BOOL,
          ),
        2 => array(
          'var' => 'packageForGrab',
          'type' => TType::STRUCT,
          'class' => 'PackageForGrab',
          ),
        3 => array(
          'var' => 'collectionInfo',
          'type' => TType::STRUCT,
          'class' => 'CollectionInfo',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['isCollection'])) {
        $this->isCollection = $vals['isCollection'];
      }
      if (isset($vals['packageForGrab'])) {
        $this->packageForGrab = $vals['packageForGrab'];
      }
      if (isset($vals['collectionInfo'])) {
        $this->collectionInfo = $vals['collectionInfo'];
      }
    }
  }

  public function getName() {
    return 'PackageCollectionListView';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->isCollection);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->packageForGrab = new PackageForGrab();
            $xfer += $this->packageForGrab->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->collectionInfo = new CollectionInfo();
            $xfer += $this->collectionInfo->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PackageCollectionListView');
    if ($this->isCollection !== null) {
      $xfer += $output->writeFieldBegin('isCollection', TType::BOOL, 1);
      $xfer += $output->writeBool($this->isCollection);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->packageForGrab !== null) {
      if (!is_object($this->packageForGrab)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('packageForGrab', TType::STRUCT, 2);
      $xfer += $this->packageForGrab->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->collectionInfo !== null) {
      if (!is_object($this->collectionInfo)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('collectionInfo', TType::STRUCT, 3);
      $xfer += $this->collectionInfo->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class PackageCollectionResult {
  static $_TSPEC;

  public $packageCollectionList = null;
  public $error = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'packageCollectionList',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'PackageCollectionListView',
            ),
          ),
        2 => array(
          'var' => 'error',
          'type' => TType::STRUCT,
          'class' => 'ExceptionDes',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['packageCollectionList'])) {
        $this->packageCollectionList = $vals['packageCollectionList'];
      }
      if (isset($vals['error'])) {
        $this->error = $vals['error'];
      }
    }
  }

  public function getName() {
    return 'PackageCollectionResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->packageCollectionList = array();
            $_size7 = 0;
            $_etype10 = 0;
            $xfer += $input->readListBegin($_etype10, $_size7);
            for ($_i11 = 0; $_i11 < $_size7; ++$_i11)
            {
              $elem12 = null;
              $elem12 = new PackageCollectionListView();
              $xfer += $elem12->read($input);
              $this->packageCollectionList []= $elem12;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->error = new ExceptionDes();
            $xfer += $this->error->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PackageCollectionResult');
    if ($this->packageCollectionList !== null) {
      if (!is_array($this->packageCollectionList)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('packageCollectionList', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->packageCollectionList));
        {
          foreach ($this->packageCollectionList as $iter13)
          {
            $xfer += $iter13->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->error !== null) {
      if (!is_object($this->error)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('error', TType::STRUCT, 2);
      $xfer += $this->error->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class PackageList {
  static $_TSPEC;

  public $pList = null;
  public $error = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'pList',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'Packages',
            ),
          ),
        2 => array(
          'var' => 'error',
          'type' => TType::STRUCT,
          'class' => 'ExceptionDes',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['pList'])) {
        $this->pList = $vals['pList'];
      }
      if (isset($vals['error'])) {
        $this->error = $vals['error'];
      }
    }
  }

  public function getName() {
    return 'PackageList';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->pList = array();
            $_size14 = 0;
            $_etype17 = 0;
            $xfer += $input->readListBegin($_etype17, $_size14);
            for ($_i18 = 0; $_i18 < $_size14; ++$_i18)
            {
              $elem19 = null;
              $elem19 = new Packages();
              $xfer += $elem19->read($input);
              $this->pList []= $elem19;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->error = new ExceptionDes();
            $xfer += $this->error->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PackageList');
    if ($this->pList !== null) {
      if (!is_array($this->pList)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('pList', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->pList));
        {
          foreach ($this->pList as $iter20)
          {
            $xfer += $iter20->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->error !== null) {
      if (!is_object($this->error)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('error', TType::STRUCT, 2);
      $xfer += $this->error->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class HasPackage {
  static $_TSPEC;

  public $hasPackage = null;
  public $gameId = null;
  public $packageId = null;
  public $packageName = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'hasPackage',
          'type' => TType::BOOL,
          ),
        2 => array(
          'var' => 'gameId',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'packageId',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'packageName',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['hasPackage'])) {
        $this->hasPackage = $vals['hasPackage'];
      }
      if (isset($vals['gameId'])) {
        $this->gameId = $vals['gameId'];
      }
      if (isset($vals['packageId'])) {
        $this->packageId = $vals['packageId'];
      }
      if (isset($vals['packageName'])) {
        $this->packageName = $vals['packageName'];
      }
    }
  }

  public function getName() {
    return 'HasPackage';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->hasPackage);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->gameId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->packageId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->packageName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('HasPackage');
    if ($this->hasPackage !== null) {
      $xfer += $output->writeFieldBegin('hasPackage', TType::BOOL, 1);
      $xfer += $output->writeBool($this->hasPackage);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->gameId !== null) {
      $xfer += $output->writeFieldBegin('gameId', TType::I32, 2);
      $xfer += $output->writeI32($this->gameId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->packageId !== null) {
      $xfer += $output->writeFieldBegin('packageId', TType::I32, 3);
      $xfer += $output->writeI32($this->packageId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->packageName !== null) {
      $xfer += $output->writeFieldBegin('packageName', TType::STRING, 4);
      $xfer += $output->writeString($this->packageName);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class HasPackageList {
  static $_TSPEC;

  public $hList = null;
  public $error = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'hList',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'HasPackage',
            ),
          ),
        2 => array(
          'var' => 'error',
          'type' => TType::STRUCT,
          'class' => 'ExceptionDes',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['hList'])) {
        $this->hList = $vals['hList'];
      }
      if (isset($vals['error'])) {
        $this->error = $vals['error'];
      }
    }
  }

  public function getName() {
    return 'HasPackageList';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->hList = array();
            $_size21 = 0;
            $_etype24 = 0;
            $xfer += $input->readListBegin($_etype24, $_size21);
            for ($_i25 = 0; $_i25 < $_size21; ++$_i25)
            {
              $elem26 = null;
              $elem26 = new HasPackage();
              $xfer += $elem26->read($input);
              $this->hList []= $elem26;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->error = new ExceptionDes();
            $xfer += $this->error->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('HasPackageList');
    if ($this->hList !== null) {
      if (!is_array($this->hList)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('hList', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->hList));
        {
          foreach ($this->hList as $iter27)
          {
            $xfer += $iter27->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->error !== null) {
      if (!is_object($this->error)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('error', TType::STRUCT, 2);
      $xfer += $this->error->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class UserPackage {
  static $_TSPEC;

  public $uPackage = null;
  public $error = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'uPackage',
          'type' => TType::STRUCT,
          'class' => 'Packages',
          ),
        2 => array(
          'var' => 'error',
          'type' => TType::STRUCT,
          'class' => 'ExceptionDes',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['uPackage'])) {
        $this->uPackage = $vals['uPackage'];
      }
      if (isset($vals['error'])) {
        $this->error = $vals['error'];
      }
    }
  }

  public function getName() {
    return 'UserPackage';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->uPackage = new Packages();
            $xfer += $this->uPackage->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->error = new ExceptionDes();
            $xfer += $this->error->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('UserPackage');
    if ($this->uPackage !== null) {
      if (!is_object($this->uPackage)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('uPackage', TType::STRUCT, 1);
      $xfer += $this->uPackage->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->error !== null) {
      if (!is_object($this->error)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('error', TType::STRUCT, 2);
      $xfer += $this->error->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class PackageResult {
  static $_TSPEC;

  public $packageId = null;
  public $error = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'packageId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'error',
          'type' => TType::STRUCT,
          'class' => 'ExceptionDes',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['packageId'])) {
        $this->packageId = $vals['packageId'];
      }
      if (isset($vals['error'])) {
        $this->error = $vals['error'];
      }
    }
  }

  public function getName() {
    return 'PackageResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->packageId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->error = new ExceptionDes();
            $xfer += $this->error->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PackageResult');
    if ($this->packageId !== null) {
      $xfer += $output->writeFieldBegin('packageId', TType::I32, 1);
      $xfer += $output->writeI32($this->packageId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->error !== null) {
      if (!is_object($this->error)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('error', TType::STRUCT, 2);
      $xfer += $this->error->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class PackageInfoRequest {
  static $_TSPEC;

  public $packageName = null;
  public $packageDesc = null;
  public $packagePrice = null;
  public $startTime = null;
  public $endTime = null;
  public $showStartTime = null;
  public $showEndTime = null;
  public $gameId = null;
  public $type = null;
  public $expiredTime = null;
  public $packageIcon = null;
  public $packagesUnionBackgroudPic = null;
  public $showStartPeriod = null;
  public $showEndPeriod = null;
  public $vipAccessLevel = null;
  public $lackOfStockThreshold = null;
  public $channelCode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'packageName',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'packageDesc',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'packagePrice',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'startTime',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'endTime',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'showStartTime',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'showEndTime',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'gameId',
          'type' => TType::I32,
          ),
        9 => array(
          'var' => 'type',
          'type' => TType::I32,
          ),
        10 => array(
          'var' => 'expiredTime',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'packageIcon',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'packagesUnionBackgroudPic',
          'type' => TType::STRING,
          ),
        13 => array(
          'var' => 'showStartPeriod',
          'type' => TType::I64,
          ),
        14 => array(
          'var' => 'showEndPeriod',
          'type' => TType::I64,
          ),
        15 => array(
          'var' => 'vipAccessLevel',
          'type' => TType::I32,
          ),
        16 => array(
          'var' => 'lackOfStockThreshold',
          'type' => TType::I32,
          ),
        17 => array(
          'var' => 'channelCode',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['packageName'])) {
        $this->packageName = $vals['packageName'];
      }
      if (isset($vals['packageDesc'])) {
        $this->packageDesc = $vals['packageDesc'];
      }
      if (isset($vals['packagePrice'])) {
        $this->packagePrice = $vals['packagePrice'];
      }
      if (isset($vals['startTime'])) {
        $this->startTime = $vals['startTime'];
      }
      if (isset($vals['endTime'])) {
        $this->endTime = $vals['endTime'];
      }
      if (isset($vals['showStartTime'])) {
        $this->showStartTime = $vals['showStartTime'];
      }
      if (isset($vals['showEndTime'])) {
        $this->showEndTime = $vals['showEndTime'];
      }
      if (isset($vals['gameId'])) {
        $this->gameId = $vals['gameId'];
      }
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['expiredTime'])) {
        $this->expiredTime = $vals['expiredTime'];
      }
      if (isset($vals['packageIcon'])) {
        $this->packageIcon = $vals['packageIcon'];
      }
      if (isset($vals['packagesUnionBackgroudPic'])) {
        $this->packagesUnionBackgroudPic = $vals['packagesUnionBackgroudPic'];
      }
      if (isset($vals['showStartPeriod'])) {
        $this->showStartPeriod = $vals['showStartPeriod'];
      }
      if (isset($vals['showEndPeriod'])) {
        $this->showEndPeriod = $vals['showEndPeriod'];
      }
      if (isset($vals['vipAccessLevel'])) {
        $this->vipAccessLevel = $vals['vipAccessLevel'];
      }
      if (isset($vals['lackOfStockThreshold'])) {
        $this->lackOfStockThreshold = $vals['lackOfStockThreshold'];
      }
      if (isset($vals['channelCode'])) {
        $this->channelCode = $vals['channelCode'];
      }
    }
  }

  public function getName() {
    return 'PackageInfoRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->packageName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->packageDesc);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->packagePrice);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->startTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->endTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->showStartTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->showEndTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->gameId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->expiredTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->packageIcon);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->packagesUnionBackgroudPic);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->showStartPeriod);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->showEndPeriod);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->vipAccessLevel);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->lackOfStockThreshold);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->channelCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PackageInfoRequest');
    if ($this->packageName !== null) {
      $xfer += $output->writeFieldBegin('packageName', TType::STRING, 1);
      $xfer += $output->writeString($this->packageName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->packageDesc !== null) {
      $xfer += $output->writeFieldBegin('packageDesc', TType::STRING, 2);
      $xfer += $output->writeString($this->packageDesc);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->packagePrice !== null) {
      $xfer += $output->writeFieldBegin('packagePrice', TType::STRING, 3);
      $xfer += $output->writeString($this->packagePrice);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->startTime !== null) {
      $xfer += $output->writeFieldBegin('startTime', TType::STRING, 4);
      $xfer += $output->writeString($this->startTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->endTime !== null) {
      $xfer += $output->writeFieldBegin('endTime', TType::STRING, 5);
      $xfer += $output->writeString($this->endTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->showStartTime !== null) {
      $xfer += $output->writeFieldBegin('showStartTime', TType::STRING, 6);
      $xfer += $output->writeString($this->showStartTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->showEndTime !== null) {
      $xfer += $output->writeFieldBegin('showEndTime', TType::STRING, 7);
      $xfer += $output->writeString($this->showEndTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->gameId !== null) {
      $xfer += $output->writeFieldBegin('gameId', TType::I32, 8);
      $xfer += $output->writeI32($this->gameId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::I32, 9);
      $xfer += $output->writeI32($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->expiredTime !== null) {
      $xfer += $output->writeFieldBegin('expiredTime', TType::STRING, 10);
      $xfer += $output->writeString($this->expiredTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->packageIcon !== null) {
      $xfer += $output->writeFieldBegin('packageIcon', TType::STRING, 11);
      $xfer += $output->writeString($this->packageIcon);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->packagesUnionBackgroudPic !== null) {
      $xfer += $output->writeFieldBegin('packagesUnionBackgroudPic', TType::STRING, 12);
      $xfer += $output->writeString($this->packagesUnionBackgroudPic);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->showStartPeriod !== null) {
      $xfer += $output->writeFieldBegin('showStartPeriod', TType::I64, 13);
      $xfer += $output->writeI64($this->showStartPeriod);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->showEndPeriod !== null) {
      $xfer += $output->writeFieldBegin('showEndPeriod', TType::I64, 14);
      $xfer += $output->writeI64($this->showEndPeriod);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->vipAccessLevel !== null) {
      $xfer += $output->writeFieldBegin('vipAccessLevel', TType::I32, 15);
      $xfer += $output->writeI32($this->vipAccessLevel);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lackOfStockThreshold !== null) {
      $xfer += $output->writeFieldBegin('lackOfStockThreshold', TType::I32, 16);
      $xfer += $output->writeI32($this->lackOfStockThreshold);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->channelCode !== null) {
      $xfer += $output->writeFieldBegin('channelCode', TType::I32, 17);
      $xfer += $output->writeI32($this->channelCode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class PackageCondRequest {
  static $_TSPEC;

  public $packageId = null;
  public $vip = null;
  public $consumepoint = null;
  public $rate = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'packageId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'vip',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'consumepoint',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'rate',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['packageId'])) {
        $this->packageId = $vals['packageId'];
      }
      if (isset($vals['vip'])) {
        $this->vip = $vals['vip'];
      }
      if (isset($vals['consumepoint'])) {
        $this->consumepoint = $vals['consumepoint'];
      }
      if (isset($vals['rate'])) {
        $this->rate = $vals['rate'];
      }
    }
  }

  public function getName() {
    return 'PackageCondRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->packageId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->vip);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->consumepoint);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->rate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PackageCondRequest');
    if ($this->packageId !== null) {
      $xfer += $output->writeFieldBegin('packageId', TType::I32, 1);
      $xfer += $output->writeI32($this->packageId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->vip !== null) {
      $xfer += $output->writeFieldBegin('vip', TType::I32, 2);
      $xfer += $output->writeI32($this->vip);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->consumepoint !== null) {
      $xfer += $output->writeFieldBegin('consumepoint', TType::I32, 3);
      $xfer += $output->writeI32($this->consumepoint);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->rate !== null) {
      $xfer += $output->writeFieldBegin('rate', TType::I32, 4);
      $xfer += $output->writeI32($this->rate);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class PackageDetailRequest {
  static $_TSPEC;

  public $packageId = null;
  public $gamecode = null;
  public $isFinish = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'packageId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'gamecode',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        3 => array(
          'var' => 'isFinish',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['packageId'])) {
        $this->packageId = $vals['packageId'];
      }
      if (isset($vals['gamecode'])) {
        $this->gamecode = $vals['gamecode'];
      }
      if (isset($vals['isFinish'])) {
        $this->isFinish = $vals['isFinish'];
      }
    }
  }

  public function getName() {
    return 'PackageDetailRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->packageId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->gamecode = array();
            $_size28 = 0;
            $_etype31 = 0;
            $xfer += $input->readListBegin($_etype31, $_size28);
            for ($_i32 = 0; $_i32 < $_size28; ++$_i32)
            {
              $elem33 = null;
              $xfer += $input->readString($elem33);
              $this->gamecode []= $elem33;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->isFinish);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PackageDetailRequest');
    if ($this->packageId !== null) {
      $xfer += $output->writeFieldBegin('packageId', TType::I32, 1);
      $xfer += $output->writeI32($this->packageId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->gamecode !== null) {
      if (!is_array($this->gamecode)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('gamecode', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRING, count($this->gamecode));
        {
          foreach ($this->gamecode as $iter34)
          {
            $xfer += $output->writeString($iter34);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->isFinish !== null) {
      $xfer += $output->writeFieldBegin('isFinish', TType::BOOL, 3);
      $xfer += $output->writeBool($this->isFinish);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CommonResult {
  static $_TSPEC;

  public $isSuccess = null;
  public $error = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'isSuccess',
          'type' => TType::BOOL,
          ),
        2 => array(
          'var' => 'error',
          'type' => TType::STRUCT,
          'class' => 'ExceptionDes',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['isSuccess'])) {
        $this->isSuccess = $vals['isSuccess'];
      }
      if (isset($vals['error'])) {
        $this->error = $vals['error'];
      }
    }
  }

  public function getName() {
    return 'CommonResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->isSuccess);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->error = new ExceptionDes();
            $xfer += $this->error->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CommonResult');
    if ($this->isSuccess !== null) {
      $xfer += $output->writeFieldBegin('isSuccess', TType::BOOL, 1);
      $xfer += $output->writeBool($this->isSuccess);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->error !== null) {
      if (!is_object($this->error)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('error', TType::STRUCT, 2);
      $xfer += $this->error->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class PackageStatusInfo {
  static $_TSPEC;

  public $packageStatus = null;
  public $error = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'packageStatus',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'error',
          'type' => TType::STRUCT,
          'class' => 'ExceptionDes',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['packageStatus'])) {
        $this->packageStatus = $vals['packageStatus'];
      }
      if (isset($vals['error'])) {
        $this->error = $vals['error'];
      }
    }
  }

  public function getName() {
    return 'PackageStatusInfo';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->packageStatus);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->error = new ExceptionDes();
            $xfer += $this->error->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PackageStatusInfo');
    if ($this->packageStatus !== null) {
      $xfer += $output->writeFieldBegin('packageStatus', TType::I32, 1);
      $xfer += $output->writeI32($this->packageStatus);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->error !== null) {
      if (!is_object($this->error)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('error', TType::STRUCT, 2);
      $xfer += $this->error->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class UpdatePackageInfoRequest {
  static $_TSPEC;

  public $packageId = null;
  public $packageName = null;
  public $packageDesc = null;
  public $packagePrice = null;
  public $startTime = null;
  public $endTime = null;
  public $showStartTime = null;
  public $showEndTime = null;
  public $packageIcon = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'packageId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'packageName',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'packageDesc',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'packagePrice',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'startTime',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'endTime',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'showStartTime',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'showEndTime',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'packageIcon',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['packageId'])) {
        $this->packageId = $vals['packageId'];
      }
      if (isset($vals['packageName'])) {
        $this->packageName = $vals['packageName'];
      }
      if (isset($vals['packageDesc'])) {
        $this->packageDesc = $vals['packageDesc'];
      }
      if (isset($vals['packagePrice'])) {
        $this->packagePrice = $vals['packagePrice'];
      }
      if (isset($vals['startTime'])) {
        $this->startTime = $vals['startTime'];
      }
      if (isset($vals['endTime'])) {
        $this->endTime = $vals['endTime'];
      }
      if (isset($vals['showStartTime'])) {
        $this->showStartTime = $vals['showStartTime'];
      }
      if (isset($vals['showEndTime'])) {
        $this->showEndTime = $vals['showEndTime'];
      }
      if (isset($vals['packageIcon'])) {
        $this->packageIcon = $vals['packageIcon'];
      }
    }
  }

  public function getName() {
    return 'UpdatePackageInfoRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->packageId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->packageName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->packageDesc);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->packagePrice);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->startTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->endTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->showStartTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->showEndTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->packageIcon);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('UpdatePackageInfoRequest');
    if ($this->packageId !== null) {
      $xfer += $output->writeFieldBegin('packageId', TType::I32, 1);
      $xfer += $output->writeI32($this->packageId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->packageName !== null) {
      $xfer += $output->writeFieldBegin('packageName', TType::STRING, 2);
      $xfer += $output->writeString($this->packageName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->packageDesc !== null) {
      $xfer += $output->writeFieldBegin('packageDesc', TType::STRING, 3);
      $xfer += $output->writeString($this->packageDesc);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->packagePrice !== null) {
      $xfer += $output->writeFieldBegin('packagePrice', TType::STRING, 4);
      $xfer += $output->writeString($this->packagePrice);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->startTime !== null) {
      $xfer += $output->writeFieldBegin('startTime', TType::STRING, 5);
      $xfer += $output->writeString($this->startTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->endTime !== null) {
      $xfer += $output->writeFieldBegin('endTime', TType::STRING, 6);
      $xfer += $output->writeString($this->endTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->showStartTime !== null) {
      $xfer += $output->writeFieldBegin('showStartTime', TType::STRING, 7);
      $xfer += $output->writeString($this->showStartTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->showEndTime !== null) {
      $xfer += $output->writeFieldBegin('showEndTime', TType::STRING, 8);
      $xfer += $output->writeString($this->showEndTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->packageIcon !== null) {
      $xfer += $output->writeFieldBegin('packageIcon', TType::STRING, 9);
      $xfer += $output->writeString($this->packageIcon);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class UpdatePackageCondRequest {
  static $_TSPEC;

  public $packageId = null;
  public $vip = null;
  public $consumepoint = null;
  public $rate = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'packageId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'vip',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'consumepoint',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'rate',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['packageId'])) {
        $this->packageId = $vals['packageId'];
      }
      if (isset($vals['vip'])) {
        $this->vip = $vals['vip'];
      }
      if (isset($vals['consumepoint'])) {
        $this->consumepoint = $vals['consumepoint'];
      }
      if (isset($vals['rate'])) {
        $this->rate = $vals['rate'];
      }
    }
  }

  public function getName() {
    return 'UpdatePackageCondRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->packageId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->vip);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->consumepoint);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->rate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('UpdatePackageCondRequest');
    if ($this->packageId !== null) {
      $xfer += $output->writeFieldBegin('packageId', TType::I32, 1);
      $xfer += $output->writeI32($this->packageId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->vip !== null) {
      $xfer += $output->writeFieldBegin('vip', TType::I32, 2);
      $xfer += $output->writeI32($this->vip);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->consumepoint !== null) {
      $xfer += $output->writeFieldBegin('consumepoint', TType::I32, 3);
      $xfer += $output->writeI32($this->consumepoint);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->rate !== null) {
      $xfer += $output->writeFieldBegin('rate', TType::I32, 4);
      $xfer += $output->writeI32($this->rate);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GrabNoResult {
  static $_TSPEC;

  public $packageId = null;
  public $gameCode = null;
  public $resCode = null;
  public $error = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'packageId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'gameCode',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'resCode',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'error',
          'type' => TType::STRUCT,
          'class' => 'ExceptionDes',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['packageId'])) {
        $this->packageId = $vals['packageId'];
      }
      if (isset($vals['gameCode'])) {
        $this->gameCode = $vals['gameCode'];
      }
      if (isset($vals['resCode'])) {
        $this->resCode = $vals['resCode'];
      }
      if (isset($vals['error'])) {
        $this->error = $vals['error'];
      }
    }
  }

  public function getName() {
    return 'GrabNoResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->packageId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->gameCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->resCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->error = new ExceptionDes();
            $xfer += $this->error->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GrabNoResult');
    if ($this->packageId !== null) {
      $xfer += $output->writeFieldBegin('packageId', TType::I32, 1);
      $xfer += $output->writeI32($this->packageId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->gameCode !== null) {
      $xfer += $output->writeFieldBegin('gameCode', TType::STRING, 2);
      $xfer += $output->writeString($this->gameCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->resCode !== null) {
      $xfer += $output->writeFieldBegin('resCode', TType::I32, 3);
      $xfer += $output->writeI32($this->resCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->error !== null) {
      if (!is_object($this->error)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('error', TType::STRUCT, 4);
      $xfer += $this->error->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BuyNoResult {
  static $_TSPEC;

  public $packageId = null;
  public $gameCode = null;
  public $gameId = null;
  public $resCode = null;
  public $packageName = null;
  public $packageDesc = null;
  public $packagePrice = null;
  public $startTime = null;
  public $endTime = null;
  public $expiredTime = null;
  public $packageIcon = null;
  public $error = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'packageId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'gameCode',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'gameId',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'resCode',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'packageName',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'packageDesc',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'packagePrice',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'startTime',
          'type' => TType::I64,
          ),
        9 => array(
          'var' => 'endTime',
          'type' => TType::I64,
          ),
        10 => array(
          'var' => 'expiredTime',
          'type' => TType::I64,
          ),
        11 => array(
          'var' => 'packageIcon',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'error',
          'type' => TType::STRUCT,
          'class' => 'ExceptionDes',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['packageId'])) {
        $this->packageId = $vals['packageId'];
      }
      if (isset($vals['gameCode'])) {
        $this->gameCode = $vals['gameCode'];
      }
      if (isset($vals['gameId'])) {
        $this->gameId = $vals['gameId'];
      }
      if (isset($vals['resCode'])) {
        $this->resCode = $vals['resCode'];
      }
      if (isset($vals['packageName'])) {
        $this->packageName = $vals['packageName'];
      }
      if (isset($vals['packageDesc'])) {
        $this->packageDesc = $vals['packageDesc'];
      }
      if (isset($vals['packagePrice'])) {
        $this->packagePrice = $vals['packagePrice'];
      }
      if (isset($vals['startTime'])) {
        $this->startTime = $vals['startTime'];
      }
      if (isset($vals['endTime'])) {
        $this->endTime = $vals['endTime'];
      }
      if (isset($vals['expiredTime'])) {
        $this->expiredTime = $vals['expiredTime'];
      }
      if (isset($vals['packageIcon'])) {
        $this->packageIcon = $vals['packageIcon'];
      }
      if (isset($vals['error'])) {
        $this->error = $vals['error'];
      }
    }
  }

  public function getName() {
    return 'BuyNoResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->packageId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->gameCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->gameId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->resCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->packageName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->packageDesc);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->packagePrice);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->startTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->endTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->expiredTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->packageIcon);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRUCT) {
            $this->error = new ExceptionDes();
            $xfer += $this->error->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BuyNoResult');
    if ($this->packageId !== null) {
      $xfer += $output->writeFieldBegin('packageId', TType::I32, 1);
      $xfer += $output->writeI32($this->packageId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->gameCode !== null) {
      $xfer += $output->writeFieldBegin('gameCode', TType::STRING, 2);
      $xfer += $output->writeString($this->gameCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->gameId !== null) {
      $xfer += $output->writeFieldBegin('gameId', TType::I32, 3);
      $xfer += $output->writeI32($this->gameId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->resCode !== null) {
      $xfer += $output->writeFieldBegin('resCode', TType::I32, 4);
      $xfer += $output->writeI32($this->resCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->packageName !== null) {
      $xfer += $output->writeFieldBegin('packageName', TType::STRING, 5);
      $xfer += $output->writeString($this->packageName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->packageDesc !== null) {
      $xfer += $output->writeFieldBegin('packageDesc', TType::STRING, 6);
      $xfer += $output->writeString($this->packageDesc);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->packagePrice !== null) {
      $xfer += $output->writeFieldBegin('packagePrice', TType::STRING, 7);
      $xfer += $output->writeString($this->packagePrice);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->startTime !== null) {
      $xfer += $output->writeFieldBegin('startTime', TType::I64, 8);
      $xfer += $output->writeI64($this->startTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->endTime !== null) {
      $xfer += $output->writeFieldBegin('endTime', TType::I64, 9);
      $xfer += $output->writeI64($this->endTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->expiredTime !== null) {
      $xfer += $output->writeFieldBegin('expiredTime', TType::I64, 10);
      $xfer += $output->writeI64($this->expiredTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->packageIcon !== null) {
      $xfer += $output->writeFieldBegin('packageIcon', TType::STRING, 11);
      $xfer += $output->writeString($this->packageIcon);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->error !== null) {
      if (!is_object($this->error)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('error', TType::STRUCT, 12);
      $xfer += $this->error->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class NewPackageResult {
  static $_TSPEC;

  public $hasNew = null;
  public $packageId = null;
  public $packageName = null;
  public $error = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'hasNew',
          'type' => TType::BOOL,
          ),
        2 => array(
          'var' => 'packageId',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'packageName',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'error',
          'type' => TType::STRUCT,
          'class' => 'ExceptionDes',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['hasNew'])) {
        $this->hasNew = $vals['hasNew'];
      }
      if (isset($vals['packageId'])) {
        $this->packageId = $vals['packageId'];
      }
      if (isset($vals['packageName'])) {
        $this->packageName = $vals['packageName'];
      }
      if (isset($vals['error'])) {
        $this->error = $vals['error'];
      }
    }
  }

  public function getName() {
    return 'NewPackageResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->hasNew);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->packageId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->packageName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->error = new ExceptionDes();
            $xfer += $this->error->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('NewPackageResult');
    if ($this->hasNew !== null) {
      $xfer += $output->writeFieldBegin('hasNew', TType::BOOL, 1);
      $xfer += $output->writeBool($this->hasNew);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->packageId !== null) {
      $xfer += $output->writeFieldBegin('packageId', TType::I32, 2);
      $xfer += $output->writeI32($this->packageId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->packageName !== null) {
      $xfer += $output->writeFieldBegin('packageName', TType::STRING, 3);
      $xfer += $output->writeString($this->packageName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->error !== null) {
      if (!is_object($this->error)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('error', TType::STRUCT, 4);
      $xfer += $this->error->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class PackageView {
  static $_TSPEC;

  public $packageId = null;
  public $packageName = null;
  public $packageDesc = null;
  public $packagePrice = null;
  public $startTime = null;
  public $endTime = null;
  public $showStartTime = null;
  public $showEndTime = null;
  public $gameCodeNum = null;
  public $leftNum = null;
  public $vip = null;
  public $consumepoint = null;
  public $gameId = null;
  public $expiredTime = null;
  public $rate = null;
  public $packageIcon = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'packageId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'packageName',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'packageDesc',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'packagePrice',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'startTime',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'endTime',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'showStartTime',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'showEndTime',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'gameCodeNum',
          'type' => TType::I32,
          ),
        10 => array(
          'var' => 'leftNum',
          'type' => TType::I32,
          ),
        11 => array(
          'var' => 'vip',
          'type' => TType::I32,
          ),
        12 => array(
          'var' => 'consumepoint',
          'type' => TType::I32,
          ),
        13 => array(
          'var' => 'gameId',
          'type' => TType::I32,
          ),
        14 => array(
          'var' => 'expiredTime',
          'type' => TType::STRING,
          ),
        15 => array(
          'var' => 'rate',
          'type' => TType::I32,
          ),
        16 => array(
          'var' => 'packageIcon',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['packageId'])) {
        $this->packageId = $vals['packageId'];
      }
      if (isset($vals['packageName'])) {
        $this->packageName = $vals['packageName'];
      }
      if (isset($vals['packageDesc'])) {
        $this->packageDesc = $vals['packageDesc'];
      }
      if (isset($vals['packagePrice'])) {
        $this->packagePrice = $vals['packagePrice'];
      }
      if (isset($vals['startTime'])) {
        $this->startTime = $vals['startTime'];
      }
      if (isset($vals['endTime'])) {
        $this->endTime = $vals['endTime'];
      }
      if (isset($vals['showStartTime'])) {
        $this->showStartTime = $vals['showStartTime'];
      }
      if (isset($vals['showEndTime'])) {
        $this->showEndTime = $vals['showEndTime'];
      }
      if (isset($vals['gameCodeNum'])) {
        $this->gameCodeNum = $vals['gameCodeNum'];
      }
      if (isset($vals['leftNum'])) {
        $this->leftNum = $vals['leftNum'];
      }
      if (isset($vals['vip'])) {
        $this->vip = $vals['vip'];
      }
      if (isset($vals['consumepoint'])) {
        $this->consumepoint = $vals['consumepoint'];
      }
      if (isset($vals['gameId'])) {
        $this->gameId = $vals['gameId'];
      }
      if (isset($vals['expiredTime'])) {
        $this->expiredTime = $vals['expiredTime'];
      }
      if (isset($vals['rate'])) {
        $this->rate = $vals['rate'];
      }
      if (isset($vals['packageIcon'])) {
        $this->packageIcon = $vals['packageIcon'];
      }
    }
  }

  public function getName() {
    return 'PackageView';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->packageId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->packageName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->packageDesc);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->packagePrice);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->startTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->endTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->showStartTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->showEndTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->gameCodeNum);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->leftNum);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->vip);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->consumepoint);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->gameId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->expiredTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->rate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->packageIcon);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PackageView');
    if ($this->packageId !== null) {
      $xfer += $output->writeFieldBegin('packageId', TType::I32, 1);
      $xfer += $output->writeI32($this->packageId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->packageName !== null) {
      $xfer += $output->writeFieldBegin('packageName', TType::STRING, 2);
      $xfer += $output->writeString($this->packageName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->packageDesc !== null) {
      $xfer += $output->writeFieldBegin('packageDesc', TType::STRING, 3);
      $xfer += $output->writeString($this->packageDesc);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->packagePrice !== null) {
      $xfer += $output->writeFieldBegin('packagePrice', TType::STRING, 4);
      $xfer += $output->writeString($this->packagePrice);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->startTime !== null) {
      $xfer += $output->writeFieldBegin('startTime', TType::STRING, 5);
      $xfer += $output->writeString($this->startTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->endTime !== null) {
      $xfer += $output->writeFieldBegin('endTime', TType::STRING, 6);
      $xfer += $output->writeString($this->endTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->showStartTime !== null) {
      $xfer += $output->writeFieldBegin('showStartTime', TType::STRING, 7);
      $xfer += $output->writeString($this->showStartTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->showEndTime !== null) {
      $xfer += $output->writeFieldBegin('showEndTime', TType::STRING, 8);
      $xfer += $output->writeString($this->showEndTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->gameCodeNum !== null) {
      $xfer += $output->writeFieldBegin('gameCodeNum', TType::I32, 9);
      $xfer += $output->writeI32($this->gameCodeNum);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->leftNum !== null) {
      $xfer += $output->writeFieldBegin('leftNum', TType::I32, 10);
      $xfer += $output->writeI32($this->leftNum);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->vip !== null) {
      $xfer += $output->writeFieldBegin('vip', TType::I32, 11);
      $xfer += $output->writeI32($this->vip);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->consumepoint !== null) {
      $xfer += $output->writeFieldBegin('consumepoint', TType::I32, 12);
      $xfer += $output->writeI32($this->consumepoint);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->gameId !== null) {
      $xfer += $output->writeFieldBegin('gameId', TType::I32, 13);
      $xfer += $output->writeI32($this->gameId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->expiredTime !== null) {
      $xfer += $output->writeFieldBegin('expiredTime', TType::STRING, 14);
      $xfer += $output->writeString($this->expiredTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->rate !== null) {
      $xfer += $output->writeFieldBegin('rate', TType::I32, 15);
      $xfer += $output->writeI32($this->rate);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->packageIcon !== null) {
      $xfer += $output->writeFieldBegin('packageIcon', TType::STRING, 16);
      $xfer += $output->writeString($this->packageIcon);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CommonPackageView {
  static $_TSPEC;

  public $packageView = null;
  public $error = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'packageView',
          'type' => TType::STRUCT,
          'class' => 'PackageView',
          ),
        2 => array(
          'var' => 'error',
          'type' => TType::STRUCT,
          'class' => 'ExceptionDes',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['packageView'])) {
        $this->packageView = $vals['packageView'];
      }
      if (isset($vals['error'])) {
        $this->error = $vals['error'];
      }
    }
  }

  public function getName() {
    return 'CommonPackageView';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->packageView = new PackageView();
            $xfer += $this->packageView->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->error = new ExceptionDes();
            $xfer += $this->error->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CommonPackageView');
    if ($this->packageView !== null) {
      if (!is_object($this->packageView)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('packageView', TType::STRUCT, 1);
      $xfer += $this->packageView->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->error !== null) {
      if (!is_object($this->error)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('error', TType::STRUCT, 2);
      $xfer += $this->error->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class PackageCountResult {
  static $_TSPEC;

  public $packageValidationStatus = null;
  public $packageCount = null;
  public $error = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'packageValidationStatus',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'packageCount',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'error',
          'type' => TType::STRUCT,
          'class' => 'ExceptionDes',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['packageValidationStatus'])) {
        $this->packageValidationStatus = $vals['packageValidationStatus'];
      }
      if (isset($vals['packageCount'])) {
        $this->packageCount = $vals['packageCount'];
      }
      if (isset($vals['error'])) {
        $this->error = $vals['error'];
      }
    }
  }

  public function getName() {
    return 'PackageCountResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->packageValidationStatus);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->packageCount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->error = new ExceptionDes();
            $xfer += $this->error->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PackageCountResult');
    if ($this->packageValidationStatus !== null) {
      $xfer += $output->writeFieldBegin('packageValidationStatus', TType::I32, 1);
      $xfer += $output->writeI32($this->packageValidationStatus);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->packageCount !== null) {
      $xfer += $output->writeFieldBegin('packageCount', TType::I32, 2);
      $xfer += $output->writeI32($this->packageCount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->error !== null) {
      if (!is_object($this->error)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('error', TType::STRUCT, 3);
      $xfer += $this->error->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class PackageSimpleViews {
  static $_TSPEC;

  public $packageId = null;
  public $packageName = null;
  public $gameCodeNum = null;
  public $leftNum = null;
  public $gameId = null;
  public $rate = null;
  public $status = null;
  public $expiredTime = null;
  public $packageIcon = null;
  public $startTime = null;
  public $endTime = null;
  public $showStartTime = null;
  public $showEndTime = null;
  public $packagesUnionBackgroudPic = null;
  public $showStartPeriod = null;
  public $showEndPeriod = null;
  public $vipAccessLevel = null;
  public $lackOfStockThreshold = null;
  public $channelCode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'packageId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'packageName',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'gameCodeNum',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'leftNum',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'gameId',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'rate',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'status',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'expiredTime',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'packageIcon',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'startTime',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'endTime',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'showStartTime',
          'type' => TType::STRING,
          ),
        13 => array(
          'var' => 'showEndTime',
          'type' => TType::STRING,
          ),
        14 => array(
          'var' => 'packagesUnionBackgroudPic',
          'type' => TType::STRING,
          ),
        15 => array(
          'var' => 'showStartPeriod',
          'type' => TType::I64,
          ),
        16 => array(
          'var' => 'showEndPeriod',
          'type' => TType::I64,
          ),
        17 => array(
          'var' => 'vipAccessLevel',
          'type' => TType::I32,
          ),
        18 => array(
          'var' => 'lackOfStockThreshold',
          'type' => TType::I32,
          ),
        19 => array(
          'var' => 'channelCode',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['packageId'])) {
        $this->packageId = $vals['packageId'];
      }
      if (isset($vals['packageName'])) {
        $this->packageName = $vals['packageName'];
      }
      if (isset($vals['gameCodeNum'])) {
        $this->gameCodeNum = $vals['gameCodeNum'];
      }
      if (isset($vals['leftNum'])) {
        $this->leftNum = $vals['leftNum'];
      }
      if (isset($vals['gameId'])) {
        $this->gameId = $vals['gameId'];
      }
      if (isset($vals['rate'])) {
        $this->rate = $vals['rate'];
      }
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
      if (isset($vals['expiredTime'])) {
        $this->expiredTime = $vals['expiredTime'];
      }
      if (isset($vals['packageIcon'])) {
        $this->packageIcon = $vals['packageIcon'];
      }
      if (isset($vals['startTime'])) {
        $this->startTime = $vals['startTime'];
      }
      if (isset($vals['endTime'])) {
        $this->endTime = $vals['endTime'];
      }
      if (isset($vals['showStartTime'])) {
        $this->showStartTime = $vals['showStartTime'];
      }
      if (isset($vals['showEndTime'])) {
        $this->showEndTime = $vals['showEndTime'];
      }
      if (isset($vals['packagesUnionBackgroudPic'])) {
        $this->packagesUnionBackgroudPic = $vals['packagesUnionBackgroudPic'];
      }
      if (isset($vals['showStartPeriod'])) {
        $this->showStartPeriod = $vals['showStartPeriod'];
      }
      if (isset($vals['showEndPeriod'])) {
        $this->showEndPeriod = $vals['showEndPeriod'];
      }
      if (isset($vals['vipAccessLevel'])) {
        $this->vipAccessLevel = $vals['vipAccessLevel'];
      }
      if (isset($vals['lackOfStockThreshold'])) {
        $this->lackOfStockThreshold = $vals['lackOfStockThreshold'];
      }
      if (isset($vals['channelCode'])) {
        $this->channelCode = $vals['channelCode'];
      }
    }
  }

  public function getName() {
    return 'PackageSimpleViews';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->packageId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->packageName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->gameCodeNum);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->leftNum);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->gameId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->rate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->expiredTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->packageIcon);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->startTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->endTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->showStartTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->showEndTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->packagesUnionBackgroudPic);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->showStartPeriod);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->showEndPeriod);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->vipAccessLevel);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 18:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->lackOfStockThreshold);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 19:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->channelCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PackageSimpleViews');
    if ($this->packageId !== null) {
      $xfer += $output->writeFieldBegin('packageId', TType::I32, 1);
      $xfer += $output->writeI32($this->packageId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->packageName !== null) {
      $xfer += $output->writeFieldBegin('packageName', TType::STRING, 2);
      $xfer += $output->writeString($this->packageName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->gameCodeNum !== null) {
      $xfer += $output->writeFieldBegin('gameCodeNum', TType::I32, 3);
      $xfer += $output->writeI32($this->gameCodeNum);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->leftNum !== null) {
      $xfer += $output->writeFieldBegin('leftNum', TType::I32, 4);
      $xfer += $output->writeI32($this->leftNum);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->gameId !== null) {
      $xfer += $output->writeFieldBegin('gameId', TType::I32, 5);
      $xfer += $output->writeI32($this->gameId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->rate !== null) {
      $xfer += $output->writeFieldBegin('rate', TType::I32, 6);
      $xfer += $output->writeI32($this->rate);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->status !== null) {
      $xfer += $output->writeFieldBegin('status', TType::I32, 7);
      $xfer += $output->writeI32($this->status);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->expiredTime !== null) {
      $xfer += $output->writeFieldBegin('expiredTime', TType::STRING, 8);
      $xfer += $output->writeString($this->expiredTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->packageIcon !== null) {
      $xfer += $output->writeFieldBegin('packageIcon', TType::STRING, 9);
      $xfer += $output->writeString($this->packageIcon);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->startTime !== null) {
      $xfer += $output->writeFieldBegin('startTime', TType::STRING, 10);
      $xfer += $output->writeString($this->startTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->endTime !== null) {
      $xfer += $output->writeFieldBegin('endTime', TType::STRING, 11);
      $xfer += $output->writeString($this->endTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->showStartTime !== null) {
      $xfer += $output->writeFieldBegin('showStartTime', TType::STRING, 12);
      $xfer += $output->writeString($this->showStartTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->showEndTime !== null) {
      $xfer += $output->writeFieldBegin('showEndTime', TType::STRING, 13);
      $xfer += $output->writeString($this->showEndTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->packagesUnionBackgroudPic !== null) {
      $xfer += $output->writeFieldBegin('packagesUnionBackgroudPic', TType::STRING, 14);
      $xfer += $output->writeString($this->packagesUnionBackgroudPic);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->showStartPeriod !== null) {
      $xfer += $output->writeFieldBegin('showStartPeriod', TType::I64, 15);
      $xfer += $output->writeI64($this->showStartPeriod);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->showEndPeriod !== null) {
      $xfer += $output->writeFieldBegin('showEndPeriod', TType::I64, 16);
      $xfer += $output->writeI64($this->showEndPeriod);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->vipAccessLevel !== null) {
      $xfer += $output->writeFieldBegin('vipAccessLevel', TType::I32, 17);
      $xfer += $output->writeI32($this->vipAccessLevel);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lackOfStockThreshold !== null) {
      $xfer += $output->writeFieldBegin('lackOfStockThreshold', TType::I32, 18);
      $xfer += $output->writeI32($this->lackOfStockThreshold);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->channelCode !== null) {
      $xfer += $output->writeFieldBegin('channelCode', TType::I32, 19);
      $xfer += $output->writeI32($this->channelCode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class PackageSimpleViewList {
  static $_TSPEC;

  public $count = null;
  public $pList = null;
  public $error = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'count',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'pList',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'PackageSimpleViews',
            ),
          ),
        3 => array(
          'var' => 'error',
          'type' => TType::STRUCT,
          'class' => 'ExceptionDes',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['count'])) {
        $this->count = $vals['count'];
      }
      if (isset($vals['pList'])) {
        $this->pList = $vals['pList'];
      }
      if (isset($vals['error'])) {
        $this->error = $vals['error'];
      }
    }
  }

  public function getName() {
    return 'PackageSimpleViewList';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->count);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->pList = array();
            $_size35 = 0;
            $_etype38 = 0;
            $xfer += $input->readListBegin($_etype38, $_size35);
            for ($_i39 = 0; $_i39 < $_size35; ++$_i39)
            {
              $elem40 = null;
              $elem40 = new PackageSimpleViews();
              $xfer += $elem40->read($input);
              $this->pList []= $elem40;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->error = new ExceptionDes();
            $xfer += $this->error->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PackageSimpleViewList');
    if ($this->count !== null) {
      $xfer += $output->writeFieldBegin('count', TType::I32, 1);
      $xfer += $output->writeI32($this->count);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pList !== null) {
      if (!is_array($this->pList)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('pList', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRUCT, count($this->pList));
        {
          foreach ($this->pList as $iter41)
          {
            $xfer += $iter41->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->error !== null) {
      if (!is_object($this->error)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('error', TType::STRUCT, 3);
      $xfer += $this->error->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class PageInfo {
  static $_TSPEC;

  public $pageNo = null;
  public $pageSize = null;
  public $type = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'pageNo',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'pageSize',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'type',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['pageNo'])) {
        $this->pageNo = $vals['pageNo'];
      }
      if (isset($vals['pageSize'])) {
        $this->pageSize = $vals['pageSize'];
      }
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
    }
  }

  public function getName() {
    return 'PageInfo';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->pageNo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->pageSize);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PageInfo');
    if ($this->pageNo !== null) {
      $xfer += $output->writeFieldBegin('pageNo', TType::I32, 1);
      $xfer += $output->writeI32($this->pageNo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pageSize !== null) {
      $xfer += $output->writeFieldBegin('pageSize', TType::I32, 2);
      $xfer += $output->writeI32($this->pageSize);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::I32, 3);
      $xfer += $output->writeI32($this->type);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class PackageId {
  static $_TSPEC;

  public $packageId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'packageId',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['packageId'])) {
        $this->packageId = $vals['packageId'];
      }
    }
  }

  public function getName() {
    return 'PackageId';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->packageId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PackageId');
    if ($this->packageId !== null) {
      $xfer += $output->writeFieldBegin('packageId', TType::I32, 1);
      $xfer += $output->writeI32($this->packageId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ExportPackageNumRequest {
  static $_TSPEC;

  public $packageId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'packageId',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['packageId'])) {
        $this->packageId = $vals['packageId'];
      }
    }
  }

  public function getName() {
    return 'ExportPackageNumRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->packageId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ExportPackageNumRequest');
    if ($this->packageId !== null) {
      $xfer += $output->writeFieldBegin('packageId', TType::I32, 1);
      $xfer += $output->writeI32($this->packageId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ExportPackageNumResponse {
  static $_TSPEC;

  public $numList = null;
  public $error = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'numList',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'error',
          'type' => TType::STRUCT,
          'class' => 'ExceptionDes',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['numList'])) {
        $this->numList = $vals['numList'];
      }
      if (isset($vals['error'])) {
        $this->error = $vals['error'];
      }
    }
  }

  public function getName() {
    return 'ExportPackageNumResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->numList = array();
            $_size42 = 0;
            $_etype45 = 0;
            $xfer += $input->readListBegin($_etype45, $_size42);
            for ($_i46 = 0; $_i46 < $_size42; ++$_i46)
            {
              $elem47 = null;
              $xfer += $input->readString($elem47);
              $this->numList []= $elem47;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->error = new ExceptionDes();
            $xfer += $this->error->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ExportPackageNumResponse');
    if ($this->numList !== null) {
      if (!is_array($this->numList)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('numList', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRING, count($this->numList));
        {
          foreach ($this->numList as $iter48)
          {
            $xfer += $output->writeString($iter48);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->error !== null) {
      if (!is_object($this->error)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('error', TType::STRUCT, 2);
      $xfer += $this->error->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class PackageValidationResult {
  static $_TSPEC;

  public $isValidate = null;
  public $error = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'isValidate',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'error',
          'type' => TType::STRUCT,
          'class' => 'ExceptionDes',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['isValidate'])) {
        $this->isValidate = $vals['isValidate'];
      }
      if (isset($vals['error'])) {
        $this->error = $vals['error'];
      }
    }
  }

  public function getName() {
    return 'PackageValidationResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->isValidate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->error = new ExceptionDes();
            $xfer += $this->error->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PackageValidationResult');
    if ($this->isValidate !== null) {
      $xfer += $output->writeFieldBegin('isValidate', TType::I32, 1);
      $xfer += $output->writeI32($this->isValidate);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->error !== null) {
      if (!is_object($this->error)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('error', TType::STRUCT, 2);
      $xfer += $this->error->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Activity {
  static $_TSPEC;

  public $activityId = null;
  public $activityName = null;
  public $activityIcon = null;
  public $startTime = null;
  public $endTime = null;
  public $activityType = null;
  public $preStartTime = null;
  public $preEndTime = null;
  public $isjoin = null;
  public $h5url = null;
  public $lotteryId = null;
  public $vipAccessLevel = null;
  public $vipJoinLevel = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'activityId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'activityName',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'activityIcon',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'startTime',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'endTime',
          'type' => TType::I64,
          ),
        6 => array(
          'var' => 'activityType',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'preStartTime',
          'type' => TType::I64,
          ),
        8 => array(
          'var' => 'preEndTime',
          'type' => TType::I64,
          ),
        9 => array(
          'var' => 'isjoin',
          'type' => TType::I32,
          ),
        10 => array(
          'var' => 'h5url',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'lotteryId',
          'type' => TType::I32,
          ),
        12 => array(
          'var' => 'vipAccessLevel',
          'type' => TType::I32,
          ),
        13 => array(
          'var' => 'vipJoinLevel',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['activityId'])) {
        $this->activityId = $vals['activityId'];
      }
      if (isset($vals['activityName'])) {
        $this->activityName = $vals['activityName'];
      }
      if (isset($vals['activityIcon'])) {
        $this->activityIcon = $vals['activityIcon'];
      }
      if (isset($vals['startTime'])) {
        $this->startTime = $vals['startTime'];
      }
      if (isset($vals['endTime'])) {
        $this->endTime = $vals['endTime'];
      }
      if (isset($vals['activityType'])) {
        $this->activityType = $vals['activityType'];
      }
      if (isset($vals['preStartTime'])) {
        $this->preStartTime = $vals['preStartTime'];
      }
      if (isset($vals['preEndTime'])) {
        $this->preEndTime = $vals['preEndTime'];
      }
      if (isset($vals['isjoin'])) {
        $this->isjoin = $vals['isjoin'];
      }
      if (isset($vals['h5url'])) {
        $this->h5url = $vals['h5url'];
      }
      if (isset($vals['lotteryId'])) {
        $this->lotteryId = $vals['lotteryId'];
      }
      if (isset($vals['vipAccessLevel'])) {
        $this->vipAccessLevel = $vals['vipAccessLevel'];
      }
      if (isset($vals['vipJoinLevel'])) {
        $this->vipJoinLevel = $vals['vipJoinLevel'];
      }
    }
  }

  public function getName() {
    return 'Activity';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->activityId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->activityName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->activityIcon);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->startTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->endTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->activityType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->preStartTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->preEndTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->isjoin);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->h5url);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->lotteryId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->vipAccessLevel);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->vipJoinLevel);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Activity');
    if ($this->activityId !== null) {
      $xfer += $output->writeFieldBegin('activityId', TType::I32, 1);
      $xfer += $output->writeI32($this->activityId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->activityName !== null) {
      $xfer += $output->writeFieldBegin('activityName', TType::STRING, 2);
      $xfer += $output->writeString($this->activityName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->activityIcon !== null) {
      $xfer += $output->writeFieldBegin('activityIcon', TType::STRING, 3);
      $xfer += $output->writeString($this->activityIcon);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->startTime !== null) {
      $xfer += $output->writeFieldBegin('startTime', TType::I64, 4);
      $xfer += $output->writeI64($this->startTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->endTime !== null) {
      $xfer += $output->writeFieldBegin('endTime', TType::I64, 5);
      $xfer += $output->writeI64($this->endTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->activityType !== null) {
      $xfer += $output->writeFieldBegin('activityType', TType::I32, 6);
      $xfer += $output->writeI32($this->activityType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->preStartTime !== null) {
      $xfer += $output->writeFieldBegin('preStartTime', TType::I64, 7);
      $xfer += $output->writeI64($this->preStartTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->preEndTime !== null) {
      $xfer += $output->writeFieldBegin('preEndTime', TType::I64, 8);
      $xfer += $output->writeI64($this->preEndTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->isjoin !== null) {
      $xfer += $output->writeFieldBegin('isjoin', TType::I32, 9);
      $xfer += $output->writeI32($this->isjoin);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->h5url !== null) {
      $xfer += $output->writeFieldBegin('h5url', TType::STRING, 10);
      $xfer += $output->writeString($this->h5url);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lotteryId !== null) {
      $xfer += $output->writeFieldBegin('lotteryId', TType::I32, 11);
      $xfer += $output->writeI32($this->lotteryId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->vipAccessLevel !== null) {
      $xfer += $output->writeFieldBegin('vipAccessLevel', TType::I32, 12);
      $xfer += $output->writeI32($this->vipAccessLevel);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->vipJoinLevel !== null) {
      $xfer += $output->writeFieldBegin('vipJoinLevel', TType::I32, 13);
      $xfer += $output->writeI32($this->vipJoinLevel);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ActivityList {
  static $_TSPEC;

  public $pList = null;
  public $error = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'pList',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'Activity',
            ),
          ),
        2 => array(
          'var' => 'error',
          'type' => TType::STRUCT,
          'class' => 'ExceptionDes',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['pList'])) {
        $this->pList = $vals['pList'];
      }
      if (isset($vals['error'])) {
        $this->error = $vals['error'];
      }
    }
  }

  public function getName() {
    return 'ActivityList';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->pList = array();
            $_size49 = 0;
            $_etype52 = 0;
            $xfer += $input->readListBegin($_etype52, $_size49);
            for ($_i53 = 0; $_i53 < $_size49; ++$_i53)
            {
              $elem54 = null;
              $elem54 = new Activity();
              $xfer += $elem54->read($input);
              $this->pList []= $elem54;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->error = new ExceptionDes();
            $xfer += $this->error->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ActivityList');
    if ($this->pList !== null) {
      if (!is_array($this->pList)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('pList', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->pList));
        {
          foreach ($this->pList as $iter55)
          {
            $xfer += $iter55->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->error !== null) {
      if (!is_object($this->error)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('error', TType::STRUCT, 2);
      $xfer += $this->error->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GameActivity {
  static $_TSPEC;

  public $activityName = null;
  public $activityStartTime = null;
  public $activityEndTime = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'activityName',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'activityStartTime',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'activityEndTime',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['activityName'])) {
        $this->activityName = $vals['activityName'];
      }
      if (isset($vals['activityStartTime'])) {
        $this->activityStartTime = $vals['activityStartTime'];
      }
      if (isset($vals['activityEndTime'])) {
        $this->activityEndTime = $vals['activityEndTime'];
      }
    }
  }

  public function getName() {
    return 'GameActivity';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->activityName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->activityStartTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->activityEndTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GameActivity');
    if ($this->activityName !== null) {
      $xfer += $output->writeFieldBegin('activityName', TType::STRING, 1);
      $xfer += $output->writeString($this->activityName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->activityStartTime !== null) {
      $xfer += $output->writeFieldBegin('activityStartTime', TType::I64, 2);
      $xfer += $output->writeI64($this->activityStartTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->activityEndTime !== null) {
      $xfer += $output->writeFieldBegin('activityEndTime', TType::I64, 3);
      $xfer += $output->writeI64($this->activityEndTime);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GameActivityResponse {
  static $_TSPEC;

  public $gameActivityList = null;
  public $error = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'gameActivityList',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'GameActivity',
            ),
          ),
        2 => array(
          'var' => 'error',
          'type' => TType::STRUCT,
          'class' => 'ExceptionDes',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['gameActivityList'])) {
        $this->gameActivityList = $vals['gameActivityList'];
      }
      if (isset($vals['error'])) {
        $this->error = $vals['error'];
      }
    }
  }

  public function getName() {
    return 'GameActivityResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->gameActivityList = array();
            $_size56 = 0;
            $_etype59 = 0;
            $xfer += $input->readListBegin($_etype59, $_size56);
            for ($_i60 = 0; $_i60 < $_size56; ++$_i60)
            {
              $elem61 = null;
              $elem61 = new GameActivity();
              $xfer += $elem61->read($input);
              $this->gameActivityList []= $elem61;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->error = new ExceptionDes();
            $xfer += $this->error->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GameActivityResponse');
    if ($this->gameActivityList !== null) {
      if (!is_array($this->gameActivityList)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('gameActivityList', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->gameActivityList));
        {
          foreach ($this->gameActivityList as $iter62)
          {
            $xfer += $iter62->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->error !== null) {
      if (!is_object($this->error)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('error', TType::STRUCT, 2);
      $xfer += $this->error->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class UpdateActivityInfo {
  static $_TSPEC;

  public $activityId = null;
  public $activityName = null;
  public $activityDescription = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'activityId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'activityName',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'activityDescription',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['activityId'])) {
        $this->activityId = $vals['activityId'];
      }
      if (isset($vals['activityName'])) {
        $this->activityName = $vals['activityName'];
      }
      if (isset($vals['activityDescription'])) {
        $this->activityDescription = $vals['activityDescription'];
      }
    }
  }

  public function getName() {
    return 'UpdateActivityInfo';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->activityId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->activityName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->activityDescription);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('UpdateActivityInfo');
    if ($this->activityId !== null) {
      $xfer += $output->writeFieldBegin('activityId', TType::I32, 1);
      $xfer += $output->writeI32($this->activityId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->activityName !== null) {
      $xfer += $output->writeFieldBegin('activityName', TType::STRING, 2);
      $xfer += $output->writeString($this->activityName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->activityDescription !== null) {
      $xfer += $output->writeFieldBegin('activityDescription', TType::STRING, 3);
      $xfer += $output->writeString($this->activityDescription);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class DeActivity {
  static $_TSPEC;

  public $activityId = null;
  public $activityName = null;
  public $activityDesc = null;
  public $activityIcon = null;
  public $activityType = null;
  public $startTime = null;
  public $endTime = null;
  public $vip = null;
  public $isjoin = null;
  public $gameId = null;
  public $activityPhoto = null;
  public $preStartTime = null;
  public $preEndTime = null;
  public $userJoin = null;
  public $consumeScore = null;
  public $h5url = null;
  public $lotteryId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'activityId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'activityName',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'activityDesc',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'activityIcon',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'activityType',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'startTime',
          'type' => TType::I64,
          ),
        7 => array(
          'var' => 'endTime',
          'type' => TType::I64,
          ),
        8 => array(
          'var' => 'vip',
          'type' => TType::I32,
          ),
        9 => array(
          'var' => 'isjoin',
          'type' => TType::I32,
          ),
        10 => array(
          'var' => 'gameId',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        11 => array(
          'var' => 'activityPhoto',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'preStartTime',
          'type' => TType::I64,
          ),
        13 => array(
          'var' => 'preEndTime',
          'type' => TType::I64,
          ),
        14 => array(
          'var' => 'userJoin',
          'type' => TType::I32,
          ),
        15 => array(
          'var' => 'consumeScore',
          'type' => TType::I32,
          ),
        16 => array(
          'var' => 'h5url',
          'type' => TType::STRING,
          ),
        17 => array(
          'var' => 'lotteryId',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['activityId'])) {
        $this->activityId = $vals['activityId'];
      }
      if (isset($vals['activityName'])) {
        $this->activityName = $vals['activityName'];
      }
      if (isset($vals['activityDesc'])) {
        $this->activityDesc = $vals['activityDesc'];
      }
      if (isset($vals['activityIcon'])) {
        $this->activityIcon = $vals['activityIcon'];
      }
      if (isset($vals['activityType'])) {
        $this->activityType = $vals['activityType'];
      }
      if (isset($vals['startTime'])) {
        $this->startTime = $vals['startTime'];
      }
      if (isset($vals['endTime'])) {
        $this->endTime = $vals['endTime'];
      }
      if (isset($vals['vip'])) {
        $this->vip = $vals['vip'];
      }
      if (isset($vals['isjoin'])) {
        $this->isjoin = $vals['isjoin'];
      }
      if (isset($vals['gameId'])) {
        $this->gameId = $vals['gameId'];
      }
      if (isset($vals['activityPhoto'])) {
        $this->activityPhoto = $vals['activityPhoto'];
      }
      if (isset($vals['preStartTime'])) {
        $this->preStartTime = $vals['preStartTime'];
      }
      if (isset($vals['preEndTime'])) {
        $this->preEndTime = $vals['preEndTime'];
      }
      if (isset($vals['userJoin'])) {
        $this->userJoin = $vals['userJoin'];
      }
      if (isset($vals['consumeScore'])) {
        $this->consumeScore = $vals['consumeScore'];
      }
      if (isset($vals['h5url'])) {
        $this->h5url = $vals['h5url'];
      }
      if (isset($vals['lotteryId'])) {
        $this->lotteryId = $vals['lotteryId'];
      }
    }
  }

  public function getName() {
    return 'DeActivity';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->activityId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->activityName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->activityDesc);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->activityIcon);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->activityType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->startTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->endTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->vip);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->isjoin);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::LST) {
            $this->gameId = array();
            $_size63 = 0;
            $_etype66 = 0;
            $xfer += $input->readListBegin($_etype66, $_size63);
            for ($_i67 = 0; $_i67 < $_size63; ++$_i67)
            {
              $elem68 = null;
              $xfer += $input->readI32($elem68);
              $this->gameId []= $elem68;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->activityPhoto);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->preStartTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->preEndTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->userJoin);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->consumeScore);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->h5url);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->lotteryId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('DeActivity');
    if ($this->activityId !== null) {
      $xfer += $output->writeFieldBegin('activityId', TType::I32, 1);
      $xfer += $output->writeI32($this->activityId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->activityName !== null) {
      $xfer += $output->writeFieldBegin('activityName', TType::STRING, 2);
      $xfer += $output->writeString($this->activityName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->activityDesc !== null) {
      $xfer += $output->writeFieldBegin('activityDesc', TType::STRING, 3);
      $xfer += $output->writeString($this->activityDesc);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->activityIcon !== null) {
      $xfer += $output->writeFieldBegin('activityIcon', TType::STRING, 4);
      $xfer += $output->writeString($this->activityIcon);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->activityType !== null) {
      $xfer += $output->writeFieldBegin('activityType', TType::I32, 5);
      $xfer += $output->writeI32($this->activityType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->startTime !== null) {
      $xfer += $output->writeFieldBegin('startTime', TType::I64, 6);
      $xfer += $output->writeI64($this->startTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->endTime !== null) {
      $xfer += $output->writeFieldBegin('endTime', TType::I64, 7);
      $xfer += $output->writeI64($this->endTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->vip !== null) {
      $xfer += $output->writeFieldBegin('vip', TType::I32, 8);
      $xfer += $output->writeI32($this->vip);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->isjoin !== null) {
      $xfer += $output->writeFieldBegin('isjoin', TType::I32, 9);
      $xfer += $output->writeI32($this->isjoin);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->gameId !== null) {
      if (!is_array($this->gameId)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('gameId', TType::LST, 10);
      {
        $output->writeListBegin(TType::I32, count($this->gameId));
        {
          foreach ($this->gameId as $iter69)
          {
            $xfer += $output->writeI32($iter69);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->activityPhoto !== null) {
      $xfer += $output->writeFieldBegin('activityPhoto', TType::STRING, 11);
      $xfer += $output->writeString($this->activityPhoto);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->preStartTime !== null) {
      $xfer += $output->writeFieldBegin('preStartTime', TType::I64, 12);
      $xfer += $output->writeI64($this->preStartTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->preEndTime !== null) {
      $xfer += $output->writeFieldBegin('preEndTime', TType::I64, 13);
      $xfer += $output->writeI64($this->preEndTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userJoin !== null) {
      $xfer += $output->writeFieldBegin('userJoin', TType::I32, 14);
      $xfer += $output->writeI32($this->userJoin);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->consumeScore !== null) {
      $xfer += $output->writeFieldBegin('consumeScore', TType::I32, 15);
      $xfer += $output->writeI32($this->consumeScore);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->h5url !== null) {
      $xfer += $output->writeFieldBegin('h5url', TType::STRING, 16);
      $xfer += $output->writeString($this->h5url);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lotteryId !== null) {
      $xfer += $output->writeFieldBegin('lotteryId', TType::I32, 17);
      $xfer += $output->writeI32($this->lotteryId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class DetailActivity {
  static $_TSPEC;

  public $deActivity = null;
  public $error = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'deActivity',
          'type' => TType::STRUCT,
          'class' => 'DeActivity',
          ),
        2 => array(
          'var' => 'error',
          'type' => TType::STRUCT,
          'class' => 'ExceptionDes',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['deActivity'])) {
        $this->deActivity = $vals['deActivity'];
      }
      if (isset($vals['error'])) {
        $this->error = $vals['error'];
      }
    }
  }

  public function getName() {
    return 'DetailActivity';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->deActivity = new DeActivity();
            $xfer += $this->deActivity->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->error = new ExceptionDes();
            $xfer += $this->error->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('DetailActivity');
    if ($this->deActivity !== null) {
      if (!is_object($this->deActivity)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('deActivity', TType::STRUCT, 1);
      $xfer += $this->deActivity->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->error !== null) {
      if (!is_object($this->error)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('error', TType::STRUCT, 2);
      $xfer += $this->error->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ActivityResult {
  static $_TSPEC;

  public $activityId = null;
  public $error = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'activityId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'error',
          'type' => TType::STRUCT,
          'class' => 'ExceptionDes',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['activityId'])) {
        $this->activityId = $vals['activityId'];
      }
      if (isset($vals['error'])) {
        $this->error = $vals['error'];
      }
    }
  }

  public function getName() {
    return 'ActivityResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->activityId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->error = new ExceptionDes();
            $xfer += $this->error->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ActivityResult');
    if ($this->activityId !== null) {
      $xfer += $output->writeFieldBegin('activityId', TType::I32, 1);
      $xfer += $output->writeI32($this->activityId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->error !== null) {
      if (!is_object($this->error)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('error', TType::STRUCT, 2);
      $xfer += $this->error->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ActivityAll {
  static $_TSPEC;

  public $activityId = null;
  public $activityName = null;
  public $activityDesc = null;
  public $activityIcon = null;
  public $vip = null;
  public $vipForVisible = null;
  public $consumePoint = null;
  public $startTime = null;
  public $endTime = null;
  public $showStartTime = null;
  public $showEndTime = null;
  public $isjoin = null;
  public $type = null;
  public $startMoney = null;
  public $donateMoney = null;
  public $gameIds = null;
  public $isValidate = null;
  public $activityType = null;
  public $preStartTime = null;
  public $preEndTime = null;
  public $activityPhoto = null;
  public $activityExtend = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'activityId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'activityName',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'activityDesc',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'activityIcon',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'vip',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'vipForVisible',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'consumePoint',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'startTime',
          'type' => TType::I64,
          ),
        9 => array(
          'var' => 'endTime',
          'type' => TType::I64,
          ),
        10 => array(
          'var' => 'showStartTime',
          'type' => TType::I64,
          ),
        11 => array(
          'var' => 'showEndTime',
          'type' => TType::I64,
          ),
        12 => array(
          'var' => 'isjoin',
          'type' => TType::I32,
          ),
        13 => array(
          'var' => 'type',
          'type' => TType::I32,
          ),
        14 => array(
          'var' => 'startMoney',
          'type' => TType::I32,
          ),
        15 => array(
          'var' => 'donateMoney',
          'type' => TType::STRING,
          ),
        16 => array(
          'var' => 'gameIds',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        17 => array(
          'var' => 'isValidate',
          'type' => TType::I32,
          ),
        18 => array(
          'var' => 'activityType',
          'type' => TType::I32,
          ),
        19 => array(
          'var' => 'preStartTime',
          'type' => TType::I64,
          ),
        20 => array(
          'var' => 'preEndTime',
          'type' => TType::I64,
          ),
        21 => array(
          'var' => 'activityPhoto',
          'type' => TType::STRING,
          ),
        22 => array(
          'var' => 'activityExtend',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['activityId'])) {
        $this->activityId = $vals['activityId'];
      }
      if (isset($vals['activityName'])) {
        $this->activityName = $vals['activityName'];
      }
      if (isset($vals['activityDesc'])) {
        $this->activityDesc = $vals['activityDesc'];
      }
      if (isset($vals['activityIcon'])) {
        $this->activityIcon = $vals['activityIcon'];
      }
      if (isset($vals['vip'])) {
        $this->vip = $vals['vip'];
      }
      if (isset($vals['vipForVisible'])) {
        $this->vipForVisible = $vals['vipForVisible'];
      }
      if (isset($vals['consumePoint'])) {
        $this->consumePoint = $vals['consumePoint'];
      }
      if (isset($vals['startTime'])) {
        $this->startTime = $vals['startTime'];
      }
      if (isset($vals['endTime'])) {
        $this->endTime = $vals['endTime'];
      }
      if (isset($vals['showStartTime'])) {
        $this->showStartTime = $vals['showStartTime'];
      }
      if (isset($vals['showEndTime'])) {
        $this->showEndTime = $vals['showEndTime'];
      }
      if (isset($vals['isjoin'])) {
        $this->isjoin = $vals['isjoin'];
      }
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['startMoney'])) {
        $this->startMoney = $vals['startMoney'];
      }
      if (isset($vals['donateMoney'])) {
        $this->donateMoney = $vals['donateMoney'];
      }
      if (isset($vals['gameIds'])) {
        $this->gameIds = $vals['gameIds'];
      }
      if (isset($vals['isValidate'])) {
        $this->isValidate = $vals['isValidate'];
      }
      if (isset($vals['activityType'])) {
        $this->activityType = $vals['activityType'];
      }
      if (isset($vals['preStartTime'])) {
        $this->preStartTime = $vals['preStartTime'];
      }
      if (isset($vals['preEndTime'])) {
        $this->preEndTime = $vals['preEndTime'];
      }
      if (isset($vals['activityPhoto'])) {
        $this->activityPhoto = $vals['activityPhoto'];
      }
      if (isset($vals['activityExtend'])) {
        $this->activityExtend = $vals['activityExtend'];
      }
    }
  }

  public function getName() {
    return 'ActivityAll';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->activityId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->activityName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->activityDesc);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->activityIcon);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->vip);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->vipForVisible);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->consumePoint);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->startTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->endTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->showStartTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->showEndTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->isjoin);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->startMoney);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->donateMoney);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::LST) {
            $this->gameIds = array();
            $_size70 = 0;
            $_etype73 = 0;
            $xfer += $input->readListBegin($_etype73, $_size70);
            for ($_i74 = 0; $_i74 < $_size70; ++$_i74)
            {
              $elem75 = null;
              $xfer += $input->readI32($elem75);
              $this->gameIds []= $elem75;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->isValidate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 18:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->activityType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 19:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->preStartTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 20:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->preEndTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 21:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->activityPhoto);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 22:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->activityExtend);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ActivityAll');
    if ($this->activityId !== null) {
      $xfer += $output->writeFieldBegin('activityId', TType::I32, 1);
      $xfer += $output->writeI32($this->activityId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->activityName !== null) {
      $xfer += $output->writeFieldBegin('activityName', TType::STRING, 2);
      $xfer += $output->writeString($this->activityName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->activityDesc !== null) {
      $xfer += $output->writeFieldBegin('activityDesc', TType::STRING, 3);
      $xfer += $output->writeString($this->activityDesc);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->activityIcon !== null) {
      $xfer += $output->writeFieldBegin('activityIcon', TType::STRING, 4);
      $xfer += $output->writeString($this->activityIcon);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->vip !== null) {
      $xfer += $output->writeFieldBegin('vip', TType::I32, 5);
      $xfer += $output->writeI32($this->vip);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->vipForVisible !== null) {
      $xfer += $output->writeFieldBegin('vipForVisible', TType::I32, 6);
      $xfer += $output->writeI32($this->vipForVisible);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->consumePoint !== null) {
      $xfer += $output->writeFieldBegin('consumePoint', TType::I32, 7);
      $xfer += $output->writeI32($this->consumePoint);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->startTime !== null) {
      $xfer += $output->writeFieldBegin('startTime', TType::I64, 8);
      $xfer += $output->writeI64($this->startTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->endTime !== null) {
      $xfer += $output->writeFieldBegin('endTime', TType::I64, 9);
      $xfer += $output->writeI64($this->endTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->showStartTime !== null) {
      $xfer += $output->writeFieldBegin('showStartTime', TType::I64, 10);
      $xfer += $output->writeI64($this->showStartTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->showEndTime !== null) {
      $xfer += $output->writeFieldBegin('showEndTime', TType::I64, 11);
      $xfer += $output->writeI64($this->showEndTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->isjoin !== null) {
      $xfer += $output->writeFieldBegin('isjoin', TType::I32, 12);
      $xfer += $output->writeI32($this->isjoin);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::I32, 13);
      $xfer += $output->writeI32($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->startMoney !== null) {
      $xfer += $output->writeFieldBegin('startMoney', TType::I32, 14);
      $xfer += $output->writeI32($this->startMoney);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->donateMoney !== null) {
      $xfer += $output->writeFieldBegin('donateMoney', TType::STRING, 15);
      $xfer += $output->writeString($this->donateMoney);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->gameIds !== null) {
      if (!is_array($this->gameIds)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('gameIds', TType::LST, 16);
      {
        $output->writeListBegin(TType::I32, count($this->gameIds));
        {
          foreach ($this->gameIds as $iter76)
          {
            $xfer += $output->writeI32($iter76);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->isValidate !== null) {
      $xfer += $output->writeFieldBegin('isValidate', TType::I32, 17);
      $xfer += $output->writeI32($this->isValidate);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->activityType !== null) {
      $xfer += $output->writeFieldBegin('activityType', TType::I32, 18);
      $xfer += $output->writeI32($this->activityType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->preStartTime !== null) {
      $xfer += $output->writeFieldBegin('preStartTime', TType::I64, 19);
      $xfer += $output->writeI64($this->preStartTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->preEndTime !== null) {
      $xfer += $output->writeFieldBegin('preEndTime', TType::I64, 20);
      $xfer += $output->writeI64($this->preEndTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->activityPhoto !== null) {
      $xfer += $output->writeFieldBegin('activityPhoto', TType::STRING, 21);
      $xfer += $output->writeString($this->activityPhoto);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->activityExtend !== null) {
      $xfer += $output->writeFieldBegin('activityExtend', TType::STRING, 22);
      $xfer += $output->writeString($this->activityExtend);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AccumulationRebateRule {
  static $_TSPEC;

  public $activityId = null;
  public $threshold = null;
  public $voucherId = null;
  public $baiduCoin = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'activityId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'threshold',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'voucherId',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'baiduCoin',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['activityId'])) {
        $this->activityId = $vals['activityId'];
      }
      if (isset($vals['threshold'])) {
        $this->threshold = $vals['threshold'];
      }
      if (isset($vals['voucherId'])) {
        $this->voucherId = $vals['voucherId'];
      }
      if (isset($vals['baiduCoin'])) {
        $this->baiduCoin = $vals['baiduCoin'];
      }
    }
  }

  public function getName() {
    return 'AccumulationRebateRule';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->activityId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->threshold);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->voucherId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->baiduCoin);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AccumulationRebateRule');
    if ($this->activityId !== null) {
      $xfer += $output->writeFieldBegin('activityId', TType::I32, 1);
      $xfer += $output->writeI32($this->activityId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->threshold !== null) {
      $xfer += $output->writeFieldBegin('threshold', TType::I32, 2);
      $xfer += $output->writeI32($this->threshold);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->voucherId !== null) {
      $xfer += $output->writeFieldBegin('voucherId', TType::I32, 3);
      $xfer += $output->writeI32($this->voucherId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->baiduCoin !== null) {
      $xfer += $output->writeFieldBegin('baiduCoin', TType::I32, 4);
      $xfer += $output->writeI32($this->baiduCoin);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OnceRebateRule {
  static $_TSPEC;

  public $activityId = null;
  public $threshold = null;
  public $voucherId = null;
  public $baiduCoin = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'activityId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'threshold',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'voucherId',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'baiduCoin',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['activityId'])) {
        $this->activityId = $vals['activityId'];
      }
      if (isset($vals['threshold'])) {
        $this->threshold = $vals['threshold'];
      }
      if (isset($vals['voucherId'])) {
        $this->voucherId = $vals['voucherId'];
      }
      if (isset($vals['baiduCoin'])) {
        $this->baiduCoin = $vals['baiduCoin'];
      }
    }
  }

  public function getName() {
    return 'OnceRebateRule';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->activityId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->threshold);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->voucherId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->baiduCoin);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OnceRebateRule');
    if ($this->activityId !== null) {
      $xfer += $output->writeFieldBegin('activityId', TType::I32, 1);
      $xfer += $output->writeI32($this->activityId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->threshold !== null) {
      $xfer += $output->writeFieldBegin('threshold', TType::I32, 2);
      $xfer += $output->writeI32($this->threshold);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->voucherId !== null) {
      $xfer += $output->writeFieldBegin('voucherId', TType::I32, 3);
      $xfer += $output->writeI32($this->voucherId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->baiduCoin !== null) {
      $xfer += $output->writeFieldBegin('baiduCoin', TType::I32, 4);
      $xfer += $output->writeI32($this->baiduCoin);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class RandomRebateRule {
  static $_TSPEC;

  public $activityId = null;
  public $threshold = null;
  public $voucherId = null;
  public $baiduCoinRatio = null;
  public $probability = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'activityId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'threshold',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'voucherId',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'baiduCoinRatio',
          'type' => TType::DOUBLE,
          ),
        5 => array(
          'var' => 'probability',
          'type' => TType::DOUBLE,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['activityId'])) {
        $this->activityId = $vals['activityId'];
      }
      if (isset($vals['threshold'])) {
        $this->threshold = $vals['threshold'];
      }
      if (isset($vals['voucherId'])) {
        $this->voucherId = $vals['voucherId'];
      }
      if (isset($vals['baiduCoinRatio'])) {
        $this->baiduCoinRatio = $vals['baiduCoinRatio'];
      }
      if (isset($vals['probability'])) {
        $this->probability = $vals['probability'];
      }
    }
  }

  public function getName() {
    return 'RandomRebateRule';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->activityId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->threshold);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->voucherId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->baiduCoinRatio);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->probability);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('RandomRebateRule');
    if ($this->activityId !== null) {
      $xfer += $output->writeFieldBegin('activityId', TType::I32, 1);
      $xfer += $output->writeI32($this->activityId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->threshold !== null) {
      $xfer += $output->writeFieldBegin('threshold', TType::I32, 2);
      $xfer += $output->writeI32($this->threshold);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->voucherId !== null) {
      $xfer += $output->writeFieldBegin('voucherId', TType::I32, 3);
      $xfer += $output->writeI32($this->voucherId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->baiduCoinRatio !== null) {
      $xfer += $output->writeFieldBegin('baiduCoinRatio', TType::DOUBLE, 4);
      $xfer += $output->writeDouble($this->baiduCoinRatio);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->probability !== null) {
      $xfer += $output->writeFieldBegin('probability', TType::DOUBLE, 5);
      $xfer += $output->writeDouble($this->probability);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class LotteryActivityRequest {
  static $_TSPEC;

  public $lotteryId = null;
  public $exhibitionStartTime = null;
  public $exhibitionEndTime = null;
  public $vipAccessLevel = null;
  public $activityIcon = null;
  public $exhibitionURL = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'lotteryId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'exhibitionStartTime',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'exhibitionEndTime',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'vipAccessLevel',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'activityIcon',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'exhibitionURL',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['lotteryId'])) {
        $this->lotteryId = $vals['lotteryId'];
      }
      if (isset($vals['exhibitionStartTime'])) {
        $this->exhibitionStartTime = $vals['exhibitionStartTime'];
      }
      if (isset($vals['exhibitionEndTime'])) {
        $this->exhibitionEndTime = $vals['exhibitionEndTime'];
      }
      if (isset($vals['vipAccessLevel'])) {
        $this->vipAccessLevel = $vals['vipAccessLevel'];
      }
      if (isset($vals['activityIcon'])) {
        $this->activityIcon = $vals['activityIcon'];
      }
      if (isset($vals['exhibitionURL'])) {
        $this->exhibitionURL = $vals['exhibitionURL'];
      }
    }
  }

  public function getName() {
    return 'LotteryActivityRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->lotteryId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->exhibitionStartTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->exhibitionEndTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->vipAccessLevel);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->activityIcon);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->exhibitionURL);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('LotteryActivityRequest');
    if ($this->lotteryId !== null) {
      $xfer += $output->writeFieldBegin('lotteryId', TType::I32, 1);
      $xfer += $output->writeI32($this->lotteryId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->exhibitionStartTime !== null) {
      $xfer += $output->writeFieldBegin('exhibitionStartTime', TType::I64, 2);
      $xfer += $output->writeI64($this->exhibitionStartTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->exhibitionEndTime !== null) {
      $xfer += $output->writeFieldBegin('exhibitionEndTime', TType::I64, 3);
      $xfer += $output->writeI64($this->exhibitionEndTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->vipAccessLevel !== null) {
      $xfer += $output->writeFieldBegin('vipAccessLevel', TType::I32, 4);
      $xfer += $output->writeI32($this->vipAccessLevel);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->activityIcon !== null) {
      $xfer += $output->writeFieldBegin('activityIcon', TType::STRING, 5);
      $xfer += $output->writeString($this->activityIcon);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->exhibitionURL !== null) {
      $xfer += $output->writeFieldBegin('exhibitionURL', TType::STRING, 6);
      $xfer += $output->writeString($this->exhibitionURL);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetActivityListRequest {
  static $_TSPEC;

  public $pageId = null;
  public $limit = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'pageId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'limit',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['pageId'])) {
        $this->pageId = $vals['pageId'];
      }
      if (isset($vals['limit'])) {
        $this->limit = $vals['limit'];
      }
    }
  }

  public function getName() {
    return 'GetActivityListRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->pageId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->limit);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetActivityListRequest');
    if ($this->pageId !== null) {
      $xfer += $output->writeFieldBegin('pageId', TType::I32, 1);
      $xfer += $output->writeI32($this->pageId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->limit !== null) {
      $xfer += $output->writeFieldBegin('limit', TType::I32, 2);
      $xfer += $output->writeI32($this->limit);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetActivityListResponse {
  static $_TSPEC;

  public $activityList = null;
  public $totalNum = null;
  public $error = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'activityList',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'ActivityAll',
            ),
          ),
        2 => array(
          'var' => 'totalNum',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'error',
          'type' => TType::STRUCT,
          'class' => 'ExceptionDes',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['activityList'])) {
        $this->activityList = $vals['activityList'];
      }
      if (isset($vals['totalNum'])) {
        $this->totalNum = $vals['totalNum'];
      }
      if (isset($vals['error'])) {
        $this->error = $vals['error'];
      }
    }
  }

  public function getName() {
    return 'GetActivityListResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->activityList = array();
            $_size77 = 0;
            $_etype80 = 0;
            $xfer += $input->readListBegin($_etype80, $_size77);
            for ($_i81 = 0; $_i81 < $_size77; ++$_i81)
            {
              $elem82 = null;
              $elem82 = new ActivityAll();
              $xfer += $elem82->read($input);
              $this->activityList []= $elem82;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->totalNum);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->error = new ExceptionDes();
            $xfer += $this->error->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetActivityListResponse');
    if ($this->activityList !== null) {
      if (!is_array($this->activityList)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('activityList', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->activityList));
        {
          foreach ($this->activityList as $iter83)
          {
            $xfer += $iter83->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->totalNum !== null) {
      $xfer += $output->writeFieldBegin('totalNum', TType::I32, 2);
      $xfer += $output->writeI32($this->totalNum);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->error !== null) {
      if (!is_object($this->error)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('error', TType::STRUCT, 3);
      $xfer += $this->error->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class DelActivityRequest {
  static $_TSPEC;

  public $acitivityId = null;
  public $activityType = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'acitivityId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'activityType',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['acitivityId'])) {
        $this->acitivityId = $vals['acitivityId'];
      }
      if (isset($vals['activityType'])) {
        $this->activityType = $vals['activityType'];
      }
    }
  }

  public function getName() {
    return 'DelActivityRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->acitivityId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->activityType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('DelActivityRequest');
    if ($this->acitivityId !== null) {
      $xfer += $output->writeFieldBegin('acitivityId', TType::I32, 1);
      $xfer += $output->writeI32($this->acitivityId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->activityType !== null) {
      $xfer += $output->writeFieldBegin('activityType', TType::I32, 2);
      $xfer += $output->writeI32($this->activityType);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetActivityByIdRequest {
  static $_TSPEC;

  public $activityId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'activityId',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['activityId'])) {
        $this->activityId = $vals['activityId'];
      }
    }
  }

  public function getName() {
    return 'GetActivityByIdRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->activityId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetActivityByIdRequest');
    if ($this->activityId !== null) {
      $xfer += $output->writeFieldBegin('activityId', TType::I32, 1);
      $xfer += $output->writeI32($this->activityId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetActivityByIdResponse {
  static $_TSPEC;

  public $activity = null;
  public $error = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'activity',
          'type' => TType::STRUCT,
          'class' => 'ActivityAll',
          ),
        2 => array(
          'var' => 'error',
          'type' => TType::STRUCT,
          'class' => 'ExceptionDes',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['activity'])) {
        $this->activity = $vals['activity'];
      }
      if (isset($vals['error'])) {
        $this->error = $vals['error'];
      }
    }
  }

  public function getName() {
    return 'GetActivityByIdResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->activity = new ActivityAll();
            $xfer += $this->activity->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->error = new ExceptionDes();
            $xfer += $this->error->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetActivityByIdResponse');
    if ($this->activity !== null) {
      if (!is_object($this->activity)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('activity', TType::STRUCT, 1);
      $xfer += $this->activity->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->error !== null) {
      if (!is_object($this->error)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('error', TType::STRUCT, 2);
      $xfer += $this->error->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class JoinResult {
  static $_TSPEC;

  public $resCode = null;
  public $resMsg = null;
  public $error = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'resCode',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'resMsg',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'error',
          'type' => TType::STRUCT,
          'class' => 'ExceptionDes',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['resCode'])) {
        $this->resCode = $vals['resCode'];
      }
      if (isset($vals['resMsg'])) {
        $this->resMsg = $vals['resMsg'];
      }
      if (isset($vals['error'])) {
        $this->error = $vals['error'];
      }
    }
  }

  public function getName() {
    return 'JoinResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->resCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->resMsg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->error = new ExceptionDes();
            $xfer += $this->error->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('JoinResult');
    if ($this->resCode !== null) {
      $xfer += $output->writeFieldBegin('resCode', TType::I32, 1);
      $xfer += $output->writeI32($this->resCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->resMsg !== null) {
      $xfer += $output->writeFieldBegin('resMsg', TType::STRING, 2);
      $xfer += $output->writeString($this->resMsg);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->error !== null) {
      if (!is_object($this->error)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('error', TType::STRUCT, 3);
      $xfer += $this->error->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class QualifiedActivityResult {
  static $_TSPEC;

  public $isQualified = null;
  public $activityId = null;
  public $error = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'isQualified',
          'type' => TType::BOOL,
          ),
        2 => array(
          'var' => 'activityId',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'error',
          'type' => TType::STRUCT,
          'class' => 'ExceptionDes',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['isQualified'])) {
        $this->isQualified = $vals['isQualified'];
      }
      if (isset($vals['activityId'])) {
        $this->activityId = $vals['activityId'];
      }
      if (isset($vals['error'])) {
        $this->error = $vals['error'];
      }
    }
  }

  public function getName() {
    return 'QualifiedActivityResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->isQualified);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->activityId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->error = new ExceptionDes();
            $xfer += $this->error->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('QualifiedActivityResult');
    if ($this->isQualified !== null) {
      $xfer += $output->writeFieldBegin('isQualified', TType::BOOL, 1);
      $xfer += $output->writeBool($this->isQualified);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->activityId !== null) {
      $xfer += $output->writeFieldBegin('activityId', TType::I32, 2);
      $xfer += $output->writeI32($this->activityId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->error !== null) {
      if (!is_object($this->error)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('error', TType::STRUCT, 3);
      $xfer += $this->error->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class LotteryActivityValidTimeResponse {
  static $_TSPEC;

  public $startTime = null;
  public $endTime = null;
  public $error = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'startTime',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'endTime',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'error',
          'type' => TType::STRUCT,
          'class' => 'ExceptionDes',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['startTime'])) {
        $this->startTime = $vals['startTime'];
      }
      if (isset($vals['endTime'])) {
        $this->endTime = $vals['endTime'];
      }
      if (isset($vals['error'])) {
        $this->error = $vals['error'];
      }
    }
  }

  public function getName() {
    return 'LotteryActivityValidTimeResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->startTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->endTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->error = new ExceptionDes();
            $xfer += $this->error->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('LotteryActivityValidTimeResponse');
    if ($this->startTime !== null) {
      $xfer += $output->writeFieldBegin('startTime', TType::I64, 1);
      $xfer += $output->writeI64($this->startTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->endTime !== null) {
      $xfer += $output->writeFieldBegin('endTime', TType::I64, 2);
      $xfer += $output->writeI64($this->endTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->error !== null) {
      if (!is_object($this->error)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('error', TType::STRUCT, 3);
      $xfer += $this->error->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class LotteryIdRequest {
  static $_TSPEC;

  public $lotteryId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'lotteryId',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['lotteryId'])) {
        $this->lotteryId = $vals['lotteryId'];
      }
    }
  }

  public function getName() {
    return 'LotteryIdRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->lotteryId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('LotteryIdRequest');
    if ($this->lotteryId !== null) {
      $xfer += $output->writeFieldBegin('lotteryId', TType::I32, 1);
      $xfer += $output->writeI32($this->lotteryId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class StatisticalActivityInfo {
  static $_TSPEC;

  public $startTime = null;
  public $endTime = null;
  public $activityName = null;
  public $activityType = null;
  public $activityUsersCount = null;
  public $activityJoinTimes = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'startTime',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'endTime',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'activityName',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'activityType',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'activityUsersCount',
          'type' => TType::I64,
          ),
        6 => array(
          'var' => 'activityJoinTimes',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['startTime'])) {
        $this->startTime = $vals['startTime'];
      }
      if (isset($vals['endTime'])) {
        $this->endTime = $vals['endTime'];
      }
      if (isset($vals['activityName'])) {
        $this->activityName = $vals['activityName'];
      }
      if (isset($vals['activityType'])) {
        $this->activityType = $vals['activityType'];
      }
      if (isset($vals['activityUsersCount'])) {
        $this->activityUsersCount = $vals['activityUsersCount'];
      }
      if (isset($vals['activityJoinTimes'])) {
        $this->activityJoinTimes = $vals['activityJoinTimes'];
      }
    }
  }

  public function getName() {
    return 'StatisticalActivityInfo';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->startTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->endTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->activityName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->activityType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->activityUsersCount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->activityJoinTimes);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('StatisticalActivityInfo');
    if ($this->startTime !== null) {
      $xfer += $output->writeFieldBegin('startTime', TType::I64, 1);
      $xfer += $output->writeI64($this->startTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->endTime !== null) {
      $xfer += $output->writeFieldBegin('endTime', TType::I64, 2);
      $xfer += $output->writeI64($this->endTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->activityName !== null) {
      $xfer += $output->writeFieldBegin('activityName', TType::STRING, 3);
      $xfer += $output->writeString($this->activityName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->activityType !== null) {
      $xfer += $output->writeFieldBegin('activityType', TType::I32, 4);
      $xfer += $output->writeI32($this->activityType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->activityUsersCount !== null) {
      $xfer += $output->writeFieldBegin('activityUsersCount', TType::I64, 5);
      $xfer += $output->writeI64($this->activityUsersCount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->activityJoinTimes !== null) {
      $xfer += $output->writeFieldBegin('activityJoinTimes', TType::I64, 6);
      $xfer += $output->writeI64($this->activityJoinTimes);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class StatisticalResult {
  static $_TSPEC;

  public $statisticalActivityInfoList = null;
  public $error = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'statisticalActivityInfoList',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'StatisticalActivityInfo',
            ),
          ),
        2 => array(
          'var' => 'error',
          'type' => TType::STRUCT,
          'class' => 'ExceptionDes',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['statisticalActivityInfoList'])) {
        $this->statisticalActivityInfoList = $vals['statisticalActivityInfoList'];
      }
      if (isset($vals['error'])) {
        $this->error = $vals['error'];
      }
    }
  }

  public function getName() {
    return 'StatisticalResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->statisticalActivityInfoList = array();
            $_size84 = 0;
            $_etype87 = 0;
            $xfer += $input->readListBegin($_etype87, $_size84);
            for ($_i88 = 0; $_i88 < $_size84; ++$_i88)
            {
              $elem89 = null;
              $elem89 = new StatisticalActivityInfo();
              $xfer += $elem89->read($input);
              $this->statisticalActivityInfoList []= $elem89;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->error = new ExceptionDes();
            $xfer += $this->error->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('StatisticalResult');
    if ($this->statisticalActivityInfoList !== null) {
      if (!is_array($this->statisticalActivityInfoList)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('statisticalActivityInfoList', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->statisticalActivityInfoList));
        {
          foreach ($this->statisticalActivityInfoList as $iter90)
          {
            $xfer += $iter90->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->error !== null) {
      if (!is_object($this->error)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('error', TType::STRUCT, 2);
      $xfer += $this->error->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AccumulationRebateRuleRequest {
  static $_TSPEC;

  public $rules = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'rules',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'AccumulationRebateRule',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['rules'])) {
        $this->rules = $vals['rules'];
      }
    }
  }

  public function getName() {
    return 'AccumulationRebateRuleRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->rules = array();
            $_size91 = 0;
            $_etype94 = 0;
            $xfer += $input->readListBegin($_etype94, $_size91);
            for ($_i95 = 0; $_i95 < $_size91; ++$_i95)
            {
              $elem96 = null;
              $elem96 = new AccumulationRebateRule();
              $xfer += $elem96->read($input);
              $this->rules []= $elem96;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AccumulationRebateRuleRequest');
    if ($this->rules !== null) {
      if (!is_array($this->rules)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('rules', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->rules));
        {
          foreach ($this->rules as $iter97)
          {
            $xfer += $iter97->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OnceRebateRuleRequest {
  static $_TSPEC;

  public $rules = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'rules',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'OnceRebateRule',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['rules'])) {
        $this->rules = $vals['rules'];
      }
    }
  }

  public function getName() {
    return 'OnceRebateRuleRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->rules = array();
            $_size98 = 0;
            $_etype101 = 0;
            $xfer += $input->readListBegin($_etype101, $_size98);
            for ($_i102 = 0; $_i102 < $_size98; ++$_i102)
            {
              $elem103 = null;
              $elem103 = new OnceRebateRule();
              $xfer += $elem103->read($input);
              $this->rules []= $elem103;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OnceRebateRuleRequest');
    if ($this->rules !== null) {
      if (!is_array($this->rules)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('rules', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->rules));
        {
          foreach ($this->rules as $iter104)
          {
            $xfer += $iter104->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class RandomRebateRuleRequest {
  static $_TSPEC;

  public $rules = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'rules',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'RandomRebateRule',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['rules'])) {
        $this->rules = $vals['rules'];
      }
    }
  }

  public function getName() {
    return 'RandomRebateRuleRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->rules = array();
            $_size105 = 0;
            $_etype108 = 0;
            $xfer += $input->readListBegin($_etype108, $_size105);
            for ($_i109 = 0; $_i109 < $_size105; ++$_i109)
            {
              $elem110 = null;
              $elem110 = new RandomRebateRule();
              $xfer += $elem110->read($input);
              $this->rules []= $elem110;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('RandomRebateRuleRequest');
    if ($this->rules !== null) {
      if (!is_array($this->rules)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('rules', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->rules));
        {
          foreach ($this->rules as $iter111)
          {
            $xfer += $iter111->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

?>
