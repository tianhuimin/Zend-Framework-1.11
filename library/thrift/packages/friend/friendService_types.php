<?php
/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
include_once $GLOBALS['THRIFT_ROOT'].'/Thrift.php';


class thrift_FollowThrift {
  static $_TSPEC;

  public $relation = null;
  public $onLine = null;
  public $fid = null;
  public $remark = null;
  public $photoLocation = null;
  public $sex = null;
  public $age = null;
  public $nickName = null;
  public $city = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'relation',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'onLine',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'fid',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'remark',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'photoLocation',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'sex',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'age',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'nickName',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'city',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['relation'])) {
        $this->relation = $vals['relation'];
      }
      if (isset($vals['onLine'])) {
        $this->onLine = $vals['onLine'];
      }
      if (isset($vals['fid'])) {
        $this->fid = $vals['fid'];
      }
      if (isset($vals['remark'])) {
        $this->remark = $vals['remark'];
      }
      if (isset($vals['photoLocation'])) {
        $this->photoLocation = $vals['photoLocation'];
      }
      if (isset($vals['sex'])) {
        $this->sex = $vals['sex'];
      }
      if (isset($vals['age'])) {
        $this->age = $vals['age'];
      }
      if (isset($vals['nickName'])) {
        $this->nickName = $vals['nickName'];
      }
      if (isset($vals['city'])) {
        $this->city = $vals['city'];
      }
    }
  }

  public function getName() {
    return 'FollowThrift';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->relation);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->onLine);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->fid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->remark);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->photoLocation);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->sex);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->age);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->nickName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->city);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('FollowThrift');
    if ($this->relation !== null) {
      $xfer += $output->writeFieldBegin('relation', TType::I32, 1);
      $xfer += $output->writeI32($this->relation);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->onLine !== null) {
      $xfer += $output->writeFieldBegin('onLine', TType::I32, 2);
      $xfer += $output->writeI32($this->onLine);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->fid !== null) {
      $xfer += $output->writeFieldBegin('fid', TType::STRING, 3);
      $xfer += $output->writeString($this->fid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->remark !== null) {
      $xfer += $output->writeFieldBegin('remark', TType::STRING, 4);
      $xfer += $output->writeString($this->remark);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->photoLocation !== null) {
      $xfer += $output->writeFieldBegin('photoLocation', TType::STRING, 5);
      $xfer += $output->writeString($this->photoLocation);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sex !== null) {
      $xfer += $output->writeFieldBegin('sex', TType::I32, 6);
      $xfer += $output->writeI32($this->sex);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->age !== null) {
      $xfer += $output->writeFieldBegin('age', TType::I32, 7);
      $xfer += $output->writeI32($this->age);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->nickName !== null) {
      $xfer += $output->writeFieldBegin('nickName', TType::STRING, 8);
      $xfer += $output->writeString($this->nickName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->city !== null) {
      $xfer += $output->writeFieldBegin('city', TType::STRING, 9);
      $xfer += $output->writeString($this->city);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class thrift_FansThrift {
  static $_TSPEC;

  public $relation = null;
  public $onLine = null;
  public $fid = null;
  public $remark = null;
  public $photoLocation = null;
  public $sex = null;
  public $age = null;
  public $nickName = null;
  public $city = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'relation',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'onLine',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'fid',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'remark',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'photoLocation',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'sex',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'age',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'nickName',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'city',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['relation'])) {
        $this->relation = $vals['relation'];
      }
      if (isset($vals['onLine'])) {
        $this->onLine = $vals['onLine'];
      }
      if (isset($vals['fid'])) {
        $this->fid = $vals['fid'];
      }
      if (isset($vals['remark'])) {
        $this->remark = $vals['remark'];
      }
      if (isset($vals['photoLocation'])) {
        $this->photoLocation = $vals['photoLocation'];
      }
      if (isset($vals['sex'])) {
        $this->sex = $vals['sex'];
      }
      if (isset($vals['age'])) {
        $this->age = $vals['age'];
      }
      if (isset($vals['nickName'])) {
        $this->nickName = $vals['nickName'];
      }
      if (isset($vals['city'])) {
        $this->city = $vals['city'];
      }
    }
  }

  public function getName() {
    return 'FansThrift';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->relation);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->onLine);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->fid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->remark);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->photoLocation);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->sex);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->age);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->nickName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->city);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('FansThrift');
    if ($this->relation !== null) {
      $xfer += $output->writeFieldBegin('relation', TType::I32, 1);
      $xfer += $output->writeI32($this->relation);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->onLine !== null) {
      $xfer += $output->writeFieldBegin('onLine', TType::I32, 2);
      $xfer += $output->writeI32($this->onLine);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->fid !== null) {
      $xfer += $output->writeFieldBegin('fid', TType::STRING, 3);
      $xfer += $output->writeString($this->fid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->remark !== null) {
      $xfer += $output->writeFieldBegin('remark', TType::STRING, 4);
      $xfer += $output->writeString($this->remark);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->photoLocation !== null) {
      $xfer += $output->writeFieldBegin('photoLocation', TType::STRING, 5);
      $xfer += $output->writeString($this->photoLocation);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sex !== null) {
      $xfer += $output->writeFieldBegin('sex', TType::I32, 6);
      $xfer += $output->writeI32($this->sex);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->age !== null) {
      $xfer += $output->writeFieldBegin('age', TType::I32, 7);
      $xfer += $output->writeI32($this->age);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->nickName !== null) {
      $xfer += $output->writeFieldBegin('nickName', TType::STRING, 8);
      $xfer += $output->writeString($this->nickName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->city !== null) {
      $xfer += $output->writeFieldBegin('city', TType::STRING, 9);
      $xfer += $output->writeString($this->city);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class thrift_FollowFansCountThrift {
  static $_TSPEC;

  public $followCount = null;
  public $doubleFollowCount = null;
  public $fansCount = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'followCount',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'doubleFollowCount',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'fansCount',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['followCount'])) {
        $this->followCount = $vals['followCount'];
      }
      if (isset($vals['doubleFollowCount'])) {
        $this->doubleFollowCount = $vals['doubleFollowCount'];
      }
      if (isset($vals['fansCount'])) {
        $this->fansCount = $vals['fansCount'];
      }
    }
  }

  public function getName() {
    return 'FollowFansCountThrift';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->followCount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->doubleFollowCount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->fansCount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('FollowFansCountThrift');
    if ($this->followCount !== null) {
      $xfer += $output->writeFieldBegin('followCount', TType::I64, 1);
      $xfer += $output->writeI64($this->followCount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->doubleFollowCount !== null) {
      $xfer += $output->writeFieldBegin('doubleFollowCount', TType::I64, 2);
      $xfer += $output->writeI64($this->doubleFollowCount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->fansCount !== null) {
      $xfer += $output->writeFieldBegin('fansCount', TType::I64, 3);
      $xfer += $output->writeI64($this->fansCount);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

?>
