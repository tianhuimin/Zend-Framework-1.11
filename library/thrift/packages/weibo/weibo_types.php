<?php
/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
include_once $GLOBALS['THRIFT_ROOT'].'/Thrift.php';


class weibo_WeiboResult {
  static $_TSPEC;

  public $isSuccess = null;
  public $code = null;
  public $id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'isSuccess',
          'type' => TType::BOOL,
          ),
        2 => array(
          'var' => 'code',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'id',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['isSuccess'])) {
        $this->isSuccess = $vals['isSuccess'];
      }
      if (isset($vals['code'])) {
        $this->code = $vals['code'];
      }
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
    }
  }

  public function getName() {
    return 'WeiboResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->isSuccess);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('WeiboResult');
    if ($this->isSuccess !== null) {
      $xfer += $output->writeFieldBegin('isSuccess', TType::BOOL, 1);
      $xfer += $output->writeBool($this->isSuccess);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->code !== null) {
      $xfer += $output->writeFieldBegin('code', TType::I32, 2);
      $xfer += $output->writeI32($this->code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::STRING, 3);
      $xfer += $output->writeString($this->id);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class weibo_ContentElement {
  static $_TSPEC;

  public $tid = null;
  public $isVisible = null;
  public $content = null;
  public $userId = null;
  public $nickName = null;
  public $realDesc = null;
  public $replyNum = null;
  public $forwardNum = null;
  public $createTime = null;
  public $source = null;
  public $resourceId = null;
  public $refisVisible = null;
  public $refTid = null;
  public $refContent = null;
  public $refUserId = null;
  public $refNickName = null;
  public $refReplyNum = null;
  public $refForwardNum = null;
  public $refCreateTime = null;
  public $refRealDesc = null;
  public $smallpic = null;
  public $bigpic = null;
  public $refSource = null;
  public $refResourceId = null;
  public $photo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'tid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'isVisible',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'content',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'userId',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'nickName',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'realDesc',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'replyNum',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'forwardNum',
          'type' => TType::I32,
          ),
        9 => array(
          'var' => 'createTime',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'source',
          'type' => TType::I32,
          ),
        11 => array(
          'var' => 'resourceId',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'refisVisible',
          'type' => TType::I32,
          ),
        13 => array(
          'var' => 'refTid',
          'type' => TType::STRING,
          ),
        14 => array(
          'var' => 'refContent',
          'type' => TType::STRING,
          ),
        15 => array(
          'var' => 'refUserId',
          'type' => TType::I32,
          ),
        16 => array(
          'var' => 'refNickName',
          'type' => TType::STRING,
          ),
        17 => array(
          'var' => 'refReplyNum',
          'type' => TType::I32,
          ),
        18 => array(
          'var' => 'refForwardNum',
          'type' => TType::I32,
          ),
        19 => array(
          'var' => 'refCreateTime',
          'type' => TType::STRING,
          ),
        20 => array(
          'var' => 'refRealDesc',
          'type' => TType::STRING,
          ),
        21 => array(
          'var' => 'smallpic',
          'type' => TType::STRING,
          ),
        22 => array(
          'var' => 'bigpic',
          'type' => TType::STRING,
          ),
        23 => array(
          'var' => 'refSource',
          'type' => TType::I32,
          ),
        24 => array(
          'var' => 'refResourceId',
          'type' => TType::STRING,
          ),
        25 => array(
          'var' => 'photo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['tid'])) {
        $this->tid = $vals['tid'];
      }
      if (isset($vals['isVisible'])) {
        $this->isVisible = $vals['isVisible'];
      }
      if (isset($vals['content'])) {
        $this->content = $vals['content'];
      }
      if (isset($vals['userId'])) {
        $this->userId = $vals['userId'];
      }
      if (isset($vals['nickName'])) {
        $this->nickName = $vals['nickName'];
      }
      if (isset($vals['realDesc'])) {
        $this->realDesc = $vals['realDesc'];
      }
      if (isset($vals['replyNum'])) {
        $this->replyNum = $vals['replyNum'];
      }
      if (isset($vals['forwardNum'])) {
        $this->forwardNum = $vals['forwardNum'];
      }
      if (isset($vals['createTime'])) {
        $this->createTime = $vals['createTime'];
      }
      if (isset($vals['source'])) {
        $this->source = $vals['source'];
      }
      if (isset($vals['resourceId'])) {
        $this->resourceId = $vals['resourceId'];
      }
      if (isset($vals['refisVisible'])) {
        $this->refisVisible = $vals['refisVisible'];
      }
      if (isset($vals['refTid'])) {
        $this->refTid = $vals['refTid'];
      }
      if (isset($vals['refContent'])) {
        $this->refContent = $vals['refContent'];
      }
      if (isset($vals['refUserId'])) {
        $this->refUserId = $vals['refUserId'];
      }
      if (isset($vals['refNickName'])) {
        $this->refNickName = $vals['refNickName'];
      }
      if (isset($vals['refReplyNum'])) {
        $this->refReplyNum = $vals['refReplyNum'];
      }
      if (isset($vals['refForwardNum'])) {
        $this->refForwardNum = $vals['refForwardNum'];
      }
      if (isset($vals['refCreateTime'])) {
        $this->refCreateTime = $vals['refCreateTime'];
      }
      if (isset($vals['refRealDesc'])) {
        $this->refRealDesc = $vals['refRealDesc'];
      }
      if (isset($vals['smallpic'])) {
        $this->smallpic = $vals['smallpic'];
      }
      if (isset($vals['bigpic'])) {
        $this->bigpic = $vals['bigpic'];
      }
      if (isset($vals['refSource'])) {
        $this->refSource = $vals['refSource'];
      }
      if (isset($vals['refResourceId'])) {
        $this->refResourceId = $vals['refResourceId'];
      }
      if (isset($vals['photo'])) {
        $this->photo = $vals['photo'];
      }
    }
  }

  public function getName() {
    return 'ContentElement';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->isVisible);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->content);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->userId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->nickName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->realDesc);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->replyNum);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->forwardNum);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->createTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->source);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->resourceId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->refisVisible);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->refTid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->refContent);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->refUserId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->refNickName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->refReplyNum);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 18:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->refForwardNum);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 19:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->refCreateTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 20:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->refRealDesc);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 21:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->smallpic);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 22:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->bigpic);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 23:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->refSource);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 24:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->refResourceId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 25:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->photo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ContentElement');
    if ($this->tid !== null) {
      $xfer += $output->writeFieldBegin('tid', TType::STRING, 1);
      $xfer += $output->writeString($this->tid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->isVisible !== null) {
      $xfer += $output->writeFieldBegin('isVisible', TType::I32, 2);
      $xfer += $output->writeI32($this->isVisible);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->content !== null) {
      $xfer += $output->writeFieldBegin('content', TType::STRING, 3);
      $xfer += $output->writeString($this->content);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userId !== null) {
      $xfer += $output->writeFieldBegin('userId', TType::I32, 4);
      $xfer += $output->writeI32($this->userId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->nickName !== null) {
      $xfer += $output->writeFieldBegin('nickName', TType::STRING, 5);
      $xfer += $output->writeString($this->nickName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->realDesc !== null) {
      $xfer += $output->writeFieldBegin('realDesc', TType::STRING, 6);
      $xfer += $output->writeString($this->realDesc);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->replyNum !== null) {
      $xfer += $output->writeFieldBegin('replyNum', TType::I32, 7);
      $xfer += $output->writeI32($this->replyNum);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->forwardNum !== null) {
      $xfer += $output->writeFieldBegin('forwardNum', TType::I32, 8);
      $xfer += $output->writeI32($this->forwardNum);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->createTime !== null) {
      $xfer += $output->writeFieldBegin('createTime', TType::STRING, 9);
      $xfer += $output->writeString($this->createTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->source !== null) {
      $xfer += $output->writeFieldBegin('source', TType::I32, 10);
      $xfer += $output->writeI32($this->source);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->resourceId !== null) {
      $xfer += $output->writeFieldBegin('resourceId', TType::STRING, 11);
      $xfer += $output->writeString($this->resourceId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->refisVisible !== null) {
      $xfer += $output->writeFieldBegin('refisVisible', TType::I32, 12);
      $xfer += $output->writeI32($this->refisVisible);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->refTid !== null) {
      $xfer += $output->writeFieldBegin('refTid', TType::STRING, 13);
      $xfer += $output->writeString($this->refTid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->refContent !== null) {
      $xfer += $output->writeFieldBegin('refContent', TType::STRING, 14);
      $xfer += $output->writeString($this->refContent);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->refUserId !== null) {
      $xfer += $output->writeFieldBegin('refUserId', TType::I32, 15);
      $xfer += $output->writeI32($this->refUserId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->refNickName !== null) {
      $xfer += $output->writeFieldBegin('refNickName', TType::STRING, 16);
      $xfer += $output->writeString($this->refNickName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->refReplyNum !== null) {
      $xfer += $output->writeFieldBegin('refReplyNum', TType::I32, 17);
      $xfer += $output->writeI32($this->refReplyNum);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->refForwardNum !== null) {
      $xfer += $output->writeFieldBegin('refForwardNum', TType::I32, 18);
      $xfer += $output->writeI32($this->refForwardNum);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->refCreateTime !== null) {
      $xfer += $output->writeFieldBegin('refCreateTime', TType::STRING, 19);
      $xfer += $output->writeString($this->refCreateTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->refRealDesc !== null) {
      $xfer += $output->writeFieldBegin('refRealDesc', TType::STRING, 20);
      $xfer += $output->writeString($this->refRealDesc);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->smallpic !== null) {
      $xfer += $output->writeFieldBegin('smallpic', TType::STRING, 21);
      $xfer += $output->writeString($this->smallpic);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->bigpic !== null) {
      $xfer += $output->writeFieldBegin('bigpic', TType::STRING, 22);
      $xfer += $output->writeString($this->bigpic);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->refSource !== null) {
      $xfer += $output->writeFieldBegin('refSource', TType::I32, 23);
      $xfer += $output->writeI32($this->refSource);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->refResourceId !== null) {
      $xfer += $output->writeFieldBegin('refResourceId', TType::STRING, 24);
      $xfer += $output->writeString($this->refResourceId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->photo !== null) {
      $xfer += $output->writeFieldBegin('photo', TType::STRING, 25);
      $xfer += $output->writeString($this->photo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class weibo_ContentElements {
  static $_TSPEC;

  public $elements = null;
  public $count = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'elements',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'weibo_ContentElement',
            ),
          ),
        2 => array(
          'var' => 'count',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['elements'])) {
        $this->elements = $vals['elements'];
      }
      if (isset($vals['count'])) {
        $this->count = $vals['count'];
      }
    }
  }

  public function getName() {
    return 'ContentElements';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->elements = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readListBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $elem5 = new weibo_ContentElement();
              $xfer += $elem5->read($input);
              $this->elements []= $elem5;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->count);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ContentElements');
    if ($this->elements !== null) {
      if (!is_array($this->elements)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('elements', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->elements));
        {
          foreach ($this->elements as $iter6)
          {
            $xfer += $iter6->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->count !== null) {
      $xfer += $output->writeFieldBegin('count', TType::I32, 2);
      $xfer += $output->writeI32($this->count);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class weibo_TopicElements {
  static $_TSPEC;

  public $elements = null;
  public $count = null;
  public $kid = null;
  public $title = null;
  public $lastUpdatetime = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'elements',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'weibo_ContentElement',
            ),
          ),
        2 => array(
          'var' => 'count',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'kid',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'title',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'lastUpdatetime',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['elements'])) {
        $this->elements = $vals['elements'];
      }
      if (isset($vals['count'])) {
        $this->count = $vals['count'];
      }
      if (isset($vals['kid'])) {
        $this->kid = $vals['kid'];
      }
      if (isset($vals['title'])) {
        $this->title = $vals['title'];
      }
      if (isset($vals['lastUpdatetime'])) {
        $this->lastUpdatetime = $vals['lastUpdatetime'];
      }
    }
  }

  public function getName() {
    return 'TopicElements';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->elements = array();
            $_size7 = 0;
            $_etype10 = 0;
            $xfer += $input->readListBegin($_etype10, $_size7);
            for ($_i11 = 0; $_i11 < $_size7; ++$_i11)
            {
              $elem12 = null;
              $elem12 = new weibo_ContentElement();
              $xfer += $elem12->read($input);
              $this->elements []= $elem12;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->count);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->kid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->title);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->lastUpdatetime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopicElements');
    if ($this->elements !== null) {
      if (!is_array($this->elements)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('elements', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->elements));
        {
          foreach ($this->elements as $iter13)
          {
            $xfer += $iter13->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->count !== null) {
      $xfer += $output->writeFieldBegin('count', TType::I32, 2);
      $xfer += $output->writeI32($this->count);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->kid !== null) {
      $xfer += $output->writeFieldBegin('kid', TType::I64, 3);
      $xfer += $output->writeI64($this->kid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->title !== null) {
      $xfer += $output->writeFieldBegin('title', TType::STRING, 4);
      $xfer += $output->writeString($this->title);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lastUpdatetime !== null) {
      $xfer += $output->writeFieldBegin('lastUpdatetime', TType::STRING, 5);
      $xfer += $output->writeString($this->lastUpdatetime);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class weibo_Topic {
  static $_TSPEC;

  public $kid = null;
  public $title = null;
  public $lastUpdatetime = null;
  public $total = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'kid',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'title',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'lastUpdatetime',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'total',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['kid'])) {
        $this->kid = $vals['kid'];
      }
      if (isset($vals['title'])) {
        $this->title = $vals['title'];
      }
      if (isset($vals['lastUpdatetime'])) {
        $this->lastUpdatetime = $vals['lastUpdatetime'];
      }
      if (isset($vals['total'])) {
        $this->total = $vals['total'];
      }
    }
  }

  public function getName() {
    return 'Topic';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->kid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->title);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->lastUpdatetime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->total);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Topic');
    if ($this->kid !== null) {
      $xfer += $output->writeFieldBegin('kid', TType::I64, 1);
      $xfer += $output->writeI64($this->kid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->title !== null) {
      $xfer += $output->writeFieldBegin('title', TType::STRING, 2);
      $xfer += $output->writeString($this->title);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lastUpdatetime !== null) {
      $xfer += $output->writeFieldBegin('lastUpdatetime', TType::STRING, 3);
      $xfer += $output->writeString($this->lastUpdatetime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->total !== null) {
      $xfer += $output->writeFieldBegin('total', TType::I32, 4);
      $xfer += $output->writeI32($this->total);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class weibo_TopicList {
  static $_TSPEC;

  public $elements = null;
  public $count = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'elements',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'weibo_Topic',
            ),
          ),
        2 => array(
          'var' => 'count',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['elements'])) {
        $this->elements = $vals['elements'];
      }
      if (isset($vals['count'])) {
        $this->count = $vals['count'];
      }
    }
  }

  public function getName() {
    return 'TopicList';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->elements = array();
            $_size14 = 0;
            $_etype17 = 0;
            $xfer += $input->readListBegin($_etype17, $_size14);
            for ($_i18 = 0; $_i18 < $_size14; ++$_i18)
            {
              $elem19 = null;
              $elem19 = new weibo_Topic();
              $xfer += $elem19->read($input);
              $this->elements []= $elem19;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->count);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopicList');
    if ($this->elements !== null) {
      if (!is_array($this->elements)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('elements', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->elements));
        {
          foreach ($this->elements as $iter20)
          {
            $xfer += $iter20->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->count !== null) {
      $xfer += $output->writeFieldBegin('count', TType::I32, 2);
      $xfer += $output->writeI32($this->count);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class weibo_CommentElement {
  static $_TSPEC;

  public $userId = null;
  public $nickName = null;
  public $realDesc = null;
  public $commentId = null;
  public $content = null;
  public $createTime = null;
  public $photo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'userId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'nickName',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'realDesc',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'commentId',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'content',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'createTime',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'photo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['userId'])) {
        $this->userId = $vals['userId'];
      }
      if (isset($vals['nickName'])) {
        $this->nickName = $vals['nickName'];
      }
      if (isset($vals['realDesc'])) {
        $this->realDesc = $vals['realDesc'];
      }
      if (isset($vals['commentId'])) {
        $this->commentId = $vals['commentId'];
      }
      if (isset($vals['content'])) {
        $this->content = $vals['content'];
      }
      if (isset($vals['createTime'])) {
        $this->createTime = $vals['createTime'];
      }
      if (isset($vals['photo'])) {
        $this->photo = $vals['photo'];
      }
    }
  }

  public function getName() {
    return 'CommentElement';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->userId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->nickName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->realDesc);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->commentId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->content);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->createTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->photo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CommentElement');
    if ($this->userId !== null) {
      $xfer += $output->writeFieldBegin('userId', TType::I32, 1);
      $xfer += $output->writeI32($this->userId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->nickName !== null) {
      $xfer += $output->writeFieldBegin('nickName', TType::STRING, 2);
      $xfer += $output->writeString($this->nickName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->realDesc !== null) {
      $xfer += $output->writeFieldBegin('realDesc', TType::STRING, 3);
      $xfer += $output->writeString($this->realDesc);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->commentId !== null) {
      $xfer += $output->writeFieldBegin('commentId', TType::I64, 4);
      $xfer += $output->writeI64($this->commentId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->content !== null) {
      $xfer += $output->writeFieldBegin('content', TType::STRING, 5);
      $xfer += $output->writeString($this->content);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->createTime !== null) {
      $xfer += $output->writeFieldBegin('createTime', TType::STRING, 6);
      $xfer += $output->writeString($this->createTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->photo !== null) {
      $xfer += $output->writeFieldBegin('photo', TType::STRING, 7);
      $xfer += $output->writeString($this->photo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class weibo_CommentElements {
  static $_TSPEC;

  public $elements = null;
  public $count = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'elements',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'weibo_CommentElement',
            ),
          ),
        2 => array(
          'var' => 'count',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['elements'])) {
        $this->elements = $vals['elements'];
      }
      if (isset($vals['count'])) {
        $this->count = $vals['count'];
      }
    }
  }

  public function getName() {
    return 'CommentElements';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->elements = array();
            $_size21 = 0;
            $_etype24 = 0;
            $xfer += $input->readListBegin($_etype24, $_size21);
            for ($_i25 = 0; $_i25 < $_size21; ++$_i25)
            {
              $elem26 = null;
              $elem26 = new weibo_CommentElement();
              $xfer += $elem26->read($input);
              $this->elements []= $elem26;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->count);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CommentElements');
    if ($this->elements !== null) {
      if (!is_array($this->elements)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('elements', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->elements));
        {
          foreach ($this->elements as $iter27)
          {
            $xfer += $iter27->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->count !== null) {
      $xfer += $output->writeFieldBegin('count', TType::I32, 2);
      $xfer += $output->writeI32($this->count);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class weibo_TransmitElement {
  static $_TSPEC;

  public $refTid = null;
  public $tid = null;
  public $userId = null;
  public $createTime = null;
  public $nickName = null;
  public $content = null;
  public $photo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'refTid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'tid',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'userId',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'createTime',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'nickName',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'content',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'photo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['refTid'])) {
        $this->refTid = $vals['refTid'];
      }
      if (isset($vals['tid'])) {
        $this->tid = $vals['tid'];
      }
      if (isset($vals['userId'])) {
        $this->userId = $vals['userId'];
      }
      if (isset($vals['createTime'])) {
        $this->createTime = $vals['createTime'];
      }
      if (isset($vals['nickName'])) {
        $this->nickName = $vals['nickName'];
      }
      if (isset($vals['content'])) {
        $this->content = $vals['content'];
      }
      if (isset($vals['photo'])) {
        $this->photo = $vals['photo'];
      }
    }
  }

  public function getName() {
    return 'TransmitElement';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->refTid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->userId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->createTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->nickName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->content);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->photo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TransmitElement');
    if ($this->refTid !== null) {
      $xfer += $output->writeFieldBegin('refTid', TType::STRING, 1);
      $xfer += $output->writeString($this->refTid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tid !== null) {
      $xfer += $output->writeFieldBegin('tid', TType::STRING, 2);
      $xfer += $output->writeString($this->tid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userId !== null) {
      $xfer += $output->writeFieldBegin('userId', TType::I32, 3);
      $xfer += $output->writeI32($this->userId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->createTime !== null) {
      $xfer += $output->writeFieldBegin('createTime', TType::STRING, 4);
      $xfer += $output->writeString($this->createTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->nickName !== null) {
      $xfer += $output->writeFieldBegin('nickName', TType::STRING, 5);
      $xfer += $output->writeString($this->nickName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->content !== null) {
      $xfer += $output->writeFieldBegin('content', TType::STRING, 6);
      $xfer += $output->writeString($this->content);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->photo !== null) {
      $xfer += $output->writeFieldBegin('photo', TType::STRING, 7);
      $xfer += $output->writeString($this->photo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class weibo_TransmitElements {
  static $_TSPEC;

  public $elements = null;
  public $count = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'elements',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'weibo_TransmitElement',
            ),
          ),
        2 => array(
          'var' => 'count',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['elements'])) {
        $this->elements = $vals['elements'];
      }
      if (isset($vals['count'])) {
        $this->count = $vals['count'];
      }
    }
  }

  public function getName() {
    return 'TransmitElements';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->elements = array();
            $_size28 = 0;
            $_etype31 = 0;
            $xfer += $input->readListBegin($_etype31, $_size28);
            for ($_i32 = 0; $_i32 < $_size28; ++$_i32)
            {
              $elem33 = null;
              $elem33 = new weibo_TransmitElement();
              $xfer += $elem33->read($input);
              $this->elements []= $elem33;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->count);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TransmitElements');
    if ($this->elements !== null) {
      if (!is_array($this->elements)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('elements', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->elements));
        {
          foreach ($this->elements as $iter34)
          {
            $xfer += $iter34->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->count !== null) {
      $xfer += $output->writeFieldBegin('count', TType::I32, 2);
      $xfer += $output->writeI32($this->count);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

?>
