<?php
/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
include_once $GLOBALS['THRIFT_ROOT'].'/Thrift.php';

include_once $GLOBALS['THRIFT_ROOT'].'/packages/common/common_types.php';

$GLOBALS['E_PropType'] = array(
  'VOUCHER_TYPE' => 1,
  'CHARGE_CARD_TYPE' => 2,
  'LOTTERY_CARD_TYPE' => 3,
  'PACKAGE_TYPE' => 4,
  'REAL_ITEM_TYPE' => 5,
);

final class PropType {
  const VOUCHER_TYPE = 1;
  const CHARGE_CARD_TYPE = 2;
  const LOTTERY_CARD_TYPE = 3;
  const PACKAGE_TYPE = 4;
  const REAL_ITEM_TYPE = 5;
  static public $__names = array(
    1 => 'VOUCHER_TYPE',
    2 => 'CHARGE_CARD_TYPE',
    3 => 'LOTTERY_CARD_TYPE',
    4 => 'PACKAGE_TYPE',
    5 => 'REAL_ITEM_TYPE',
  );
}

$GLOBALS['E_UseType'] = array(
  'COMMODITY_TYPE' => 1,
  'LOTTERY_TYPE' => 2,
  'MESSAGE_TYPE' => 3,
);

final class UseType {
  const COMMODITY_TYPE = 1;
  const LOTTERY_TYPE = 2;
  const MESSAGE_TYPE = 3;
  static public $__names = array(
    1 => 'COMMODITY_TYPE',
    2 => 'LOTTERY_TYPE',
    3 => 'MESSAGE_TYPE',
  );
}

$GLOBALS['E_CommodityListType'] = array(
  'COMMON_TYPE' => 1,
  'RECOMMEND_TYPE' => 2,
  'VIP_TYPE' => 3,
);

final class CommodityListType {
  const COMMON_TYPE = 1;
  const RECOMMEND_TYPE = 2;
  const VIP_TYPE = 3;
  static public $__names = array(
    1 => 'COMMON_TYPE',
    2 => 'RECOMMEND_TYPE',
    3 => 'VIP_TYPE',
  );
}

class WeightData {
  static $_TSPEC;

  public $vip = null;
  public $value = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'vip',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'value',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['vip'])) {
        $this->vip = $vals['vip'];
      }
      if (isset($vals['value'])) {
        $this->value = $vals['value'];
      }
    }
  }

  public function getName() {
    return 'WeightData';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->vip);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->value);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('WeightData');
    if ($this->vip !== null) {
      $xfer += $output->writeFieldBegin('vip', TType::I32, 1);
      $xfer += $output->writeI32($this->vip);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->value !== null) {
      $xfer += $output->writeFieldBegin('value', TType::I32, 2);
      $xfer += $output->writeI32($this->value);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AddCommodityRequest {
  static $_TSPEC;

  public $commodityName = null;
  public $commodityIcon = null;
  public $commodityIntro = null;
  public $commodityPhoto = null;
  public $commodityPrice = null;
  public $commodityStock = null;
  public $vipLevel = null;
  public $userBindFlag = null;
  public $beginTime = null;
  public $endTime = null;
  public $expireDay = null;
  public $commodityDiscount = null;
  public $commodityType = null;
  public $recommendFlag = null;
  public $onShelf = null;
  public $commoditySales = null;
  public $related_gameid = null;
  public $recommendIds = null;
  public $buyCount = null;
  public $remainTimeShow = null;
  public $remainStockShow = null;
  public $priceList = null;
  public $countList = null;
  public $propId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'commodityName',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'commodityIcon',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'commodityIntro',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'commodityPhoto',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'commodityPrice',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'commodityStock',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'vipLevel',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'userBindFlag',
          'type' => TType::I32,
          ),
        9 => array(
          'var' => 'beginTime',
          'type' => TType::I64,
          ),
        10 => array(
          'var' => 'endTime',
          'type' => TType::I64,
          ),
        11 => array(
          'var' => 'expireDay',
          'type' => TType::I32,
          ),
        12 => array(
          'var' => 'commodityDiscount',
          'type' => TType::DOUBLE,
          ),
        13 => array(
          'var' => 'commodityType',
          'type' => TType::I32,
          ),
        14 => array(
          'var' => 'recommendFlag',
          'type' => TType::I32,
          ),
        15 => array(
          'var' => 'onShelf',
          'type' => TType::I32,
          ),
        16 => array(
          'var' => 'commoditySales',
          'type' => TType::I32,
          ),
        17 => array(
          'var' => 'related_gameid',
          'type' => TType::I32,
          ),
        18 => array(
          'var' => 'recommendIds',
          'type' => TType::STRING,
          ),
        19 => array(
          'var' => 'buyCount',
          'type' => TType::I32,
          ),
        20 => array(
          'var' => 'remainTimeShow',
          'type' => TType::I64,
          ),
        21 => array(
          'var' => 'remainStockShow',
          'type' => TType::I32,
          ),
        22 => array(
          'var' => 'priceList',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'WeightData',
            ),
          ),
        23 => array(
          'var' => 'countList',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'WeightData',
            ),
          ),
        24 => array(
          'var' => 'propId',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['commodityName'])) {
        $this->commodityName = $vals['commodityName'];
      }
      if (isset($vals['commodityIcon'])) {
        $this->commodityIcon = $vals['commodityIcon'];
      }
      if (isset($vals['commodityIntro'])) {
        $this->commodityIntro = $vals['commodityIntro'];
      }
      if (isset($vals['commodityPhoto'])) {
        $this->commodityPhoto = $vals['commodityPhoto'];
      }
      if (isset($vals['commodityPrice'])) {
        $this->commodityPrice = $vals['commodityPrice'];
      }
      if (isset($vals['commodityStock'])) {
        $this->commodityStock = $vals['commodityStock'];
      }
      if (isset($vals['vipLevel'])) {
        $this->vipLevel = $vals['vipLevel'];
      }
      if (isset($vals['userBindFlag'])) {
        $this->userBindFlag = $vals['userBindFlag'];
      }
      if (isset($vals['beginTime'])) {
        $this->beginTime = $vals['beginTime'];
      }
      if (isset($vals['endTime'])) {
        $this->endTime = $vals['endTime'];
      }
      if (isset($vals['expireDay'])) {
        $this->expireDay = $vals['expireDay'];
      }
      if (isset($vals['commodityDiscount'])) {
        $this->commodityDiscount = $vals['commodityDiscount'];
      }
      if (isset($vals['commodityType'])) {
        $this->commodityType = $vals['commodityType'];
      }
      if (isset($vals['recommendFlag'])) {
        $this->recommendFlag = $vals['recommendFlag'];
      }
      if (isset($vals['onShelf'])) {
        $this->onShelf = $vals['onShelf'];
      }
      if (isset($vals['commoditySales'])) {
        $this->commoditySales = $vals['commoditySales'];
      }
      if (isset($vals['related_gameid'])) {
        $this->related_gameid = $vals['related_gameid'];
      }
      if (isset($vals['recommendIds'])) {
        $this->recommendIds = $vals['recommendIds'];
      }
      if (isset($vals['buyCount'])) {
        $this->buyCount = $vals['buyCount'];
      }
      if (isset($vals['remainTimeShow'])) {
        $this->remainTimeShow = $vals['remainTimeShow'];
      }
      if (isset($vals['remainStockShow'])) {
        $this->remainStockShow = $vals['remainStockShow'];
      }
      if (isset($vals['priceList'])) {
        $this->priceList = $vals['priceList'];
      }
      if (isset($vals['countList'])) {
        $this->countList = $vals['countList'];
      }
      if (isset($vals['propId'])) {
        $this->propId = $vals['propId'];
      }
    }
  }

  public function getName() {
    return 'AddCommodityRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->commodityName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->commodityIcon);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->commodityIntro);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->commodityPhoto);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->commodityPrice);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->commodityStock);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->vipLevel);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->userBindFlag);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->beginTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->endTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->expireDay);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->commodityDiscount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->commodityType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->recommendFlag);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->onShelf);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->commoditySales);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->related_gameid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 18:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->recommendIds);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 19:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->buyCount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 20:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->remainTimeShow);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 21:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->remainStockShow);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 22:
          if ($ftype == TType::LST) {
            $this->priceList = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readListBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $elem5 = new WeightData();
              $xfer += $elem5->read($input);
              $this->priceList []= $elem5;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 23:
          if ($ftype == TType::LST) {
            $this->countList = array();
            $_size6 = 0;
            $_etype9 = 0;
            $xfer += $input->readListBegin($_etype9, $_size6);
            for ($_i10 = 0; $_i10 < $_size6; ++$_i10)
            {
              $elem11 = null;
              $elem11 = new WeightData();
              $xfer += $elem11->read($input);
              $this->countList []= $elem11;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 24:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->propId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AddCommodityRequest');
    if ($this->commodityName !== null) {
      $xfer += $output->writeFieldBegin('commodityName', TType::STRING, 1);
      $xfer += $output->writeString($this->commodityName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->commodityIcon !== null) {
      $xfer += $output->writeFieldBegin('commodityIcon', TType::STRING, 2);
      $xfer += $output->writeString($this->commodityIcon);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->commodityIntro !== null) {
      $xfer += $output->writeFieldBegin('commodityIntro', TType::STRING, 3);
      $xfer += $output->writeString($this->commodityIntro);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->commodityPhoto !== null) {
      $xfer += $output->writeFieldBegin('commodityPhoto', TType::STRING, 4);
      $xfer += $output->writeString($this->commodityPhoto);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->commodityPrice !== null) {
      $xfer += $output->writeFieldBegin('commodityPrice', TType::I32, 5);
      $xfer += $output->writeI32($this->commodityPrice);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->commodityStock !== null) {
      $xfer += $output->writeFieldBegin('commodityStock', TType::I32, 6);
      $xfer += $output->writeI32($this->commodityStock);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->vipLevel !== null) {
      $xfer += $output->writeFieldBegin('vipLevel', TType::I32, 7);
      $xfer += $output->writeI32($this->vipLevel);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userBindFlag !== null) {
      $xfer += $output->writeFieldBegin('userBindFlag', TType::I32, 8);
      $xfer += $output->writeI32($this->userBindFlag);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->beginTime !== null) {
      $xfer += $output->writeFieldBegin('beginTime', TType::I64, 9);
      $xfer += $output->writeI64($this->beginTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->endTime !== null) {
      $xfer += $output->writeFieldBegin('endTime', TType::I64, 10);
      $xfer += $output->writeI64($this->endTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->expireDay !== null) {
      $xfer += $output->writeFieldBegin('expireDay', TType::I32, 11);
      $xfer += $output->writeI32($this->expireDay);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->commodityDiscount !== null) {
      $xfer += $output->writeFieldBegin('commodityDiscount', TType::DOUBLE, 12);
      $xfer += $output->writeDouble($this->commodityDiscount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->commodityType !== null) {
      $xfer += $output->writeFieldBegin('commodityType', TType::I32, 13);
      $xfer += $output->writeI32($this->commodityType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->recommendFlag !== null) {
      $xfer += $output->writeFieldBegin('recommendFlag', TType::I32, 14);
      $xfer += $output->writeI32($this->recommendFlag);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->onShelf !== null) {
      $xfer += $output->writeFieldBegin('onShelf', TType::I32, 15);
      $xfer += $output->writeI32($this->onShelf);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->commoditySales !== null) {
      $xfer += $output->writeFieldBegin('commoditySales', TType::I32, 16);
      $xfer += $output->writeI32($this->commoditySales);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->related_gameid !== null) {
      $xfer += $output->writeFieldBegin('related_gameid', TType::I32, 17);
      $xfer += $output->writeI32($this->related_gameid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->recommendIds !== null) {
      $xfer += $output->writeFieldBegin('recommendIds', TType::STRING, 18);
      $xfer += $output->writeString($this->recommendIds);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->buyCount !== null) {
      $xfer += $output->writeFieldBegin('buyCount', TType::I32, 19);
      $xfer += $output->writeI32($this->buyCount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->remainTimeShow !== null) {
      $xfer += $output->writeFieldBegin('remainTimeShow', TType::I64, 20);
      $xfer += $output->writeI64($this->remainTimeShow);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->remainStockShow !== null) {
      $xfer += $output->writeFieldBegin('remainStockShow', TType::I32, 21);
      $xfer += $output->writeI32($this->remainStockShow);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->priceList !== null) {
      if (!is_array($this->priceList)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('priceList', TType::LST, 22);
      {
        $output->writeListBegin(TType::STRUCT, count($this->priceList));
        {
          foreach ($this->priceList as $iter12)
          {
            $xfer += $iter12->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->countList !== null) {
      if (!is_array($this->countList)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('countList', TType::LST, 23);
      {
        $output->writeListBegin(TType::STRUCT, count($this->countList));
        {
          foreach ($this->countList as $iter13)
          {
            $xfer += $iter13->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->propId !== null) {
      $xfer += $output->writeFieldBegin('propId', TType::I32, 24);
      $xfer += $output->writeI32($this->propId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AddCommodityResponse {
  static $_TSPEC;

  public $commodityId = null;
  public $error = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'commodityId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'error',
          'type' => TType::STRUCT,
          'class' => 'ExceptionDes',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['commodityId'])) {
        $this->commodityId = $vals['commodityId'];
      }
      if (isset($vals['error'])) {
        $this->error = $vals['error'];
      }
    }
  }

  public function getName() {
    return 'AddCommodityResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->commodityId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->error = new ExceptionDes();
            $xfer += $this->error->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AddCommodityResponse');
    if ($this->commodityId !== null) {
      $xfer += $output->writeFieldBegin('commodityId', TType::I32, 1);
      $xfer += $output->writeI32($this->commodityId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->error !== null) {
      if (!is_object($this->error)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('error', TType::STRUCT, 2);
      $xfer += $this->error->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class RemoveCommodityRequest {
  static $_TSPEC;

  public $commodityId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'commodityId',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['commodityId'])) {
        $this->commodityId = $vals['commodityId'];
      }
    }
  }

  public function getName() {
    return 'RemoveCommodityRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->commodityId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('RemoveCommodityRequest');
    if ($this->commodityId !== null) {
      $xfer += $output->writeFieldBegin('commodityId', TType::I32, 1);
      $xfer += $output->writeI32($this->commodityId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class RemoveCommodityResponse {
  static $_TSPEC;

  public $isSuccess = null;
  public $error = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'isSuccess',
          'type' => TType::BOOL,
          ),
        2 => array(
          'var' => 'error',
          'type' => TType::STRUCT,
          'class' => 'ExceptionDes',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['isSuccess'])) {
        $this->isSuccess = $vals['isSuccess'];
      }
      if (isset($vals['error'])) {
        $this->error = $vals['error'];
      }
    }
  }

  public function getName() {
    return 'RemoveCommodityResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->isSuccess);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->error = new ExceptionDes();
            $xfer += $this->error->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('RemoveCommodityResponse');
    if ($this->isSuccess !== null) {
      $xfer += $output->writeFieldBegin('isSuccess', TType::BOOL, 1);
      $xfer += $output->writeBool($this->isSuccess);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->error !== null) {
      if (!is_object($this->error)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('error', TType::STRUCT, 2);
      $xfer += $this->error->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ChangeCommodityRequest {
  static $_TSPEC;

  public $commodityId = null;
  public $commodityName = null;
  public $commodityIcon = null;
  public $commodityIntro = null;
  public $commodityPhoto = null;
  public $commodityPrice = null;
  public $commodityStock = null;
  public $vipLevel = null;
  public $userBindFlag = null;
  public $beginTime = null;
  public $endTime = null;
  public $expireDay = null;
  public $commodityDiscount = null;
  public $commodityType = null;
  public $onShelf = null;
  public $recommendFlag = null;
  public $commoditySales = null;
  public $relatedGameId = null;
  public $recommendIds = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'commodityId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'commodityName',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'commodityIcon',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'commodityIntro',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'commodityPhoto',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'commodityPrice',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'commodityStock',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'vipLevel',
          'type' => TType::I32,
          ),
        9 => array(
          'var' => 'userBindFlag',
          'type' => TType::I32,
          ),
        10 => array(
          'var' => 'beginTime',
          'type' => TType::I64,
          ),
        11 => array(
          'var' => 'endTime',
          'type' => TType::I64,
          ),
        12 => array(
          'var' => 'expireDay',
          'type' => TType::I32,
          ),
        13 => array(
          'var' => 'commodityDiscount',
          'type' => TType::DOUBLE,
          ),
        14 => array(
          'var' => 'commodityType',
          'type' => TType::I32,
          ),
        15 => array(
          'var' => 'onShelf',
          'type' => TType::I32,
          ),
        16 => array(
          'var' => 'recommendFlag',
          'type' => TType::I32,
          ),
        17 => array(
          'var' => 'commoditySales',
          'type' => TType::I32,
          ),
        18 => array(
          'var' => 'relatedGameId',
          'type' => TType::I32,
          ),
        19 => array(
          'var' => 'recommendIds',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['commodityId'])) {
        $this->commodityId = $vals['commodityId'];
      }
      if (isset($vals['commodityName'])) {
        $this->commodityName = $vals['commodityName'];
      }
      if (isset($vals['commodityIcon'])) {
        $this->commodityIcon = $vals['commodityIcon'];
      }
      if (isset($vals['commodityIntro'])) {
        $this->commodityIntro = $vals['commodityIntro'];
      }
      if (isset($vals['commodityPhoto'])) {
        $this->commodityPhoto = $vals['commodityPhoto'];
      }
      if (isset($vals['commodityPrice'])) {
        $this->commodityPrice = $vals['commodityPrice'];
      }
      if (isset($vals['commodityStock'])) {
        $this->commodityStock = $vals['commodityStock'];
      }
      if (isset($vals['vipLevel'])) {
        $this->vipLevel = $vals['vipLevel'];
      }
      if (isset($vals['userBindFlag'])) {
        $this->userBindFlag = $vals['userBindFlag'];
      }
      if (isset($vals['beginTime'])) {
        $this->beginTime = $vals['beginTime'];
      }
      if (isset($vals['endTime'])) {
        $this->endTime = $vals['endTime'];
      }
      if (isset($vals['expireDay'])) {
        $this->expireDay = $vals['expireDay'];
      }
      if (isset($vals['commodityDiscount'])) {
        $this->commodityDiscount = $vals['commodityDiscount'];
      }
      if (isset($vals['commodityType'])) {
        $this->commodityType = $vals['commodityType'];
      }
      if (isset($vals['onShelf'])) {
        $this->onShelf = $vals['onShelf'];
      }
      if (isset($vals['recommendFlag'])) {
        $this->recommendFlag = $vals['recommendFlag'];
      }
      if (isset($vals['commoditySales'])) {
        $this->commoditySales = $vals['commoditySales'];
      }
      if (isset($vals['relatedGameId'])) {
        $this->relatedGameId = $vals['relatedGameId'];
      }
      if (isset($vals['recommendIds'])) {
        $this->recommendIds = $vals['recommendIds'];
      }
    }
  }

  public function getName() {
    return 'ChangeCommodityRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->commodityId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->commodityName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->commodityIcon);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->commodityIntro);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->commodityPhoto);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->commodityPrice);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->commodityStock);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->vipLevel);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->userBindFlag);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->beginTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->endTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->expireDay);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->commodityDiscount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->commodityType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->onShelf);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->recommendFlag);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->commoditySales);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 18:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->relatedGameId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 19:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->recommendIds);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ChangeCommodityRequest');
    if ($this->commodityId !== null) {
      $xfer += $output->writeFieldBegin('commodityId', TType::I32, 1);
      $xfer += $output->writeI32($this->commodityId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->commodityName !== null) {
      $xfer += $output->writeFieldBegin('commodityName', TType::STRING, 2);
      $xfer += $output->writeString($this->commodityName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->commodityIcon !== null) {
      $xfer += $output->writeFieldBegin('commodityIcon', TType::STRING, 3);
      $xfer += $output->writeString($this->commodityIcon);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->commodityIntro !== null) {
      $xfer += $output->writeFieldBegin('commodityIntro', TType::STRING, 4);
      $xfer += $output->writeString($this->commodityIntro);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->commodityPhoto !== null) {
      $xfer += $output->writeFieldBegin('commodityPhoto', TType::STRING, 5);
      $xfer += $output->writeString($this->commodityPhoto);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->commodityPrice !== null) {
      $xfer += $output->writeFieldBegin('commodityPrice', TType::I32, 6);
      $xfer += $output->writeI32($this->commodityPrice);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->commodityStock !== null) {
      $xfer += $output->writeFieldBegin('commodityStock', TType::I32, 7);
      $xfer += $output->writeI32($this->commodityStock);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->vipLevel !== null) {
      $xfer += $output->writeFieldBegin('vipLevel', TType::I32, 8);
      $xfer += $output->writeI32($this->vipLevel);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userBindFlag !== null) {
      $xfer += $output->writeFieldBegin('userBindFlag', TType::I32, 9);
      $xfer += $output->writeI32($this->userBindFlag);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->beginTime !== null) {
      $xfer += $output->writeFieldBegin('beginTime', TType::I64, 10);
      $xfer += $output->writeI64($this->beginTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->endTime !== null) {
      $xfer += $output->writeFieldBegin('endTime', TType::I64, 11);
      $xfer += $output->writeI64($this->endTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->expireDay !== null) {
      $xfer += $output->writeFieldBegin('expireDay', TType::I32, 12);
      $xfer += $output->writeI32($this->expireDay);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->commodityDiscount !== null) {
      $xfer += $output->writeFieldBegin('commodityDiscount', TType::DOUBLE, 13);
      $xfer += $output->writeDouble($this->commodityDiscount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->commodityType !== null) {
      $xfer += $output->writeFieldBegin('commodityType', TType::I32, 14);
      $xfer += $output->writeI32($this->commodityType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->onShelf !== null) {
      $xfer += $output->writeFieldBegin('onShelf', TType::I32, 15);
      $xfer += $output->writeI32($this->onShelf);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->recommendFlag !== null) {
      $xfer += $output->writeFieldBegin('recommendFlag', TType::I32, 16);
      $xfer += $output->writeI32($this->recommendFlag);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->commoditySales !== null) {
      $xfer += $output->writeFieldBegin('commoditySales', TType::I32, 17);
      $xfer += $output->writeI32($this->commoditySales);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->relatedGameId !== null) {
      $xfer += $output->writeFieldBegin('relatedGameId', TType::I32, 18);
      $xfer += $output->writeI32($this->relatedGameId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->recommendIds !== null) {
      $xfer += $output->writeFieldBegin('recommendIds', TType::STRING, 19);
      $xfer += $output->writeString($this->recommendIds);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ChangeCommodityResponse {
  static $_TSPEC;

  public $isSuccess = null;
  public $error = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'isSuccess',
          'type' => TType::BOOL,
          ),
        2 => array(
          'var' => 'error',
          'type' => TType::STRUCT,
          'class' => 'ExceptionDes',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['isSuccess'])) {
        $this->isSuccess = $vals['isSuccess'];
      }
      if (isset($vals['error'])) {
        $this->error = $vals['error'];
      }
    }
  }

  public function getName() {
    return 'ChangeCommodityResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->isSuccess);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->error = new ExceptionDes();
            $xfer += $this->error->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ChangeCommodityResponse');
    if ($this->isSuccess !== null) {
      $xfer += $output->writeFieldBegin('isSuccess', TType::BOOL, 1);
      $xfer += $output->writeBool($this->isSuccess);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->error !== null) {
      if (!is_object($this->error)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('error', TType::STRUCT, 2);
      $xfer += $this->error->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AddVoucherStoreRequest {
  static $_TSPEC;

  public $voucherMoney = null;
  public $useType = null;
  public $relatedId = null;
  public $expireTime = null;
  public $voucherName = null;
  public $relatedGameId = null;
  public $voucherStock = null;
  public $extRelatedId = null;
  public $voucherIcon = null;
  public $voucherDesc = null;
  public $channel = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'voucherMoney',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'useType',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'relatedId',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'expireTime',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'voucherName',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'relatedGameId',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'voucherStock',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'extRelatedId',
          'type' => TType::I32,
          ),
        9 => array(
          'var' => 'voucherIcon',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'voucherDesc',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'channel',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['voucherMoney'])) {
        $this->voucherMoney = $vals['voucherMoney'];
      }
      if (isset($vals['useType'])) {
        $this->useType = $vals['useType'];
      }
      if (isset($vals['relatedId'])) {
        $this->relatedId = $vals['relatedId'];
      }
      if (isset($vals['expireTime'])) {
        $this->expireTime = $vals['expireTime'];
      }
      if (isset($vals['voucherName'])) {
        $this->voucherName = $vals['voucherName'];
      }
      if (isset($vals['relatedGameId'])) {
        $this->relatedGameId = $vals['relatedGameId'];
      }
      if (isset($vals['voucherStock'])) {
        $this->voucherStock = $vals['voucherStock'];
      }
      if (isset($vals['extRelatedId'])) {
        $this->extRelatedId = $vals['extRelatedId'];
      }
      if (isset($vals['voucherIcon'])) {
        $this->voucherIcon = $vals['voucherIcon'];
      }
      if (isset($vals['voucherDesc'])) {
        $this->voucherDesc = $vals['voucherDesc'];
      }
      if (isset($vals['channel'])) {
        $this->channel = $vals['channel'];
      }
    }
  }

  public function getName() {
    return 'AddVoucherStoreRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->voucherMoney);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->useType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->relatedId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->expireTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->voucherName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->relatedGameId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->voucherStock);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->extRelatedId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->voucherIcon);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->voucherDesc);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->channel);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AddVoucherStoreRequest');
    if ($this->voucherMoney !== null) {
      $xfer += $output->writeFieldBegin('voucherMoney', TType::I32, 1);
      $xfer += $output->writeI32($this->voucherMoney);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->useType !== null) {
      $xfer += $output->writeFieldBegin('useType', TType::I32, 2);
      $xfer += $output->writeI32($this->useType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->relatedId !== null) {
      $xfer += $output->writeFieldBegin('relatedId', TType::I32, 3);
      $xfer += $output->writeI32($this->relatedId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->expireTime !== null) {
      $xfer += $output->writeFieldBegin('expireTime', TType::I64, 4);
      $xfer += $output->writeI64($this->expireTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->voucherName !== null) {
      $xfer += $output->writeFieldBegin('voucherName', TType::STRING, 5);
      $xfer += $output->writeString($this->voucherName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->relatedGameId !== null) {
      $xfer += $output->writeFieldBegin('relatedGameId', TType::STRING, 6);
      $xfer += $output->writeString($this->relatedGameId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->voucherStock !== null) {
      $xfer += $output->writeFieldBegin('voucherStock', TType::I32, 7);
      $xfer += $output->writeI32($this->voucherStock);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->extRelatedId !== null) {
      $xfer += $output->writeFieldBegin('extRelatedId', TType::I32, 8);
      $xfer += $output->writeI32($this->extRelatedId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->voucherIcon !== null) {
      $xfer += $output->writeFieldBegin('voucherIcon', TType::STRING, 9);
      $xfer += $output->writeString($this->voucherIcon);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->voucherDesc !== null) {
      $xfer += $output->writeFieldBegin('voucherDesc', TType::STRING, 10);
      $xfer += $output->writeString($this->voucherDesc);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->channel !== null) {
      $xfer += $output->writeFieldBegin('channel', TType::I32, 11);
      $xfer += $output->writeI32($this->channel);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AddVoucherStoreResponse {
  static $_TSPEC;

  public $voucherId = null;
  public $error = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'voucherId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'error',
          'type' => TType::STRUCT,
          'class' => 'ExceptionDes',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['voucherId'])) {
        $this->voucherId = $vals['voucherId'];
      }
      if (isset($vals['error'])) {
        $this->error = $vals['error'];
      }
    }
  }

  public function getName() {
    return 'AddVoucherStoreResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->voucherId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->error = new ExceptionDes();
            $xfer += $this->error->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AddVoucherStoreResponse');
    if ($this->voucherId !== null) {
      $xfer += $output->writeFieldBegin('voucherId', TType::I32, 1);
      $xfer += $output->writeI32($this->voucherId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->error !== null) {
      if (!is_object($this->error)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('error', TType::STRUCT, 2);
      $xfer += $this->error->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AddChargeCardStoreRequest {
  static $_TSPEC;

  public $cardOp = null;
  public $cardName = null;
  public $cardNumber = null;
  public $cardPwd = null;
  public $cardMoney = null;
  public $useType = null;
  public $relatedId = null;
  public $expireTime = null;
  public $extRelatedId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'cardOp',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'cardName',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'cardNumber',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'cardPwd',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'cardMoney',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'useType',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'relatedId',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'expireTime',
          'type' => TType::I64,
          ),
        9 => array(
          'var' => 'extRelatedId',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['cardOp'])) {
        $this->cardOp = $vals['cardOp'];
      }
      if (isset($vals['cardName'])) {
        $this->cardName = $vals['cardName'];
      }
      if (isset($vals['cardNumber'])) {
        $this->cardNumber = $vals['cardNumber'];
      }
      if (isset($vals['cardPwd'])) {
        $this->cardPwd = $vals['cardPwd'];
      }
      if (isset($vals['cardMoney'])) {
        $this->cardMoney = $vals['cardMoney'];
      }
      if (isset($vals['useType'])) {
        $this->useType = $vals['useType'];
      }
      if (isset($vals['relatedId'])) {
        $this->relatedId = $vals['relatedId'];
      }
      if (isset($vals['expireTime'])) {
        $this->expireTime = $vals['expireTime'];
      }
      if (isset($vals['extRelatedId'])) {
        $this->extRelatedId = $vals['extRelatedId'];
      }
    }
  }

  public function getName() {
    return 'AddChargeCardStoreRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->cardOp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->cardName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->cardNumber);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->cardPwd);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->cardMoney);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->useType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->relatedId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->expireTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->extRelatedId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AddChargeCardStoreRequest');
    if ($this->cardOp !== null) {
      $xfer += $output->writeFieldBegin('cardOp', TType::I32, 1);
      $xfer += $output->writeI32($this->cardOp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cardName !== null) {
      $xfer += $output->writeFieldBegin('cardName', TType::STRING, 2);
      $xfer += $output->writeString($this->cardName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cardNumber !== null) {
      $xfer += $output->writeFieldBegin('cardNumber', TType::STRING, 3);
      $xfer += $output->writeString($this->cardNumber);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cardPwd !== null) {
      $xfer += $output->writeFieldBegin('cardPwd', TType::STRING, 4);
      $xfer += $output->writeString($this->cardPwd);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cardMoney !== null) {
      $xfer += $output->writeFieldBegin('cardMoney', TType::I32, 5);
      $xfer += $output->writeI32($this->cardMoney);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->useType !== null) {
      $xfer += $output->writeFieldBegin('useType', TType::I32, 6);
      $xfer += $output->writeI32($this->useType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->relatedId !== null) {
      $xfer += $output->writeFieldBegin('relatedId', TType::I32, 7);
      $xfer += $output->writeI32($this->relatedId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->expireTime !== null) {
      $xfer += $output->writeFieldBegin('expireTime', TType::I64, 8);
      $xfer += $output->writeI64($this->expireTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->extRelatedId !== null) {
      $xfer += $output->writeFieldBegin('extRelatedId', TType::I32, 9);
      $xfer += $output->writeI32($this->extRelatedId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AddChargeCardStoreResponse {
  static $_TSPEC;

  public $cardId = null;
  public $error = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'cardId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'error',
          'type' => TType::STRUCT,
          'class' => 'ExceptionDes',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['cardId'])) {
        $this->cardId = $vals['cardId'];
      }
      if (isset($vals['error'])) {
        $this->error = $vals['error'];
      }
    }
  }

  public function getName() {
    return 'AddChargeCardStoreResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->cardId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->error = new ExceptionDes();
            $xfer += $this->error->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AddChargeCardStoreResponse');
    if ($this->cardId !== null) {
      $xfer += $output->writeFieldBegin('cardId', TType::I32, 1);
      $xfer += $output->writeI32($this->cardId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->error !== null) {
      if (!is_object($this->error)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('error', TType::STRUCT, 2);
      $xfer += $this->error->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BatchAddChargeCardStoreRequest {
  static $_TSPEC;

  public $cardList = null;
  public $isFinish = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'cardList',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'AddChargeCardStoreRequest',
            ),
          ),
        2 => array(
          'var' => 'isFinish',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['cardList'])) {
        $this->cardList = $vals['cardList'];
      }
      if (isset($vals['isFinish'])) {
        $this->isFinish = $vals['isFinish'];
      }
    }
  }

  public function getName() {
    return 'BatchAddChargeCardStoreRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->cardList = array();
            $_size14 = 0;
            $_etype17 = 0;
            $xfer += $input->readListBegin($_etype17, $_size14);
            for ($_i18 = 0; $_i18 < $_size14; ++$_i18)
            {
              $elem19 = null;
              $elem19 = new AddChargeCardStoreRequest();
              $xfer += $elem19->read($input);
              $this->cardList []= $elem19;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->isFinish);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BatchAddChargeCardStoreRequest');
    if ($this->cardList !== null) {
      if (!is_array($this->cardList)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('cardList', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->cardList));
        {
          foreach ($this->cardList as $iter20)
          {
            $xfer += $iter20->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->isFinish !== null) {
      $xfer += $output->writeFieldBegin('isFinish', TType::BOOL, 2);
      $xfer += $output->writeBool($this->isFinish);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BatchAddChargeCardStoreResponse {
  static $_TSPEC;

  public $isSuccess = null;
  public $error = null;
  public $cardId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'isSuccess',
          'type' => TType::BOOL,
          ),
        2 => array(
          'var' => 'error',
          'type' => TType::STRUCT,
          'class' => 'ExceptionDes',
          ),
        3 => array(
          'var' => 'cardId',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['isSuccess'])) {
        $this->isSuccess = $vals['isSuccess'];
      }
      if (isset($vals['error'])) {
        $this->error = $vals['error'];
      }
      if (isset($vals['cardId'])) {
        $this->cardId = $vals['cardId'];
      }
    }
  }

  public function getName() {
    return 'BatchAddChargeCardStoreResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->isSuccess);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->error = new ExceptionDes();
            $xfer += $this->error->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->cardId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BatchAddChargeCardStoreResponse');
    if ($this->isSuccess !== null) {
      $xfer += $output->writeFieldBegin('isSuccess', TType::BOOL, 1);
      $xfer += $output->writeBool($this->isSuccess);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->error !== null) {
      if (!is_object($this->error)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('error', TType::STRUCT, 2);
      $xfer += $this->error->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cardId !== null) {
      $xfer += $output->writeFieldBegin('cardId', TType::I32, 3);
      $xfer += $output->writeI32($this->cardId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AddChargeCardNewRequest {
  static $_TSPEC;

  public $cardName = null;
  public $cardMoney = null;
  public $expireTime = null;
  public $cardDesc = null;
  public $channel = null;
  public $cardIcon = null;
  public $cardStock = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'cardName',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'cardMoney',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'expireTime',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'cardDesc',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'channel',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'cardIcon',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'cardStock',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['cardName'])) {
        $this->cardName = $vals['cardName'];
      }
      if (isset($vals['cardMoney'])) {
        $this->cardMoney = $vals['cardMoney'];
      }
      if (isset($vals['expireTime'])) {
        $this->expireTime = $vals['expireTime'];
      }
      if (isset($vals['cardDesc'])) {
        $this->cardDesc = $vals['cardDesc'];
      }
      if (isset($vals['channel'])) {
        $this->channel = $vals['channel'];
      }
      if (isset($vals['cardIcon'])) {
        $this->cardIcon = $vals['cardIcon'];
      }
      if (isset($vals['cardStock'])) {
        $this->cardStock = $vals['cardStock'];
      }
    }
  }

  public function getName() {
    return 'AddChargeCardNewRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->cardName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->cardMoney);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->expireTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->cardDesc);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->channel);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->cardIcon);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->cardStock);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AddChargeCardNewRequest');
    if ($this->cardName !== null) {
      $xfer += $output->writeFieldBegin('cardName', TType::STRING, 1);
      $xfer += $output->writeString($this->cardName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cardMoney !== null) {
      $xfer += $output->writeFieldBegin('cardMoney', TType::I32, 2);
      $xfer += $output->writeI32($this->cardMoney);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->expireTime !== null) {
      $xfer += $output->writeFieldBegin('expireTime', TType::I64, 3);
      $xfer += $output->writeI64($this->expireTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cardDesc !== null) {
      $xfer += $output->writeFieldBegin('cardDesc', TType::STRING, 4);
      $xfer += $output->writeString($this->cardDesc);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->channel !== null) {
      $xfer += $output->writeFieldBegin('channel', TType::I32, 5);
      $xfer += $output->writeI32($this->channel);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cardIcon !== null) {
      $xfer += $output->writeFieldBegin('cardIcon', TType::STRING, 6);
      $xfer += $output->writeString($this->cardIcon);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cardStock !== null) {
      $xfer += $output->writeFieldBegin('cardStock', TType::I32, 7);
      $xfer += $output->writeI32($this->cardStock);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AddChargeCardNewResponse {
  static $_TSPEC;

  public $cardId = null;
  public $error = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'cardId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'error',
          'type' => TType::STRUCT,
          'class' => 'ExceptionDes',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['cardId'])) {
        $this->cardId = $vals['cardId'];
      }
      if (isset($vals['error'])) {
        $this->error = $vals['error'];
      }
    }
  }

  public function getName() {
    return 'AddChargeCardNewResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->cardId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->error = new ExceptionDes();
            $xfer += $this->error->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AddChargeCardNewResponse');
    if ($this->cardId !== null) {
      $xfer += $output->writeFieldBegin('cardId', TType::I32, 1);
      $xfer += $output->writeI32($this->cardId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->error !== null) {
      if (!is_object($this->error)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('error', TType::STRUCT, 2);
      $xfer += $this->error->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CodeData {
  static $_TSPEC;

  public $cardNum = null;
  public $cardPwd = null;
  public $cardId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'cardNum',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'cardPwd',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'cardId',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['cardNum'])) {
        $this->cardNum = $vals['cardNum'];
      }
      if (isset($vals['cardPwd'])) {
        $this->cardPwd = $vals['cardPwd'];
      }
      if (isset($vals['cardId'])) {
        $this->cardId = $vals['cardId'];
      }
    }
  }

  public function getName() {
    return 'CodeData';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->cardNum);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->cardPwd);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->cardId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CodeData');
    if ($this->cardNum !== null) {
      $xfer += $output->writeFieldBegin('cardNum', TType::STRING, 1);
      $xfer += $output->writeString($this->cardNum);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cardPwd !== null) {
      $xfer += $output->writeFieldBegin('cardPwd', TType::STRING, 2);
      $xfer += $output->writeString($this->cardPwd);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cardId !== null) {
      $xfer += $output->writeFieldBegin('cardId', TType::I32, 3);
      $xfer += $output->writeI32($this->cardId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AddChargeCardCodeRequest {
  static $_TSPEC;

  public $codeList = null;
  public $isFinish = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'codeList',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'CodeData',
            ),
          ),
        2 => array(
          'var' => 'isFinish',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['codeList'])) {
        $this->codeList = $vals['codeList'];
      }
      if (isset($vals['isFinish'])) {
        $this->isFinish = $vals['isFinish'];
      }
    }
  }

  public function getName() {
    return 'AddChargeCardCodeRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->codeList = array();
            $_size21 = 0;
            $_etype24 = 0;
            $xfer += $input->readListBegin($_etype24, $_size21);
            for ($_i25 = 0; $_i25 < $_size21; ++$_i25)
            {
              $elem26 = null;
              $elem26 = new CodeData();
              $xfer += $elem26->read($input);
              $this->codeList []= $elem26;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->isFinish);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AddChargeCardCodeRequest');
    if ($this->codeList !== null) {
      if (!is_array($this->codeList)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('codeList', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->codeList));
        {
          foreach ($this->codeList as $iter27)
          {
            $xfer += $iter27->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->isFinish !== null) {
      $xfer += $output->writeFieldBegin('isFinish', TType::BOOL, 2);
      $xfer += $output->writeBool($this->isFinish);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AddChargeCardCodeResponse {
  static $_TSPEC;

  public $isSuccess = null;
  public $error = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'isSuccess',
          'type' => TType::BOOL,
          ),
        2 => array(
          'var' => 'error',
          'type' => TType::STRUCT,
          'class' => 'ExceptionDes',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['isSuccess'])) {
        $this->isSuccess = $vals['isSuccess'];
      }
      if (isset($vals['error'])) {
        $this->error = $vals['error'];
      }
    }
  }

  public function getName() {
    return 'AddChargeCardCodeResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->isSuccess);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->error = new ExceptionDes();
            $xfer += $this->error->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AddChargeCardCodeResponse');
    if ($this->isSuccess !== null) {
      $xfer += $output->writeFieldBegin('isSuccess', TType::BOOL, 1);
      $xfer += $output->writeBool($this->isSuccess);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->error !== null) {
      if (!is_object($this->error)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('error', TType::STRUCT, 2);
      $xfer += $this->error->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AddLotteryCardStoreRequest {
  static $_TSPEC;

  public $lotteryId = null;
  public $beginTime = null;
  public $endTime = null;
  public $cardTitle = null;
  public $useType = null;
  public $relatedId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'lotteryId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'beginTime',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'endTime',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'cardTitle',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'useType',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'relatedId',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['lotteryId'])) {
        $this->lotteryId = $vals['lotteryId'];
      }
      if (isset($vals['beginTime'])) {
        $this->beginTime = $vals['beginTime'];
      }
      if (isset($vals['endTime'])) {
        $this->endTime = $vals['endTime'];
      }
      if (isset($vals['cardTitle'])) {
        $this->cardTitle = $vals['cardTitle'];
      }
      if (isset($vals['useType'])) {
        $this->useType = $vals['useType'];
      }
      if (isset($vals['relatedId'])) {
        $this->relatedId = $vals['relatedId'];
      }
    }
  }

  public function getName() {
    return 'AddLotteryCardStoreRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->lotteryId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->beginTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->endTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->cardTitle);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->useType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->relatedId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AddLotteryCardStoreRequest');
    if ($this->lotteryId !== null) {
      $xfer += $output->writeFieldBegin('lotteryId', TType::I32, 1);
      $xfer += $output->writeI32($this->lotteryId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->beginTime !== null) {
      $xfer += $output->writeFieldBegin('beginTime', TType::I64, 2);
      $xfer += $output->writeI64($this->beginTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->endTime !== null) {
      $xfer += $output->writeFieldBegin('endTime', TType::I64, 3);
      $xfer += $output->writeI64($this->endTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cardTitle !== null) {
      $xfer += $output->writeFieldBegin('cardTitle', TType::STRING, 4);
      $xfer += $output->writeString($this->cardTitle);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->useType !== null) {
      $xfer += $output->writeFieldBegin('useType', TType::I32, 5);
      $xfer += $output->writeI32($this->useType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->relatedId !== null) {
      $xfer += $output->writeFieldBegin('relatedId', TType::I32, 6);
      $xfer += $output->writeI32($this->relatedId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AddLotteryCardStoreResponse {
  static $_TSPEC;

  public $cardId = null;
  public $error = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'cardId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'error',
          'type' => TType::STRUCT,
          'class' => 'ExceptionDes',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['cardId'])) {
        $this->cardId = $vals['cardId'];
      }
      if (isset($vals['error'])) {
        $this->error = $vals['error'];
      }
    }
  }

  public function getName() {
    return 'AddLotteryCardStoreResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->cardId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->error = new ExceptionDes();
            $xfer += $this->error->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AddLotteryCardStoreResponse');
    if ($this->cardId !== null) {
      $xfer += $output->writeFieldBegin('cardId', TType::I32, 1);
      $xfer += $output->writeI32($this->cardId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->error !== null) {
      if (!is_object($this->error)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('error', TType::STRUCT, 2);
      $xfer += $this->error->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AddPackStoreRequest {
  static $_TSPEC;

  public $packId = null;
  public $useType = null;
  public $relatedId = null;
  public $extRelatedId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'packId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'useType',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'relatedId',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'extRelatedId',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['packId'])) {
        $this->packId = $vals['packId'];
      }
      if (isset($vals['useType'])) {
        $this->useType = $vals['useType'];
      }
      if (isset($vals['relatedId'])) {
        $this->relatedId = $vals['relatedId'];
      }
      if (isset($vals['extRelatedId'])) {
        $this->extRelatedId = $vals['extRelatedId'];
      }
    }
  }

  public function getName() {
    return 'AddPackStoreRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->packId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->useType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->relatedId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->extRelatedId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AddPackStoreRequest');
    if ($this->packId !== null) {
      $xfer += $output->writeFieldBegin('packId', TType::I32, 1);
      $xfer += $output->writeI32($this->packId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->useType !== null) {
      $xfer += $output->writeFieldBegin('useType', TType::I32, 2);
      $xfer += $output->writeI32($this->useType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->relatedId !== null) {
      $xfer += $output->writeFieldBegin('relatedId', TType::I32, 3);
      $xfer += $output->writeI32($this->relatedId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->extRelatedId !== null) {
      $xfer += $output->writeFieldBegin('extRelatedId', TType::I32, 4);
      $xfer += $output->writeI32($this->extRelatedId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AddPackStoreResponse {
  static $_TSPEC;

  public $isSuccess = null;
  public $error = null;
  public $packStoreId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'isSuccess',
          'type' => TType::BOOL,
          ),
        2 => array(
          'var' => 'error',
          'type' => TType::STRUCT,
          'class' => 'ExceptionDes',
          ),
        3 => array(
          'var' => 'packStoreId',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['isSuccess'])) {
        $this->isSuccess = $vals['isSuccess'];
      }
      if (isset($vals['error'])) {
        $this->error = $vals['error'];
      }
      if (isset($vals['packStoreId'])) {
        $this->packStoreId = $vals['packStoreId'];
      }
    }
  }

  public function getName() {
    return 'AddPackStoreResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->isSuccess);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->error = new ExceptionDes();
            $xfer += $this->error->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->packStoreId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AddPackStoreResponse');
    if ($this->isSuccess !== null) {
      $xfer += $output->writeFieldBegin('isSuccess', TType::BOOL, 1);
      $xfer += $output->writeBool($this->isSuccess);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->error !== null) {
      if (!is_object($this->error)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('error', TType::STRUCT, 2);
      $xfer += $this->error->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->packStoreId !== null) {
      $xfer += $output->writeFieldBegin('packStoreId', TType::I32, 3);
      $xfer += $output->writeI32($this->packStoreId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ChangeCommodityShelfStatusRequest {
  static $_TSPEC;

  public $commodityId = null;
  public $shelfStatus = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'commodityId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'shelfStatus',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['commodityId'])) {
        $this->commodityId = $vals['commodityId'];
      }
      if (isset($vals['shelfStatus'])) {
        $this->shelfStatus = $vals['shelfStatus'];
      }
    }
  }

  public function getName() {
    return 'ChangeCommodityShelfStatusRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->commodityId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->shelfStatus);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ChangeCommodityShelfStatusRequest');
    if ($this->commodityId !== null) {
      $xfer += $output->writeFieldBegin('commodityId', TType::I32, 1);
      $xfer += $output->writeI32($this->commodityId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->shelfStatus !== null) {
      $xfer += $output->writeFieldBegin('shelfStatus', TType::I32, 2);
      $xfer += $output->writeI32($this->shelfStatus);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ChangeCommodityShelfStatusResponse {
  static $_TSPEC;

  public $isSuccess = null;
  public $error = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'isSuccess',
          'type' => TType::BOOL,
          ),
        2 => array(
          'var' => 'error',
          'type' => TType::STRUCT,
          'class' => 'ExceptionDes',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['isSuccess'])) {
        $this->isSuccess = $vals['isSuccess'];
      }
      if (isset($vals['error'])) {
        $this->error = $vals['error'];
      }
    }
  }

  public function getName() {
    return 'ChangeCommodityShelfStatusResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->isSuccess);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->error = new ExceptionDes();
            $xfer += $this->error->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ChangeCommodityShelfStatusResponse');
    if ($this->isSuccess !== null) {
      $xfer += $output->writeFieldBegin('isSuccess', TType::BOOL, 1);
      $xfer += $output->writeBool($this->isSuccess);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->error !== null) {
      if (!is_object($this->error)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('error', TType::STRUCT, 2);
      $xfer += $this->error->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class LotteryCardStore {
  static $_TSPEC;

  public $lotteryId = null;
  public $useType = null;
  public $relatedId = null;
  public $id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'lotteryId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'useType',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'relatedId',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['lotteryId'])) {
        $this->lotteryId = $vals['lotteryId'];
      }
      if (isset($vals['useType'])) {
        $this->useType = $vals['useType'];
      }
      if (isset($vals['relatedId'])) {
        $this->relatedId = $vals['relatedId'];
      }
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
    }
  }

  public function getName() {
    return 'LotteryCardStore';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->lotteryId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->useType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->relatedId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('LotteryCardStore');
    if ($this->lotteryId !== null) {
      $xfer += $output->writeFieldBegin('lotteryId', TType::I32, 1);
      $xfer += $output->writeI32($this->lotteryId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->useType !== null) {
      $xfer += $output->writeFieldBegin('useType', TType::I32, 2);
      $xfer += $output->writeI32($this->useType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->relatedId !== null) {
      $xfer += $output->writeFieldBegin('relatedId', TType::I32, 3);
      $xfer += $output->writeI32($this->relatedId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I32, 4);
      $xfer += $output->writeI32($this->id);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class PackStore {
  static $_TSPEC;

  public $packId = null;
  public $useType = null;
  public $relatedId = null;
  public $id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'packId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'useType',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'relatedId',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['packId'])) {
        $this->packId = $vals['packId'];
      }
      if (isset($vals['useType'])) {
        $this->useType = $vals['useType'];
      }
      if (isset($vals['relatedId'])) {
        $this->relatedId = $vals['relatedId'];
      }
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
    }
  }

  public function getName() {
    return 'PackStore';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->packId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->useType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->relatedId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PackStore');
    if ($this->packId !== null) {
      $xfer += $output->writeFieldBegin('packId', TType::I32, 1);
      $xfer += $output->writeI32($this->packId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->useType !== null) {
      $xfer += $output->writeFieldBegin('useType', TType::I32, 2);
      $xfer += $output->writeI32($this->useType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->relatedId !== null) {
      $xfer += $output->writeFieldBegin('relatedId', TType::I32, 3);
      $xfer += $output->writeI32($this->relatedId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I32, 4);
      $xfer += $output->writeI32($this->id);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class VoucherStore {
  static $_TSPEC;

  public $voucherMoney = null;
  public $channel = null;
  public $voucherStock = null;
  public $expireTime = null;
  public $voucherName = null;
  public $relatedGameId = null;
  public $voucherId = null;
  public $voucherAllocate = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'voucherMoney',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'channel',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'voucherStock',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'expireTime',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'voucherName',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'relatedGameId',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'voucherId',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'voucherAllocate',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['voucherMoney'])) {
        $this->voucherMoney = $vals['voucherMoney'];
      }
      if (isset($vals['channel'])) {
        $this->channel = $vals['channel'];
      }
      if (isset($vals['voucherStock'])) {
        $this->voucherStock = $vals['voucherStock'];
      }
      if (isset($vals['expireTime'])) {
        $this->expireTime = $vals['expireTime'];
      }
      if (isset($vals['voucherName'])) {
        $this->voucherName = $vals['voucherName'];
      }
      if (isset($vals['relatedGameId'])) {
        $this->relatedGameId = $vals['relatedGameId'];
      }
      if (isset($vals['voucherId'])) {
        $this->voucherId = $vals['voucherId'];
      }
      if (isset($vals['voucherAllocate'])) {
        $this->voucherAllocate = $vals['voucherAllocate'];
      }
    }
  }

  public function getName() {
    return 'VoucherStore';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->voucherMoney);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->channel);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->voucherStock);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->expireTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->voucherName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->relatedGameId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->voucherId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->voucherAllocate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('VoucherStore');
    if ($this->voucherMoney !== null) {
      $xfer += $output->writeFieldBegin('voucherMoney', TType::I32, 1);
      $xfer += $output->writeI32($this->voucherMoney);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->channel !== null) {
      $xfer += $output->writeFieldBegin('channel', TType::I32, 2);
      $xfer += $output->writeI32($this->channel);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->voucherStock !== null) {
      $xfer += $output->writeFieldBegin('voucherStock', TType::I32, 3);
      $xfer += $output->writeI32($this->voucherStock);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->expireTime !== null) {
      $xfer += $output->writeFieldBegin('expireTime', TType::I64, 4);
      $xfer += $output->writeI64($this->expireTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->voucherName !== null) {
      $xfer += $output->writeFieldBegin('voucherName', TType::STRING, 5);
      $xfer += $output->writeString($this->voucherName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->relatedGameId !== null) {
      $xfer += $output->writeFieldBegin('relatedGameId', TType::STRING, 6);
      $xfer += $output->writeString($this->relatedGameId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->voucherId !== null) {
      $xfer += $output->writeFieldBegin('voucherId', TType::I32, 7);
      $xfer += $output->writeI32($this->voucherId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->voucherAllocate !== null) {
      $xfer += $output->writeFieldBegin('voucherAllocate', TType::I32, 8);
      $xfer += $output->writeI32($this->voucherAllocate);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ChargeCardStore {
  static $_TSPEC;

  public $cardId = null;
  public $cardName = null;
  public $cardStock = null;
  public $cardAllocate = null;
  public $cardMoney = null;
  public $channel = null;
  public $expireTime = null;
  public $cardStatus = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'cardId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'cardName',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'cardStock',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'cardAllocate',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'cardMoney',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'channel',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'expireTime',
          'type' => TType::I64,
          ),
        8 => array(
          'var' => 'cardStatus',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['cardId'])) {
        $this->cardId = $vals['cardId'];
      }
      if (isset($vals['cardName'])) {
        $this->cardName = $vals['cardName'];
      }
      if (isset($vals['cardStock'])) {
        $this->cardStock = $vals['cardStock'];
      }
      if (isset($vals['cardAllocate'])) {
        $this->cardAllocate = $vals['cardAllocate'];
      }
      if (isset($vals['cardMoney'])) {
        $this->cardMoney = $vals['cardMoney'];
      }
      if (isset($vals['channel'])) {
        $this->channel = $vals['channel'];
      }
      if (isset($vals['expireTime'])) {
        $this->expireTime = $vals['expireTime'];
      }
      if (isset($vals['cardStatus'])) {
        $this->cardStatus = $vals['cardStatus'];
      }
    }
  }

  public function getName() {
    return 'ChargeCardStore';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->cardId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->cardName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->cardStock);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->cardAllocate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->cardMoney);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->channel);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->expireTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->cardStatus);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ChargeCardStore');
    if ($this->cardId !== null) {
      $xfer += $output->writeFieldBegin('cardId', TType::I32, 1);
      $xfer += $output->writeI32($this->cardId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cardName !== null) {
      $xfer += $output->writeFieldBegin('cardName', TType::STRING, 2);
      $xfer += $output->writeString($this->cardName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cardStock !== null) {
      $xfer += $output->writeFieldBegin('cardStock', TType::I32, 3);
      $xfer += $output->writeI32($this->cardStock);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cardAllocate !== null) {
      $xfer += $output->writeFieldBegin('cardAllocate', TType::I32, 4);
      $xfer += $output->writeI32($this->cardAllocate);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cardMoney !== null) {
      $xfer += $output->writeFieldBegin('cardMoney', TType::I32, 5);
      $xfer += $output->writeI32($this->cardMoney);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->channel !== null) {
      $xfer += $output->writeFieldBegin('channel', TType::I32, 6);
      $xfer += $output->writeI32($this->channel);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->expireTime !== null) {
      $xfer += $output->writeFieldBegin('expireTime', TType::I64, 7);
      $xfer += $output->writeI64($this->expireTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cardStatus !== null) {
      $xfer += $output->writeFieldBegin('cardStatus', TType::I32, 8);
      $xfer += $output->writeI32($this->cardStatus);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CommodityInfoForPhp {
  static $_TSPEC;

  public $commodityId = null;
  public $commodityName = null;
  public $commodityIcon = null;
  public $commodityIntro = null;
  public $commodityPhoto = null;
  public $commodityPrice = null;
  public $commodityStock = null;
  public $vipLevel = null;
  public $userBindFlag = null;
  public $beginTime = null;
  public $endTime = null;
  public $expireDay = null;
  public $commodityDiscount = null;
  public $commodityType = null;
  public $onShelf = null;
  public $recommendFlag = null;
  public $commoditySales = null;
  public $relatedGameId = null;
  public $recommendIds = null;
  public $buyCount = null;
  public $remainStockShow = null;
  public $remainTimeShow = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'commodityId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'commodityName',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'commodityIcon',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'commodityIntro',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'commodityPhoto',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'commodityPrice',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'commodityStock',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'vipLevel',
          'type' => TType::I32,
          ),
        9 => array(
          'var' => 'userBindFlag',
          'type' => TType::I32,
          ),
        10 => array(
          'var' => 'beginTime',
          'type' => TType::I64,
          ),
        11 => array(
          'var' => 'endTime',
          'type' => TType::I64,
          ),
        12 => array(
          'var' => 'expireDay',
          'type' => TType::I32,
          ),
        13 => array(
          'var' => 'commodityDiscount',
          'type' => TType::DOUBLE,
          ),
        14 => array(
          'var' => 'commodityType',
          'type' => TType::I32,
          ),
        15 => array(
          'var' => 'onShelf',
          'type' => TType::I32,
          ),
        16 => array(
          'var' => 'recommendFlag',
          'type' => TType::I32,
          ),
        17 => array(
          'var' => 'commoditySales',
          'type' => TType::I32,
          ),
        18 => array(
          'var' => 'relatedGameId',
          'type' => TType::I32,
          ),
        19 => array(
          'var' => 'recommendIds',
          'type' => TType::STRING,
          ),
        20 => array(
          'var' => 'buyCount',
          'type' => TType::I32,
          ),
        21 => array(
          'var' => 'remainStockShow',
          'type' => TType::I32,
          ),
        22 => array(
          'var' => 'remainTimeShow',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['commodityId'])) {
        $this->commodityId = $vals['commodityId'];
      }
      if (isset($vals['commodityName'])) {
        $this->commodityName = $vals['commodityName'];
      }
      if (isset($vals['commodityIcon'])) {
        $this->commodityIcon = $vals['commodityIcon'];
      }
      if (isset($vals['commodityIntro'])) {
        $this->commodityIntro = $vals['commodityIntro'];
      }
      if (isset($vals['commodityPhoto'])) {
        $this->commodityPhoto = $vals['commodityPhoto'];
      }
      if (isset($vals['commodityPrice'])) {
        $this->commodityPrice = $vals['commodityPrice'];
      }
      if (isset($vals['commodityStock'])) {
        $this->commodityStock = $vals['commodityStock'];
      }
      if (isset($vals['vipLevel'])) {
        $this->vipLevel = $vals['vipLevel'];
      }
      if (isset($vals['userBindFlag'])) {
        $this->userBindFlag = $vals['userBindFlag'];
      }
      if (isset($vals['beginTime'])) {
        $this->beginTime = $vals['beginTime'];
      }
      if (isset($vals['endTime'])) {
        $this->endTime = $vals['endTime'];
      }
      if (isset($vals['expireDay'])) {
        $this->expireDay = $vals['expireDay'];
      }
      if (isset($vals['commodityDiscount'])) {
        $this->commodityDiscount = $vals['commodityDiscount'];
      }
      if (isset($vals['commodityType'])) {
        $this->commodityType = $vals['commodityType'];
      }
      if (isset($vals['onShelf'])) {
        $this->onShelf = $vals['onShelf'];
      }
      if (isset($vals['recommendFlag'])) {
        $this->recommendFlag = $vals['recommendFlag'];
      }
      if (isset($vals['commoditySales'])) {
        $this->commoditySales = $vals['commoditySales'];
      }
      if (isset($vals['relatedGameId'])) {
        $this->relatedGameId = $vals['relatedGameId'];
      }
      if (isset($vals['recommendIds'])) {
        $this->recommendIds = $vals['recommendIds'];
      }
      if (isset($vals['buyCount'])) {
        $this->buyCount = $vals['buyCount'];
      }
      if (isset($vals['remainStockShow'])) {
        $this->remainStockShow = $vals['remainStockShow'];
      }
      if (isset($vals['remainTimeShow'])) {
        $this->remainTimeShow = $vals['remainTimeShow'];
      }
    }
  }

  public function getName() {
    return 'CommodityInfoForPhp';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->commodityId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->commodityName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->commodityIcon);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->commodityIntro);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->commodityPhoto);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->commodityPrice);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->commodityStock);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->vipLevel);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->userBindFlag);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->beginTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->endTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->expireDay);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->commodityDiscount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->commodityType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->onShelf);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->recommendFlag);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->commoditySales);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 18:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->relatedGameId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 19:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->recommendIds);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 20:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->buyCount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 21:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->remainStockShow);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 22:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->remainTimeShow);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CommodityInfoForPhp');
    if ($this->commodityId !== null) {
      $xfer += $output->writeFieldBegin('commodityId', TType::I32, 1);
      $xfer += $output->writeI32($this->commodityId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->commodityName !== null) {
      $xfer += $output->writeFieldBegin('commodityName', TType::STRING, 2);
      $xfer += $output->writeString($this->commodityName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->commodityIcon !== null) {
      $xfer += $output->writeFieldBegin('commodityIcon', TType::STRING, 3);
      $xfer += $output->writeString($this->commodityIcon);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->commodityIntro !== null) {
      $xfer += $output->writeFieldBegin('commodityIntro', TType::STRING, 4);
      $xfer += $output->writeString($this->commodityIntro);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->commodityPhoto !== null) {
      $xfer += $output->writeFieldBegin('commodityPhoto', TType::STRING, 5);
      $xfer += $output->writeString($this->commodityPhoto);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->commodityPrice !== null) {
      $xfer += $output->writeFieldBegin('commodityPrice', TType::I32, 6);
      $xfer += $output->writeI32($this->commodityPrice);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->commodityStock !== null) {
      $xfer += $output->writeFieldBegin('commodityStock', TType::I32, 7);
      $xfer += $output->writeI32($this->commodityStock);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->vipLevel !== null) {
      $xfer += $output->writeFieldBegin('vipLevel', TType::I32, 8);
      $xfer += $output->writeI32($this->vipLevel);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userBindFlag !== null) {
      $xfer += $output->writeFieldBegin('userBindFlag', TType::I32, 9);
      $xfer += $output->writeI32($this->userBindFlag);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->beginTime !== null) {
      $xfer += $output->writeFieldBegin('beginTime', TType::I64, 10);
      $xfer += $output->writeI64($this->beginTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->endTime !== null) {
      $xfer += $output->writeFieldBegin('endTime', TType::I64, 11);
      $xfer += $output->writeI64($this->endTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->expireDay !== null) {
      $xfer += $output->writeFieldBegin('expireDay', TType::I32, 12);
      $xfer += $output->writeI32($this->expireDay);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->commodityDiscount !== null) {
      $xfer += $output->writeFieldBegin('commodityDiscount', TType::DOUBLE, 13);
      $xfer += $output->writeDouble($this->commodityDiscount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->commodityType !== null) {
      $xfer += $output->writeFieldBegin('commodityType', TType::I32, 14);
      $xfer += $output->writeI32($this->commodityType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->onShelf !== null) {
      $xfer += $output->writeFieldBegin('onShelf', TType::I32, 15);
      $xfer += $output->writeI32($this->onShelf);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->recommendFlag !== null) {
      $xfer += $output->writeFieldBegin('recommendFlag', TType::I32, 16);
      $xfer += $output->writeI32($this->recommendFlag);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->commoditySales !== null) {
      $xfer += $output->writeFieldBegin('commoditySales', TType::I32, 17);
      $xfer += $output->writeI32($this->commoditySales);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->relatedGameId !== null) {
      $xfer += $output->writeFieldBegin('relatedGameId', TType::I32, 18);
      $xfer += $output->writeI32($this->relatedGameId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->recommendIds !== null) {
      $xfer += $output->writeFieldBegin('recommendIds', TType::STRING, 19);
      $xfer += $output->writeString($this->recommendIds);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->buyCount !== null) {
      $xfer += $output->writeFieldBegin('buyCount', TType::I32, 20);
      $xfer += $output->writeI32($this->buyCount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->remainStockShow !== null) {
      $xfer += $output->writeFieldBegin('remainStockShow', TType::I32, 21);
      $xfer += $output->writeI32($this->remainStockShow);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->remainTimeShow !== null) {
      $xfer += $output->writeFieldBegin('remainTimeShow', TType::I64, 22);
      $xfer += $output->writeI64($this->remainTimeShow);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetCommodityInfoFromDBRequest {
  static $_TSPEC;

  public $commodityId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'commodityId',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['commodityId'])) {
        $this->commodityId = $vals['commodityId'];
      }
    }
  }

  public function getName() {
    return 'GetCommodityInfoFromDBRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->commodityId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetCommodityInfoFromDBRequest');
    if ($this->commodityId !== null) {
      $xfer += $output->writeFieldBegin('commodityId', TType::I32, 1);
      $xfer += $output->writeI32($this->commodityId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetCommodityInfoFromDBResponse {
  static $_TSPEC;

  public $commodityDetail = null;
  public $voucher = null;
  public $chargeCard = null;
  public $lotteryCard = null;
  public $packStore = null;
  public $error = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'commodityDetail',
          'type' => TType::STRUCT,
          'class' => 'CommodityInfoForPhp',
          ),
        2 => array(
          'var' => 'voucher',
          'type' => TType::STRUCT,
          'class' => 'VoucherStore',
          ),
        3 => array(
          'var' => 'chargeCard',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'ChargeCardStore',
            ),
          ),
        4 => array(
          'var' => 'lotteryCard',
          'type' => TType::STRUCT,
          'class' => 'LotteryCardStore',
          ),
        5 => array(
          'var' => 'packStore',
          'type' => TType::STRUCT,
          'class' => 'PackStore',
          ),
        10 => array(
          'var' => 'error',
          'type' => TType::STRUCT,
          'class' => 'ExceptionDes',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['commodityDetail'])) {
        $this->commodityDetail = $vals['commodityDetail'];
      }
      if (isset($vals['voucher'])) {
        $this->voucher = $vals['voucher'];
      }
      if (isset($vals['chargeCard'])) {
        $this->chargeCard = $vals['chargeCard'];
      }
      if (isset($vals['lotteryCard'])) {
        $this->lotteryCard = $vals['lotteryCard'];
      }
      if (isset($vals['packStore'])) {
        $this->packStore = $vals['packStore'];
      }
      if (isset($vals['error'])) {
        $this->error = $vals['error'];
      }
    }
  }

  public function getName() {
    return 'GetCommodityInfoFromDBResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->commodityDetail = new CommodityInfoForPhp();
            $xfer += $this->commodityDetail->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->voucher = new VoucherStore();
            $xfer += $this->voucher->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->chargeCard = array();
            $_size28 = 0;
            $_etype31 = 0;
            $xfer += $input->readListBegin($_etype31, $_size28);
            for ($_i32 = 0; $_i32 < $_size28; ++$_i32)
            {
              $elem33 = null;
              $elem33 = new ChargeCardStore();
              $xfer += $elem33->read($input);
              $this->chargeCard []= $elem33;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->lotteryCard = new LotteryCardStore();
            $xfer += $this->lotteryCard->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->packStore = new PackStore();
            $xfer += $this->packStore->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRUCT) {
            $this->error = new ExceptionDes();
            $xfer += $this->error->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetCommodityInfoFromDBResponse');
    if ($this->commodityDetail !== null) {
      if (!is_object($this->commodityDetail)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('commodityDetail', TType::STRUCT, 1);
      $xfer += $this->commodityDetail->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->voucher !== null) {
      if (!is_object($this->voucher)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('voucher', TType::STRUCT, 2);
      $xfer += $this->voucher->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->chargeCard !== null) {
      if (!is_array($this->chargeCard)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('chargeCard', TType::LST, 3);
      {
        $output->writeListBegin(TType::STRUCT, count($this->chargeCard));
        {
          foreach ($this->chargeCard as $iter34)
          {
            $xfer += $iter34->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lotteryCard !== null) {
      if (!is_object($this->lotteryCard)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('lotteryCard', TType::STRUCT, 4);
      $xfer += $this->lotteryCard->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->packStore !== null) {
      if (!is_object($this->packStore)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('packStore', TType::STRUCT, 5);
      $xfer += $this->packStore->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->error !== null) {
      if (!is_object($this->error)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('error', TType::STRUCT, 10);
      $xfer += $this->error->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetCommodityListFromDBRequest {
  static $_TSPEC;

  public $pageId = null;
  public $limit = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'pageId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'limit',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['pageId'])) {
        $this->pageId = $vals['pageId'];
      }
      if (isset($vals['limit'])) {
        $this->limit = $vals['limit'];
      }
    }
  }

  public function getName() {
    return 'GetCommodityListFromDBRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->pageId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->limit);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetCommodityListFromDBRequest');
    if ($this->pageId !== null) {
      $xfer += $output->writeFieldBegin('pageId', TType::I32, 1);
      $xfer += $output->writeI32($this->pageId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->limit !== null) {
      $xfer += $output->writeFieldBegin('limit', TType::I32, 2);
      $xfer += $output->writeI32($this->limit);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetCommodityListFromDBResponse {
  static $_TSPEC;

  public $comList = null;
  public $totalNum = null;
  public $error = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'comList',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'CommodityInfoForPhp',
            ),
          ),
        2 => array(
          'var' => 'totalNum',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'error',
          'type' => TType::STRUCT,
          'class' => 'ExceptionDes',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['comList'])) {
        $this->comList = $vals['comList'];
      }
      if (isset($vals['totalNum'])) {
        $this->totalNum = $vals['totalNum'];
      }
      if (isset($vals['error'])) {
        $this->error = $vals['error'];
      }
    }
  }

  public function getName() {
    return 'GetCommodityListFromDBResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->comList = array();
            $_size35 = 0;
            $_etype38 = 0;
            $xfer += $input->readListBegin($_etype38, $_size35);
            for ($_i39 = 0; $_i39 < $_size35; ++$_i39)
            {
              $elem40 = null;
              $elem40 = new CommodityInfoForPhp();
              $xfer += $elem40->read($input);
              $this->comList []= $elem40;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->totalNum);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->error = new ExceptionDes();
            $xfer += $this->error->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetCommodityListFromDBResponse');
    if ($this->comList !== null) {
      if (!is_array($this->comList)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('comList', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->comList));
        {
          foreach ($this->comList as $iter41)
          {
            $xfer += $iter41->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->totalNum !== null) {
      $xfer += $output->writeFieldBegin('totalNum', TType::I32, 2);
      $xfer += $output->writeI32($this->totalNum);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->error !== null) {
      if (!is_object($this->error)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('error', TType::STRUCT, 3);
      $xfer += $this->error->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetVoucherListFromDBRequest {
  static $_TSPEC;

  public $pageId = null;
  public $limit = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'pageId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'limit',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['pageId'])) {
        $this->pageId = $vals['pageId'];
      }
      if (isset($vals['limit'])) {
        $this->limit = $vals['limit'];
      }
    }
  }

  public function getName() {
    return 'GetVoucherListFromDBRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->pageId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->limit);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetVoucherListFromDBRequest');
    if ($this->pageId !== null) {
      $xfer += $output->writeFieldBegin('pageId', TType::I32, 1);
      $xfer += $output->writeI32($this->pageId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->limit !== null) {
      $xfer += $output->writeFieldBegin('limit', TType::I32, 2);
      $xfer += $output->writeI32($this->limit);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetVoucherListFromDBResponse {
  static $_TSPEC;

  public $voucherList = null;
  public $totalNum = null;
  public $error = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'voucherList',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'VoucherStore',
            ),
          ),
        2 => array(
          'var' => 'totalNum',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'error',
          'type' => TType::STRUCT,
          'class' => 'ExceptionDes',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['voucherList'])) {
        $this->voucherList = $vals['voucherList'];
      }
      if (isset($vals['totalNum'])) {
        $this->totalNum = $vals['totalNum'];
      }
      if (isset($vals['error'])) {
        $this->error = $vals['error'];
      }
    }
  }

  public function getName() {
    return 'GetVoucherListFromDBResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->voucherList = array();
            $_size42 = 0;
            $_etype45 = 0;
            $xfer += $input->readListBegin($_etype45, $_size42);
            for ($_i46 = 0; $_i46 < $_size42; ++$_i46)
            {
              $elem47 = null;
              $elem47 = new VoucherStore();
              $xfer += $elem47->read($input);
              $this->voucherList []= $elem47;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->totalNum);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->error = new ExceptionDes();
            $xfer += $this->error->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetVoucherListFromDBResponse');
    if ($this->voucherList !== null) {
      if (!is_array($this->voucherList)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('voucherList', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->voucherList));
        {
          foreach ($this->voucherList as $iter48)
          {
            $xfer += $iter48->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->totalNum !== null) {
      $xfer += $output->writeFieldBegin('totalNum', TType::I32, 2);
      $xfer += $output->writeI32($this->totalNum);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->error !== null) {
      if (!is_object($this->error)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('error', TType::STRUCT, 3);
      $xfer += $this->error->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetChargeCardListFromDBRequest {
  static $_TSPEC;

  public $pageId = null;
  public $limit = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'pageId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'limit',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['pageId'])) {
        $this->pageId = $vals['pageId'];
      }
      if (isset($vals['limit'])) {
        $this->limit = $vals['limit'];
      }
    }
  }

  public function getName() {
    return 'GetChargeCardListFromDBRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->pageId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->limit);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetChargeCardListFromDBRequest');
    if ($this->pageId !== null) {
      $xfer += $output->writeFieldBegin('pageId', TType::I32, 1);
      $xfer += $output->writeI32($this->pageId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->limit !== null) {
      $xfer += $output->writeFieldBegin('limit', TType::I32, 2);
      $xfer += $output->writeI32($this->limit);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetChargeCardListFromDBResponse {
  static $_TSPEC;

  public $cardList = null;
  public $totalNum = null;
  public $error = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'cardList',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'ChargeCardStore',
            ),
          ),
        2 => array(
          'var' => 'totalNum',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'error',
          'type' => TType::STRUCT,
          'class' => 'ExceptionDes',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['cardList'])) {
        $this->cardList = $vals['cardList'];
      }
      if (isset($vals['totalNum'])) {
        $this->totalNum = $vals['totalNum'];
      }
      if (isset($vals['error'])) {
        $this->error = $vals['error'];
      }
    }
  }

  public function getName() {
    return 'GetChargeCardListFromDBResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->cardList = array();
            $_size49 = 0;
            $_etype52 = 0;
            $xfer += $input->readListBegin($_etype52, $_size49);
            for ($_i53 = 0; $_i53 < $_size49; ++$_i53)
            {
              $elem54 = null;
              $elem54 = new ChargeCardStore();
              $xfer += $elem54->read($input);
              $this->cardList []= $elem54;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->totalNum);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->error = new ExceptionDes();
            $xfer += $this->error->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetChargeCardListFromDBResponse');
    if ($this->cardList !== null) {
      if (!is_array($this->cardList)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('cardList', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->cardList));
        {
          foreach ($this->cardList as $iter55)
          {
            $xfer += $iter55->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->totalNum !== null) {
      $xfer += $output->writeFieldBegin('totalNum', TType::I32, 2);
      $xfer += $output->writeI32($this->totalNum);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->error !== null) {
      if (!is_object($this->error)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('error', TType::STRUCT, 3);
      $xfer += $this->error->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CheckPropValidRequest {
  static $_TSPEC;

  public $propId = null;
  public $type = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'propId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'type',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['propId'])) {
        $this->propId = $vals['propId'];
      }
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
    }
  }

  public function getName() {
    return 'CheckPropValidRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->propId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CheckPropValidRequest');
    if ($this->propId !== null) {
      $xfer += $output->writeFieldBegin('propId', TType::I32, 1);
      $xfer += $output->writeI32($this->propId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::I32, 2);
      $xfer += $output->writeI32($this->type);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CheckPropValidResponse {
  static $_TSPEC;

  public $status = null;
  public $error = null;
  public $number = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'status',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'error',
          'type' => TType::STRUCT,
          'class' => 'ExceptionDes',
          ),
        3 => array(
          'var' => 'number',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
      if (isset($vals['error'])) {
        $this->error = $vals['error'];
      }
      if (isset($vals['number'])) {
        $this->number = $vals['number'];
      }
    }
  }

  public function getName() {
    return 'CheckPropValidResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->error = new ExceptionDes();
            $xfer += $this->error->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->number);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CheckPropValidResponse');
    if ($this->status !== null) {
      $xfer += $output->writeFieldBegin('status', TType::I32, 1);
      $xfer += $output->writeI32($this->status);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->error !== null) {
      if (!is_object($this->error)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('error', TType::STRUCT, 2);
      $xfer += $this->error->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->number !== null) {
      $xfer += $output->writeFieldBegin('number', TType::I32, 3);
      $xfer += $output->writeI32($this->number);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CommodityInfo {
  static $_TSPEC;

  public $commodityId = null;
  public $commodityName = null;
  public $commodityIcon = null;
  public $commodityIntro = null;
  public $commodityPhoto = null;
  public $commodityPrice = null;
  public $commodityStock = null;
  public $vipLevel = null;
  public $userBindFlag = null;
  public $beginTime = null;
  public $endTime = null;
  public $commodityDiscount = null;
  public $commodityType = null;
  public $onShelf = null;
  public $recommendFlag = null;
  public $commoditySales = null;
  public $recommendIds = null;
  public $buyCount = null;
  public $discountPrice = null;
  public $remainStockShow = null;
  public $remainTimeShow = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'commodityId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'commodityName',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'commodityIcon',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'commodityIntro',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'commodityPhoto',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'commodityPrice',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'commodityStock',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'vipLevel',
          'type' => TType::I32,
          ),
        9 => array(
          'var' => 'userBindFlag',
          'type' => TType::I32,
          ),
        10 => array(
          'var' => 'beginTime',
          'type' => TType::I64,
          ),
        11 => array(
          'var' => 'endTime',
          'type' => TType::I64,
          ),
        12 => array(
          'var' => 'commodityDiscount',
          'type' => TType::DOUBLE,
          ),
        13 => array(
          'var' => 'commodityType',
          'type' => TType::I32,
          ),
        14 => array(
          'var' => 'onShelf',
          'type' => TType::I32,
          ),
        15 => array(
          'var' => 'recommendFlag',
          'type' => TType::I32,
          ),
        16 => array(
          'var' => 'commoditySales',
          'type' => TType::I32,
          ),
        17 => array(
          'var' => 'recommendIds',
          'type' => TType::STRING,
          ),
        18 => array(
          'var' => 'buyCount',
          'type' => TType::I32,
          ),
        19 => array(
          'var' => 'discountPrice',
          'type' => TType::I32,
          ),
        20 => array(
          'var' => 'remainStockShow',
          'type' => TType::I32,
          ),
        21 => array(
          'var' => 'remainTimeShow',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['commodityId'])) {
        $this->commodityId = $vals['commodityId'];
      }
      if (isset($vals['commodityName'])) {
        $this->commodityName = $vals['commodityName'];
      }
      if (isset($vals['commodityIcon'])) {
        $this->commodityIcon = $vals['commodityIcon'];
      }
      if (isset($vals['commodityIntro'])) {
        $this->commodityIntro = $vals['commodityIntro'];
      }
      if (isset($vals['commodityPhoto'])) {
        $this->commodityPhoto = $vals['commodityPhoto'];
      }
      if (isset($vals['commodityPrice'])) {
        $this->commodityPrice = $vals['commodityPrice'];
      }
      if (isset($vals['commodityStock'])) {
        $this->commodityStock = $vals['commodityStock'];
      }
      if (isset($vals['vipLevel'])) {
        $this->vipLevel = $vals['vipLevel'];
      }
      if (isset($vals['userBindFlag'])) {
        $this->userBindFlag = $vals['userBindFlag'];
      }
      if (isset($vals['beginTime'])) {
        $this->beginTime = $vals['beginTime'];
      }
      if (isset($vals['endTime'])) {
        $this->endTime = $vals['endTime'];
      }
      if (isset($vals['commodityDiscount'])) {
        $this->commodityDiscount = $vals['commodityDiscount'];
      }
      if (isset($vals['commodityType'])) {
        $this->commodityType = $vals['commodityType'];
      }
      if (isset($vals['onShelf'])) {
        $this->onShelf = $vals['onShelf'];
      }
      if (isset($vals['recommendFlag'])) {
        $this->recommendFlag = $vals['recommendFlag'];
      }
      if (isset($vals['commoditySales'])) {
        $this->commoditySales = $vals['commoditySales'];
      }
      if (isset($vals['recommendIds'])) {
        $this->recommendIds = $vals['recommendIds'];
      }
      if (isset($vals['buyCount'])) {
        $this->buyCount = $vals['buyCount'];
      }
      if (isset($vals['discountPrice'])) {
        $this->discountPrice = $vals['discountPrice'];
      }
      if (isset($vals['remainStockShow'])) {
        $this->remainStockShow = $vals['remainStockShow'];
      }
      if (isset($vals['remainTimeShow'])) {
        $this->remainTimeShow = $vals['remainTimeShow'];
      }
    }
  }

  public function getName() {
    return 'CommodityInfo';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->commodityId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->commodityName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->commodityIcon);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->commodityIntro);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->commodityPhoto);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->commodityPrice);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->commodityStock);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->vipLevel);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->userBindFlag);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->beginTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->endTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->commodityDiscount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->commodityType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->onShelf);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->recommendFlag);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->commoditySales);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->recommendIds);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 18:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->buyCount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 19:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->discountPrice);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 20:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->remainStockShow);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 21:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->remainTimeShow);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CommodityInfo');
    if ($this->commodityId !== null) {
      $xfer += $output->writeFieldBegin('commodityId', TType::I32, 1);
      $xfer += $output->writeI32($this->commodityId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->commodityName !== null) {
      $xfer += $output->writeFieldBegin('commodityName', TType::STRING, 2);
      $xfer += $output->writeString($this->commodityName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->commodityIcon !== null) {
      $xfer += $output->writeFieldBegin('commodityIcon', TType::STRING, 3);
      $xfer += $output->writeString($this->commodityIcon);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->commodityIntro !== null) {
      $xfer += $output->writeFieldBegin('commodityIntro', TType::STRING, 4);
      $xfer += $output->writeString($this->commodityIntro);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->commodityPhoto !== null) {
      $xfer += $output->writeFieldBegin('commodityPhoto', TType::STRING, 5);
      $xfer += $output->writeString($this->commodityPhoto);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->commodityPrice !== null) {
      $xfer += $output->writeFieldBegin('commodityPrice', TType::I32, 6);
      $xfer += $output->writeI32($this->commodityPrice);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->commodityStock !== null) {
      $xfer += $output->writeFieldBegin('commodityStock', TType::I32, 7);
      $xfer += $output->writeI32($this->commodityStock);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->vipLevel !== null) {
      $xfer += $output->writeFieldBegin('vipLevel', TType::I32, 8);
      $xfer += $output->writeI32($this->vipLevel);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userBindFlag !== null) {
      $xfer += $output->writeFieldBegin('userBindFlag', TType::I32, 9);
      $xfer += $output->writeI32($this->userBindFlag);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->beginTime !== null) {
      $xfer += $output->writeFieldBegin('beginTime', TType::I64, 10);
      $xfer += $output->writeI64($this->beginTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->endTime !== null) {
      $xfer += $output->writeFieldBegin('endTime', TType::I64, 11);
      $xfer += $output->writeI64($this->endTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->commodityDiscount !== null) {
      $xfer += $output->writeFieldBegin('commodityDiscount', TType::DOUBLE, 12);
      $xfer += $output->writeDouble($this->commodityDiscount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->commodityType !== null) {
      $xfer += $output->writeFieldBegin('commodityType', TType::I32, 13);
      $xfer += $output->writeI32($this->commodityType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->onShelf !== null) {
      $xfer += $output->writeFieldBegin('onShelf', TType::I32, 14);
      $xfer += $output->writeI32($this->onShelf);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->recommendFlag !== null) {
      $xfer += $output->writeFieldBegin('recommendFlag', TType::I32, 15);
      $xfer += $output->writeI32($this->recommendFlag);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->commoditySales !== null) {
      $xfer += $output->writeFieldBegin('commoditySales', TType::I32, 16);
      $xfer += $output->writeI32($this->commoditySales);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->recommendIds !== null) {
      $xfer += $output->writeFieldBegin('recommendIds', TType::STRING, 17);
      $xfer += $output->writeString($this->recommendIds);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->buyCount !== null) {
      $xfer += $output->writeFieldBegin('buyCount', TType::I32, 18);
      $xfer += $output->writeI32($this->buyCount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->discountPrice !== null) {
      $xfer += $output->writeFieldBegin('discountPrice', TType::I32, 19);
      $xfer += $output->writeI32($this->discountPrice);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->remainStockShow !== null) {
      $xfer += $output->writeFieldBegin('remainStockShow', TType::I32, 20);
      $xfer += $output->writeI32($this->remainStockShow);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->remainTimeShow !== null) {
      $xfer += $output->writeFieldBegin('remainTimeShow', TType::I64, 21);
      $xfer += $output->writeI64($this->remainTimeShow);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetCommodityInfoRequest {
  static $_TSPEC;

  public $commodityId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'commodityId',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['commodityId'])) {
        $this->commodityId = $vals['commodityId'];
      }
    }
  }

  public function getName() {
    return 'GetCommodityInfoRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->commodityId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetCommodityInfoRequest');
    if ($this->commodityId !== null) {
      $xfer += $output->writeFieldBegin('commodityId', TType::I32, 1);
      $xfer += $output->writeI32($this->commodityId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetCommodityInfoNewRequest {
  static $_TSPEC;

  public $commodityId = null;
  public $userId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'commodityId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'userId',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['commodityId'])) {
        $this->commodityId = $vals['commodityId'];
      }
      if (isset($vals['userId'])) {
        $this->userId = $vals['userId'];
      }
    }
  }

  public function getName() {
    return 'GetCommodityInfoNewRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->commodityId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->userId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetCommodityInfoNewRequest');
    if ($this->commodityId !== null) {
      $xfer += $output->writeFieldBegin('commodityId', TType::I32, 1);
      $xfer += $output->writeI32($this->commodityId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userId !== null) {
      $xfer += $output->writeFieldBegin('userId', TType::I32, 2);
      $xfer += $output->writeI32($this->userId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetCommodityInfoResponse {
  static $_TSPEC;

  public $commodityDetail = null;
  public $recomList = null;
  public $error = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'commodityDetail',
          'type' => TType::STRUCT,
          'class' => 'CommodityInfo',
          ),
        2 => array(
          'var' => 'recomList',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'CommodityInfo',
            ),
          ),
        3 => array(
          'var' => 'error',
          'type' => TType::STRUCT,
          'class' => 'ExceptionDes',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['commodityDetail'])) {
        $this->commodityDetail = $vals['commodityDetail'];
      }
      if (isset($vals['recomList'])) {
        $this->recomList = $vals['recomList'];
      }
      if (isset($vals['error'])) {
        $this->error = $vals['error'];
      }
    }
  }

  public function getName() {
    return 'GetCommodityInfoResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->commodityDetail = new CommodityInfo();
            $xfer += $this->commodityDetail->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->recomList = array();
            $_size56 = 0;
            $_etype59 = 0;
            $xfer += $input->readListBegin($_etype59, $_size56);
            for ($_i60 = 0; $_i60 < $_size56; ++$_i60)
            {
              $elem61 = null;
              $elem61 = new CommodityInfo();
              $xfer += $elem61->read($input);
              $this->recomList []= $elem61;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->error = new ExceptionDes();
            $xfer += $this->error->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetCommodityInfoResponse');
    if ($this->commodityDetail !== null) {
      if (!is_object($this->commodityDetail)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('commodityDetail', TType::STRUCT, 1);
      $xfer += $this->commodityDetail->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->recomList !== null) {
      if (!is_array($this->recomList)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('recomList', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRUCT, count($this->recomList));
        {
          foreach ($this->recomList as $iter62)
          {
            $xfer += $iter62->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->error !== null) {
      if (!is_object($this->error)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('error', TType::STRUCT, 3);
      $xfer += $this->error->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetCommodityListRequest {
  static $_TSPEC;

  public $type = null;
  public $pageId = null;
  public $limit = null;
  public $userId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'type',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'pageId',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'limit',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'userId',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['pageId'])) {
        $this->pageId = $vals['pageId'];
      }
      if (isset($vals['limit'])) {
        $this->limit = $vals['limit'];
      }
      if (isset($vals['userId'])) {
        $this->userId = $vals['userId'];
      }
    }
  }

  public function getName() {
    return 'GetCommodityListRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->pageId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->limit);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->userId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetCommodityListRequest');
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::I32, 1);
      $xfer += $output->writeI32($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pageId !== null) {
      $xfer += $output->writeFieldBegin('pageId', TType::I32, 2);
      $xfer += $output->writeI32($this->pageId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->limit !== null) {
      $xfer += $output->writeFieldBegin('limit', TType::I32, 3);
      $xfer += $output->writeI32($this->limit);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userId !== null) {
      $xfer += $output->writeFieldBegin('userId', TType::I32, 4);
      $xfer += $output->writeI32($this->userId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetCommodityListNewRequest {
  static $_TSPEC;

  public $pageId = null;
  public $limit = null;
  public $userId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'pageId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'limit',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'userId',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['pageId'])) {
        $this->pageId = $vals['pageId'];
      }
      if (isset($vals['limit'])) {
        $this->limit = $vals['limit'];
      }
      if (isset($vals['userId'])) {
        $this->userId = $vals['userId'];
      }
    }
  }

  public function getName() {
    return 'GetCommodityListNewRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->pageId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->limit);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->userId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetCommodityListNewRequest');
    if ($this->pageId !== null) {
      $xfer += $output->writeFieldBegin('pageId', TType::I32, 1);
      $xfer += $output->writeI32($this->pageId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->limit !== null) {
      $xfer += $output->writeFieldBegin('limit', TType::I32, 2);
      $xfer += $output->writeI32($this->limit);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userId !== null) {
      $xfer += $output->writeFieldBegin('userId', TType::I32, 3);
      $xfer += $output->writeI32($this->userId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetCommodityListResponse {
  static $_TSPEC;

  public $comList = null;
  public $totalCount = null;
  public $error = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'comList',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'CommodityInfo',
            ),
          ),
        2 => array(
          'var' => 'totalCount',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'error',
          'type' => TType::STRUCT,
          'class' => 'ExceptionDes',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['comList'])) {
        $this->comList = $vals['comList'];
      }
      if (isset($vals['totalCount'])) {
        $this->totalCount = $vals['totalCount'];
      }
      if (isset($vals['error'])) {
        $this->error = $vals['error'];
      }
    }
  }

  public function getName() {
    return 'GetCommodityListResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->comList = array();
            $_size63 = 0;
            $_etype66 = 0;
            $xfer += $input->readListBegin($_etype66, $_size63);
            for ($_i67 = 0; $_i67 < $_size63; ++$_i67)
            {
              $elem68 = null;
              $elem68 = new CommodityInfo();
              $xfer += $elem68->read($input);
              $this->comList []= $elem68;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->totalCount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->error = new ExceptionDes();
            $xfer += $this->error->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetCommodityListResponse');
    if ($this->comList !== null) {
      if (!is_array($this->comList)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('comList', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->comList));
        {
          foreach ($this->comList as $iter69)
          {
            $xfer += $iter69->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->totalCount !== null) {
      $xfer += $output->writeFieldBegin('totalCount', TType::I32, 2);
      $xfer += $output->writeI32($this->totalCount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->error !== null) {
      if (!is_object($this->error)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('error', TType::STRUCT, 3);
      $xfer += $this->error->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BuyCommodityRequest {
  static $_TSPEC;

  public $commodityId = null;
  public $userId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'commodityId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'userId',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['commodityId'])) {
        $this->commodityId = $vals['commodityId'];
      }
      if (isset($vals['userId'])) {
        $this->userId = $vals['userId'];
      }
    }
  }

  public function getName() {
    return 'BuyCommodityRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->commodityId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->userId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BuyCommodityRequest');
    if ($this->commodityId !== null) {
      $xfer += $output->writeFieldBegin('commodityId', TType::I32, 1);
      $xfer += $output->writeI32($this->commodityId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userId !== null) {
      $xfer += $output->writeFieldBegin('userId', TType::I32, 2);
      $xfer += $output->writeI32($this->userId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BuyCommodityNewRequest {
  static $_TSPEC;

  public $commodityId = null;
  public $userId = null;
  public $channel = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'commodityId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'userId',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'channel',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['commodityId'])) {
        $this->commodityId = $vals['commodityId'];
      }
      if (isset($vals['userId'])) {
        $this->userId = $vals['userId'];
      }
      if (isset($vals['channel'])) {
        $this->channel = $vals['channel'];
      }
    }
  }

  public function getName() {
    return 'BuyCommodityNewRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->commodityId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->userId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->channel);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BuyCommodityNewRequest');
    if ($this->commodityId !== null) {
      $xfer += $output->writeFieldBegin('commodityId', TType::I32, 1);
      $xfer += $output->writeI32($this->commodityId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userId !== null) {
      $xfer += $output->writeFieldBegin('userId', TType::I32, 2);
      $xfer += $output->writeI32($this->userId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->channel !== null) {
      $xfer += $output->writeFieldBegin('channel', TType::I32, 3);
      $xfer += $output->writeI32($this->channel);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BuyCommodityResponse {
  static $_TSPEC;

  public $resultCode = null;
  public $msg = null;
  public $score = null;
  public $error = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'resultCode',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'msg',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'score',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'error',
          'type' => TType::STRUCT,
          'class' => 'ExceptionDes',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['resultCode'])) {
        $this->resultCode = $vals['resultCode'];
      }
      if (isset($vals['msg'])) {
        $this->msg = $vals['msg'];
      }
      if (isset($vals['score'])) {
        $this->score = $vals['score'];
      }
      if (isset($vals['error'])) {
        $this->error = $vals['error'];
      }
    }
  }

  public function getName() {
    return 'BuyCommodityResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->resultCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->msg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->score);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->error = new ExceptionDes();
            $xfer += $this->error->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BuyCommodityResponse');
    if ($this->resultCode !== null) {
      $xfer += $output->writeFieldBegin('resultCode', TType::I32, 1);
      $xfer += $output->writeI32($this->resultCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->msg !== null) {
      $xfer += $output->writeFieldBegin('msg', TType::STRING, 2);
      $xfer += $output->writeString($this->msg);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->score !== null) {
      $xfer += $output->writeFieldBegin('score', TType::I32, 3);
      $xfer += $output->writeI32($this->score);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->error !== null) {
      if (!is_object($this->error)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('error', TType::STRUCT, 4);
      $xfer += $this->error->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OfferPrizeForLotteryRequest {
  static $_TSPEC;

  public $lotteryId = null;
  public $userId = null;
  public $prizeType = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'lotteryId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'userId',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'prizeType',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['lotteryId'])) {
        $this->lotteryId = $vals['lotteryId'];
      }
      if (isset($vals['userId'])) {
        $this->userId = $vals['userId'];
      }
      if (isset($vals['prizeType'])) {
        $this->prizeType = $vals['prizeType'];
      }
    }
  }

  public function getName() {
    return 'OfferPrizeForLotteryRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->lotteryId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->userId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->prizeType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OfferPrizeForLotteryRequest');
    if ($this->lotteryId !== null) {
      $xfer += $output->writeFieldBegin('lotteryId', TType::I32, 1);
      $xfer += $output->writeI32($this->lotteryId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userId !== null) {
      $xfer += $output->writeFieldBegin('userId', TType::I32, 2);
      $xfer += $output->writeI32($this->userId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->prizeType !== null) {
      $xfer += $output->writeFieldBegin('prizeType', TType::I32, 3);
      $xfer += $output->writeI32($this->prizeType);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class NewOfferPrizeForLotteryRequest {
  static $_TSPEC;

  public $lotteryId = null;
  public $userId = null;
  public $prizeType = null;
  public $prizeId = null;
  public $propId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'lotteryId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'userId',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'prizeType',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'prizeId',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'propId',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['lotteryId'])) {
        $this->lotteryId = $vals['lotteryId'];
      }
      if (isset($vals['userId'])) {
        $this->userId = $vals['userId'];
      }
      if (isset($vals['prizeType'])) {
        $this->prizeType = $vals['prizeType'];
      }
      if (isset($vals['prizeId'])) {
        $this->prizeId = $vals['prizeId'];
      }
      if (isset($vals['propId'])) {
        $this->propId = $vals['propId'];
      }
    }
  }

  public function getName() {
    return 'NewOfferPrizeForLotteryRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->lotteryId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->userId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->prizeType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->prizeId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->propId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('NewOfferPrizeForLotteryRequest');
    if ($this->lotteryId !== null) {
      $xfer += $output->writeFieldBegin('lotteryId', TType::I32, 1);
      $xfer += $output->writeI32($this->lotteryId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userId !== null) {
      $xfer += $output->writeFieldBegin('userId', TType::I32, 2);
      $xfer += $output->writeI32($this->userId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->prizeType !== null) {
      $xfer += $output->writeFieldBegin('prizeType', TType::I32, 3);
      $xfer += $output->writeI32($this->prizeType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->prizeId !== null) {
      $xfer += $output->writeFieldBegin('prizeId', TType::I32, 4);
      $xfer += $output->writeI32($this->prizeId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->propId !== null) {
      $xfer += $output->writeFieldBegin('propId', TType::I32, 5);
      $xfer += $output->writeI32($this->propId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OfferPrizeForLotteryResponse {
  static $_TSPEC;

  public $resultCode = null;
  public $msg = null;
  public $error = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'resultCode',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'msg',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'error',
          'type' => TType::STRUCT,
          'class' => 'ExceptionDes',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['resultCode'])) {
        $this->resultCode = $vals['resultCode'];
      }
      if (isset($vals['msg'])) {
        $this->msg = $vals['msg'];
      }
      if (isset($vals['error'])) {
        $this->error = $vals['error'];
      }
    }
  }

  public function getName() {
    return 'OfferPrizeForLotteryResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->resultCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->msg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->error = new ExceptionDes();
            $xfer += $this->error->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OfferPrizeForLotteryResponse');
    if ($this->resultCode !== null) {
      $xfer += $output->writeFieldBegin('resultCode', TType::I32, 1);
      $xfer += $output->writeI32($this->resultCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->msg !== null) {
      $xfer += $output->writeFieldBegin('msg', TType::STRING, 2);
      $xfer += $output->writeString($this->msg);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->error !== null) {
      if (!is_object($this->error)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('error', TType::STRUCT, 3);
      $xfer += $this->error->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class PackInfo {
  static $_TSPEC;

  public $packId = null;
  public $packName = null;
  public $packContent = null;
  public $packNum = null;
  public $packPrice = null;
  public $gameId = null;
  public $isValidate = null;
  public $obtainTime = null;
  public $packVip = null;
  public $endTime = null;
  public $packIcon = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'packId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'packName',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'packContent',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'packNum',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'packPrice',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'gameId',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'isValidate',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'obtainTime',
          'type' => TType::I64,
          ),
        9 => array(
          'var' => 'packVip',
          'type' => TType::I32,
          ),
        10 => array(
          'var' => 'endTime',
          'type' => TType::I64,
          ),
        11 => array(
          'var' => 'packIcon',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['packId'])) {
        $this->packId = $vals['packId'];
      }
      if (isset($vals['packName'])) {
        $this->packName = $vals['packName'];
      }
      if (isset($vals['packContent'])) {
        $this->packContent = $vals['packContent'];
      }
      if (isset($vals['packNum'])) {
        $this->packNum = $vals['packNum'];
      }
      if (isset($vals['packPrice'])) {
        $this->packPrice = $vals['packPrice'];
      }
      if (isset($vals['gameId'])) {
        $this->gameId = $vals['gameId'];
      }
      if (isset($vals['isValidate'])) {
        $this->isValidate = $vals['isValidate'];
      }
      if (isset($vals['obtainTime'])) {
        $this->obtainTime = $vals['obtainTime'];
      }
      if (isset($vals['packVip'])) {
        $this->packVip = $vals['packVip'];
      }
      if (isset($vals['endTime'])) {
        $this->endTime = $vals['endTime'];
      }
      if (isset($vals['packIcon'])) {
        $this->packIcon = $vals['packIcon'];
      }
    }
  }

  public function getName() {
    return 'PackInfo';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->packId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->packName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->packContent);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->packNum);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->packPrice);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->gameId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->isValidate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->obtainTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->packVip);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->endTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->packIcon);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PackInfo');
    if ($this->packId !== null) {
      $xfer += $output->writeFieldBegin('packId', TType::I32, 1);
      $xfer += $output->writeI32($this->packId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->packName !== null) {
      $xfer += $output->writeFieldBegin('packName', TType::STRING, 2);
      $xfer += $output->writeString($this->packName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->packContent !== null) {
      $xfer += $output->writeFieldBegin('packContent', TType::STRING, 3);
      $xfer += $output->writeString($this->packContent);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->packNum !== null) {
      $xfer += $output->writeFieldBegin('packNum', TType::STRING, 4);
      $xfer += $output->writeString($this->packNum);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->packPrice !== null) {
      $xfer += $output->writeFieldBegin('packPrice', TType::STRING, 5);
      $xfer += $output->writeString($this->packPrice);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->gameId !== null) {
      $xfer += $output->writeFieldBegin('gameId', TType::I32, 6);
      $xfer += $output->writeI32($this->gameId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->isValidate !== null) {
      $xfer += $output->writeFieldBegin('isValidate', TType::I32, 7);
      $xfer += $output->writeI32($this->isValidate);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->obtainTime !== null) {
      $xfer += $output->writeFieldBegin('obtainTime', TType::I64, 8);
      $xfer += $output->writeI64($this->obtainTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->packVip !== null) {
      $xfer += $output->writeFieldBegin('packVip', TType::I32, 9);
      $xfer += $output->writeI32($this->packVip);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->endTime !== null) {
      $xfer += $output->writeFieldBegin('endTime', TType::I64, 10);
      $xfer += $output->writeI64($this->endTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->packIcon !== null) {
      $xfer += $output->writeFieldBegin('packIcon', TType::STRING, 11);
      $xfer += $output->writeString($this->packIcon);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetPackListRequest {
  static $_TSPEC;

  public $userId = null;
  public $pageId = null;
  public $limit = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'userId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'pageId',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'limit',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['userId'])) {
        $this->userId = $vals['userId'];
      }
      if (isset($vals['pageId'])) {
        $this->pageId = $vals['pageId'];
      }
      if (isset($vals['limit'])) {
        $this->limit = $vals['limit'];
      }
    }
  }

  public function getName() {
    return 'GetPackListRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->userId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->pageId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->limit);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetPackListRequest');
    if ($this->userId !== null) {
      $xfer += $output->writeFieldBegin('userId', TType::I32, 1);
      $xfer += $output->writeI32($this->userId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pageId !== null) {
      $xfer += $output->writeFieldBegin('pageId', TType::I32, 2);
      $xfer += $output->writeI32($this->pageId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->limit !== null) {
      $xfer += $output->writeFieldBegin('limit', TType::I32, 3);
      $xfer += $output->writeI32($this->limit);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetPackListResponse {
  static $_TSPEC;

  public $packList = null;
  public $totalNum = null;
  public $error = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'packList',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'PackInfo',
            ),
          ),
        2 => array(
          'var' => 'totalNum',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'error',
          'type' => TType::STRUCT,
          'class' => 'ExceptionDes',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['packList'])) {
        $this->packList = $vals['packList'];
      }
      if (isset($vals['totalNum'])) {
        $this->totalNum = $vals['totalNum'];
      }
      if (isset($vals['error'])) {
        $this->error = $vals['error'];
      }
    }
  }

  public function getName() {
    return 'GetPackListResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->packList = array();
            $_size70 = 0;
            $_etype73 = 0;
            $xfer += $input->readListBegin($_etype73, $_size70);
            for ($_i74 = 0; $_i74 < $_size70; ++$_i74)
            {
              $elem75 = null;
              $elem75 = new PackInfo();
              $xfer += $elem75->read($input);
              $this->packList []= $elem75;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->totalNum);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->error = new ExceptionDes();
            $xfer += $this->error->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetPackListResponse');
    if ($this->packList !== null) {
      if (!is_array($this->packList)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('packList', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->packList));
        {
          foreach ($this->packList as $iter76)
          {
            $xfer += $iter76->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->totalNum !== null) {
      $xfer += $output->writeFieldBegin('totalNum', TType::I32, 2);
      $xfer += $output->writeI32($this->totalNum);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->error !== null) {
      if (!is_object($this->error)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('error', TType::STRUCT, 3);
      $xfer += $this->error->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GrabPackageRequest {
  static $_TSPEC;

  public $userId = null;
  public $packInfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'userId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'packInfo',
          'type' => TType::STRUCT,
          'class' => 'PackInfo',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['userId'])) {
        $this->userId = $vals['userId'];
      }
      if (isset($vals['packInfo'])) {
        $this->packInfo = $vals['packInfo'];
      }
    }
  }

  public function getName() {
    return 'GrabPackageRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->userId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->packInfo = new PackInfo();
            $xfer += $this->packInfo->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GrabPackageRequest');
    if ($this->userId !== null) {
      $xfer += $output->writeFieldBegin('userId', TType::I32, 1);
      $xfer += $output->writeI32($this->userId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->packInfo !== null) {
      if (!is_object($this->packInfo)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('packInfo', TType::STRUCT, 2);
      $xfer += $this->packInfo->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GrabPackageResponse {
  static $_TSPEC;

  public $isSuccess = null;
  public $error = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'isSuccess',
          'type' => TType::BOOL,
          ),
        2 => array(
          'var' => 'error',
          'type' => TType::STRUCT,
          'class' => 'ExceptionDes',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['isSuccess'])) {
        $this->isSuccess = $vals['isSuccess'];
      }
      if (isset($vals['error'])) {
        $this->error = $vals['error'];
      }
    }
  }

  public function getName() {
    return 'GrabPackageResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->isSuccess);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->error = new ExceptionDes();
            $xfer += $this->error->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GrabPackageResponse');
    if ($this->isSuccess !== null) {
      $xfer += $output->writeFieldBegin('isSuccess', TType::BOOL, 1);
      $xfer += $output->writeBool($this->isSuccess);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->error !== null) {
      if (!is_object($this->error)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('error', TType::STRUCT, 2);
      $xfer += $this->error->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetPropsNumRequest {
  static $_TSPEC;

  public $userId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'userId',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['userId'])) {
        $this->userId = $vals['userId'];
      }
    }
  }

  public function getName() {
    return 'GetPropsNumRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->userId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetPropsNumRequest');
    if ($this->userId !== null) {
      $xfer += $output->writeFieldBegin('userId', TType::I32, 1);
      $xfer += $output->writeI32($this->userId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetPropsNumResponse {
  static $_TSPEC;

  public $voucherNum = null;
  public $chargeCardNum = null;
  public $lotteryCardNum = null;
  public $error = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'voucherNum',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'chargeCardNum',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'lotteryCardNum',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'error',
          'type' => TType::STRUCT,
          'class' => 'ExceptionDes',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['voucherNum'])) {
        $this->voucherNum = $vals['voucherNum'];
      }
      if (isset($vals['chargeCardNum'])) {
        $this->chargeCardNum = $vals['chargeCardNum'];
      }
      if (isset($vals['lotteryCardNum'])) {
        $this->lotteryCardNum = $vals['lotteryCardNum'];
      }
      if (isset($vals['error'])) {
        $this->error = $vals['error'];
      }
    }
  }

  public function getName() {
    return 'GetPropsNumResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->voucherNum);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->chargeCardNum);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->lotteryCardNum);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->error = new ExceptionDes();
            $xfer += $this->error->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetPropsNumResponse');
    if ($this->voucherNum !== null) {
      $xfer += $output->writeFieldBegin('voucherNum', TType::I32, 1);
      $xfer += $output->writeI32($this->voucherNum);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->chargeCardNum !== null) {
      $xfer += $output->writeFieldBegin('chargeCardNum', TType::I32, 2);
      $xfer += $output->writeI32($this->chargeCardNum);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lotteryCardNum !== null) {
      $xfer += $output->writeFieldBegin('lotteryCardNum', TType::I32, 3);
      $xfer += $output->writeI32($this->lotteryCardNum);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->error !== null) {
      if (!is_object($this->error)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('error', TType::STRUCT, 4);
      $xfer += $this->error->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class VoucherInfo {
  static $_TSPEC;

  public $money = null;
  public $platFormType = null;
  public $useStatus = null;
  public $expireTime = null;
  public $obtainTime = null;
  public $voucherId = null;
  public $voucherName = null;
  public $relatedGameId = null;
  public $id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'money',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'platFormType',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'useStatus',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'expireTime',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'obtainTime',
          'type' => TType::I64,
          ),
        6 => array(
          'var' => 'voucherId',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'voucherName',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'relatedGameId',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        9 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['money'])) {
        $this->money = $vals['money'];
      }
      if (isset($vals['platFormType'])) {
        $this->platFormType = $vals['platFormType'];
      }
      if (isset($vals['useStatus'])) {
        $this->useStatus = $vals['useStatus'];
      }
      if (isset($vals['expireTime'])) {
        $this->expireTime = $vals['expireTime'];
      }
      if (isset($vals['obtainTime'])) {
        $this->obtainTime = $vals['obtainTime'];
      }
      if (isset($vals['voucherId'])) {
        $this->voucherId = $vals['voucherId'];
      }
      if (isset($vals['voucherName'])) {
        $this->voucherName = $vals['voucherName'];
      }
      if (isset($vals['relatedGameId'])) {
        $this->relatedGameId = $vals['relatedGameId'];
      }
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
    }
  }

  public function getName() {
    return 'VoucherInfo';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->money);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->platFormType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->useStatus);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->expireTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->obtainTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->voucherId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->voucherName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::LST) {
            $this->relatedGameId = array();
            $_size77 = 0;
            $_etype80 = 0;
            $xfer += $input->readListBegin($_etype80, $_size77);
            for ($_i81 = 0; $_i81 < $_size77; ++$_i81)
            {
              $elem82 = null;
              $xfer += $input->readI32($elem82);
              $this->relatedGameId []= $elem82;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('VoucherInfo');
    if ($this->money !== null) {
      $xfer += $output->writeFieldBegin('money', TType::I32, 1);
      $xfer += $output->writeI32($this->money);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->platFormType !== null) {
      $xfer += $output->writeFieldBegin('platFormType', TType::I32, 2);
      $xfer += $output->writeI32($this->platFormType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->useStatus !== null) {
      $xfer += $output->writeFieldBegin('useStatus', TType::I32, 3);
      $xfer += $output->writeI32($this->useStatus);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->expireTime !== null) {
      $xfer += $output->writeFieldBegin('expireTime', TType::I64, 4);
      $xfer += $output->writeI64($this->expireTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->obtainTime !== null) {
      $xfer += $output->writeFieldBegin('obtainTime', TType::I64, 5);
      $xfer += $output->writeI64($this->obtainTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->voucherId !== null) {
      $xfer += $output->writeFieldBegin('voucherId', TType::I32, 6);
      $xfer += $output->writeI32($this->voucherId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->voucherName !== null) {
      $xfer += $output->writeFieldBegin('voucherName', TType::STRING, 7);
      $xfer += $output->writeString($this->voucherName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->relatedGameId !== null) {
      if (!is_array($this->relatedGameId)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('relatedGameId', TType::LST, 8);
      {
        $output->writeListBegin(TType::I32, count($this->relatedGameId));
        {
          foreach ($this->relatedGameId as $iter83)
          {
            $xfer += $output->writeI32($iter83);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I32, 9);
      $xfer += $output->writeI32($this->id);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ChargeCardInfo {
  static $_TSPEC;

  public $cardOp = null;
  public $cardName = null;
  public $cardNumber = null;
  public $cardPwd = null;
  public $cardMoney = null;
  public $obtainTime = null;
  public $expireTime = null;
  public $cardId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'cardOp',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'cardName',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'cardNumber',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'cardPwd',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'cardMoney',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'obtainTime',
          'type' => TType::I64,
          ),
        7 => array(
          'var' => 'expireTime',
          'type' => TType::I64,
          ),
        8 => array(
          'var' => 'cardId',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['cardOp'])) {
        $this->cardOp = $vals['cardOp'];
      }
      if (isset($vals['cardName'])) {
        $this->cardName = $vals['cardName'];
      }
      if (isset($vals['cardNumber'])) {
        $this->cardNumber = $vals['cardNumber'];
      }
      if (isset($vals['cardPwd'])) {
        $this->cardPwd = $vals['cardPwd'];
      }
      if (isset($vals['cardMoney'])) {
        $this->cardMoney = $vals['cardMoney'];
      }
      if (isset($vals['obtainTime'])) {
        $this->obtainTime = $vals['obtainTime'];
      }
      if (isset($vals['expireTime'])) {
        $this->expireTime = $vals['expireTime'];
      }
      if (isset($vals['cardId'])) {
        $this->cardId = $vals['cardId'];
      }
    }
  }

  public function getName() {
    return 'ChargeCardInfo';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->cardOp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->cardName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->cardNumber);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->cardPwd);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->cardMoney);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->obtainTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->expireTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->cardId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ChargeCardInfo');
    if ($this->cardOp !== null) {
      $xfer += $output->writeFieldBegin('cardOp', TType::I32, 1);
      $xfer += $output->writeI32($this->cardOp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cardName !== null) {
      $xfer += $output->writeFieldBegin('cardName', TType::STRING, 2);
      $xfer += $output->writeString($this->cardName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cardNumber !== null) {
      $xfer += $output->writeFieldBegin('cardNumber', TType::STRING, 3);
      $xfer += $output->writeString($this->cardNumber);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cardPwd !== null) {
      $xfer += $output->writeFieldBegin('cardPwd', TType::STRING, 4);
      $xfer += $output->writeString($this->cardPwd);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cardMoney !== null) {
      $xfer += $output->writeFieldBegin('cardMoney', TType::I32, 5);
      $xfer += $output->writeI32($this->cardMoney);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->obtainTime !== null) {
      $xfer += $output->writeFieldBegin('obtainTime', TType::I64, 6);
      $xfer += $output->writeI64($this->obtainTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->expireTime !== null) {
      $xfer += $output->writeFieldBegin('expireTime', TType::I64, 7);
      $xfer += $output->writeI64($this->expireTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cardId !== null) {
      $xfer += $output->writeFieldBegin('cardId', TType::I32, 8);
      $xfer += $output->writeI32($this->cardId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class LotteryCardInfo {
  static $_TSPEC;

  public $lotteryId = null;
  public $useStatus = null;
  public $beginTime = null;
  public $endTime = null;
  public $obtainTime = null;
  public $cardTitle = null;
  public $cardId = null;
  public $id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'lotteryId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'useStatus',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'beginTime',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'endTime',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'obtainTime',
          'type' => TType::I64,
          ),
        6 => array(
          'var' => 'cardTitle',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'cardId',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['lotteryId'])) {
        $this->lotteryId = $vals['lotteryId'];
      }
      if (isset($vals['useStatus'])) {
        $this->useStatus = $vals['useStatus'];
      }
      if (isset($vals['beginTime'])) {
        $this->beginTime = $vals['beginTime'];
      }
      if (isset($vals['endTime'])) {
        $this->endTime = $vals['endTime'];
      }
      if (isset($vals['obtainTime'])) {
        $this->obtainTime = $vals['obtainTime'];
      }
      if (isset($vals['cardTitle'])) {
        $this->cardTitle = $vals['cardTitle'];
      }
      if (isset($vals['cardId'])) {
        $this->cardId = $vals['cardId'];
      }
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
    }
  }

  public function getName() {
    return 'LotteryCardInfo';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->lotteryId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->useStatus);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->beginTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->endTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->obtainTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->cardTitle);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->cardId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('LotteryCardInfo');
    if ($this->lotteryId !== null) {
      $xfer += $output->writeFieldBegin('lotteryId', TType::I32, 1);
      $xfer += $output->writeI32($this->lotteryId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->useStatus !== null) {
      $xfer += $output->writeFieldBegin('useStatus', TType::I32, 2);
      $xfer += $output->writeI32($this->useStatus);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->beginTime !== null) {
      $xfer += $output->writeFieldBegin('beginTime', TType::I64, 3);
      $xfer += $output->writeI64($this->beginTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->endTime !== null) {
      $xfer += $output->writeFieldBegin('endTime', TType::I64, 4);
      $xfer += $output->writeI64($this->endTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->obtainTime !== null) {
      $xfer += $output->writeFieldBegin('obtainTime', TType::I64, 5);
      $xfer += $output->writeI64($this->obtainTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cardTitle !== null) {
      $xfer += $output->writeFieldBegin('cardTitle', TType::STRING, 6);
      $xfer += $output->writeString($this->cardTitle);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cardId !== null) {
      $xfer += $output->writeFieldBegin('cardId', TType::I32, 7);
      $xfer += $output->writeI32($this->cardId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I32, 8);
      $xfer += $output->writeI32($this->id);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetPropsDataRequest {
  static $_TSPEC;

  public $userId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'userId',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['userId'])) {
        $this->userId = $vals['userId'];
      }
    }
  }

  public function getName() {
    return 'GetPropsDataRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->userId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetPropsDataRequest');
    if ($this->userId !== null) {
      $xfer += $output->writeFieldBegin('userId', TType::I32, 1);
      $xfer += $output->writeI32($this->userId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetPropsDataResponse {
  static $_TSPEC;

  public $voucherNum = null;
  public $chargeCardNum = null;
  public $voucherOverdueNum = null;
  public $chargeCardOverdueNum = null;
  public $voucherList = null;
  public $chargeCardList = null;
  public $error = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'voucherNum',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'chargeCardNum',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'voucherOverdueNum',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'chargeCardOverdueNum',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'voucherList',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'VoucherInfo',
            ),
          ),
        6 => array(
          'var' => 'chargeCardList',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'ChargeCardInfo',
            ),
          ),
        7 => array(
          'var' => 'error',
          'type' => TType::STRUCT,
          'class' => 'ExceptionDes',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['voucherNum'])) {
        $this->voucherNum = $vals['voucherNum'];
      }
      if (isset($vals['chargeCardNum'])) {
        $this->chargeCardNum = $vals['chargeCardNum'];
      }
      if (isset($vals['voucherOverdueNum'])) {
        $this->voucherOverdueNum = $vals['voucherOverdueNum'];
      }
      if (isset($vals['chargeCardOverdueNum'])) {
        $this->chargeCardOverdueNum = $vals['chargeCardOverdueNum'];
      }
      if (isset($vals['voucherList'])) {
        $this->voucherList = $vals['voucherList'];
      }
      if (isset($vals['chargeCardList'])) {
        $this->chargeCardList = $vals['chargeCardList'];
      }
      if (isset($vals['error'])) {
        $this->error = $vals['error'];
      }
    }
  }

  public function getName() {
    return 'GetPropsDataResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->voucherNum);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->chargeCardNum);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->voucherOverdueNum);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->chargeCardOverdueNum);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::LST) {
            $this->voucherList = array();
            $_size84 = 0;
            $_etype87 = 0;
            $xfer += $input->readListBegin($_etype87, $_size84);
            for ($_i88 = 0; $_i88 < $_size84; ++$_i88)
            {
              $elem89 = null;
              $elem89 = new VoucherInfo();
              $xfer += $elem89->read($input);
              $this->voucherList []= $elem89;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::LST) {
            $this->chargeCardList = array();
            $_size90 = 0;
            $_etype93 = 0;
            $xfer += $input->readListBegin($_etype93, $_size90);
            for ($_i94 = 0; $_i94 < $_size90; ++$_i94)
            {
              $elem95 = null;
              $elem95 = new ChargeCardInfo();
              $xfer += $elem95->read($input);
              $this->chargeCardList []= $elem95;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRUCT) {
            $this->error = new ExceptionDes();
            $xfer += $this->error->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetPropsDataResponse');
    if ($this->voucherNum !== null) {
      $xfer += $output->writeFieldBegin('voucherNum', TType::I32, 1);
      $xfer += $output->writeI32($this->voucherNum);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->chargeCardNum !== null) {
      $xfer += $output->writeFieldBegin('chargeCardNum', TType::I32, 2);
      $xfer += $output->writeI32($this->chargeCardNum);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->voucherOverdueNum !== null) {
      $xfer += $output->writeFieldBegin('voucherOverdueNum', TType::I32, 3);
      $xfer += $output->writeI32($this->voucherOverdueNum);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->chargeCardOverdueNum !== null) {
      $xfer += $output->writeFieldBegin('chargeCardOverdueNum', TType::I32, 4);
      $xfer += $output->writeI32($this->chargeCardOverdueNum);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->voucherList !== null) {
      if (!is_array($this->voucherList)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('voucherList', TType::LST, 5);
      {
        $output->writeListBegin(TType::STRUCT, count($this->voucherList));
        {
          foreach ($this->voucherList as $iter96)
          {
            $xfer += $iter96->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->chargeCardList !== null) {
      if (!is_array($this->chargeCardList)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('chargeCardList', TType::LST, 6);
      {
        $output->writeListBegin(TType::STRUCT, count($this->chargeCardList));
        {
          foreach ($this->chargeCardList as $iter97)
          {
            $xfer += $iter97->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->error !== null) {
      if (!is_object($this->error)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('error', TType::STRUCT, 7);
      $xfer += $this->error->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetVoucherListRequest {
  static $_TSPEC;

  public $userId = null;
  public $pageId = null;
  public $limit = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'userId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'pageId',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'limit',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['userId'])) {
        $this->userId = $vals['userId'];
      }
      if (isset($vals['pageId'])) {
        $this->pageId = $vals['pageId'];
      }
      if (isset($vals['limit'])) {
        $this->limit = $vals['limit'];
      }
    }
  }

  public function getName() {
    return 'GetVoucherListRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->userId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->pageId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->limit);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetVoucherListRequest');
    if ($this->userId !== null) {
      $xfer += $output->writeFieldBegin('userId', TType::I32, 1);
      $xfer += $output->writeI32($this->userId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pageId !== null) {
      $xfer += $output->writeFieldBegin('pageId', TType::I32, 2);
      $xfer += $output->writeI32($this->pageId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->limit !== null) {
      $xfer += $output->writeFieldBegin('limit', TType::I32, 3);
      $xfer += $output->writeI32($this->limit);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetVoucherListResponse {
  static $_TSPEC;

  public $voucherList = null;
  public $totalNum = null;
  public $error = null;
  public $voucherOverdueNum = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'voucherList',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'VoucherInfo',
            ),
          ),
        2 => array(
          'var' => 'totalNum',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'error',
          'type' => TType::STRUCT,
          'class' => 'ExceptionDes',
          ),
        4 => array(
          'var' => 'voucherOverdueNum',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['voucherList'])) {
        $this->voucherList = $vals['voucherList'];
      }
      if (isset($vals['totalNum'])) {
        $this->totalNum = $vals['totalNum'];
      }
      if (isset($vals['error'])) {
        $this->error = $vals['error'];
      }
      if (isset($vals['voucherOverdueNum'])) {
        $this->voucherOverdueNum = $vals['voucherOverdueNum'];
      }
    }
  }

  public function getName() {
    return 'GetVoucherListResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->voucherList = array();
            $_size98 = 0;
            $_etype101 = 0;
            $xfer += $input->readListBegin($_etype101, $_size98);
            for ($_i102 = 0; $_i102 < $_size98; ++$_i102)
            {
              $elem103 = null;
              $elem103 = new VoucherInfo();
              $xfer += $elem103->read($input);
              $this->voucherList []= $elem103;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->totalNum);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->error = new ExceptionDes();
            $xfer += $this->error->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->voucherOverdueNum);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetVoucherListResponse');
    if ($this->voucherList !== null) {
      if (!is_array($this->voucherList)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('voucherList', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->voucherList));
        {
          foreach ($this->voucherList as $iter104)
          {
            $xfer += $iter104->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->totalNum !== null) {
      $xfer += $output->writeFieldBegin('totalNum', TType::I32, 2);
      $xfer += $output->writeI32($this->totalNum);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->error !== null) {
      if (!is_object($this->error)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('error', TType::STRUCT, 3);
      $xfer += $this->error->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->voucherOverdueNum !== null) {
      $xfer += $output->writeFieldBegin('voucherOverdueNum', TType::I32, 4);
      $xfer += $output->writeI32($this->voucherOverdueNum);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetAvailableVoucherListRequest {
  static $_TSPEC;

  public $userId = null;
  public $appId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'userId',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'appId',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['userId'])) {
        $this->userId = $vals['userId'];
      }
      if (isset($vals['appId'])) {
        $this->appId = $vals['appId'];
      }
    }
  }

  public function getName() {
    return 'GetAvailableVoucherListRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->userId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->appId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetAvailableVoucherListRequest');
    if ($this->userId !== null) {
      $xfer += $output->writeFieldBegin('userId', TType::I32, 1);
      $xfer += $output->writeI32($this->userId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->appId !== null) {
      $xfer += $output->writeFieldBegin('appId', TType::I32, 3);
      $xfer += $output->writeI32($this->appId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetAvailableVoucherListResponse {
  static $_TSPEC;

  public $voucherList = null;
  public $error = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'voucherList',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'VoucherInfo',
            ),
          ),
        2 => array(
          'var' => 'error',
          'type' => TType::STRUCT,
          'class' => 'ExceptionDes',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['voucherList'])) {
        $this->voucherList = $vals['voucherList'];
      }
      if (isset($vals['error'])) {
        $this->error = $vals['error'];
      }
    }
  }

  public function getName() {
    return 'GetAvailableVoucherListResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->voucherList = array();
            $_size105 = 0;
            $_etype108 = 0;
            $xfer += $input->readListBegin($_etype108, $_size105);
            for ($_i109 = 0; $_i109 < $_size105; ++$_i109)
            {
              $elem110 = null;
              $elem110 = new VoucherInfo();
              $xfer += $elem110->read($input);
              $this->voucherList []= $elem110;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->error = new ExceptionDes();
            $xfer += $this->error->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetAvailableVoucherListResponse');
    if ($this->voucherList !== null) {
      if (!is_array($this->voucherList)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('voucherList', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->voucherList));
        {
          foreach ($this->voucherList as $iter111)
          {
            $xfer += $iter111->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->error !== null) {
      if (!is_object($this->error)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('error', TType::STRUCT, 2);
      $xfer += $this->error->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetChargeCardListRequest {
  static $_TSPEC;

  public $userId = null;
  public $pageId = null;
  public $limit = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'userId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'pageId',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'limit',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['userId'])) {
        $this->userId = $vals['userId'];
      }
      if (isset($vals['pageId'])) {
        $this->pageId = $vals['pageId'];
      }
      if (isset($vals['limit'])) {
        $this->limit = $vals['limit'];
      }
    }
  }

  public function getName() {
    return 'GetChargeCardListRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->userId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->pageId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->limit);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetChargeCardListRequest');
    if ($this->userId !== null) {
      $xfer += $output->writeFieldBegin('userId', TType::I32, 1);
      $xfer += $output->writeI32($this->userId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pageId !== null) {
      $xfer += $output->writeFieldBegin('pageId', TType::I32, 2);
      $xfer += $output->writeI32($this->pageId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->limit !== null) {
      $xfer += $output->writeFieldBegin('limit', TType::I32, 3);
      $xfer += $output->writeI32($this->limit);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetChargeCardListResponse {
  static $_TSPEC;

  public $chargeCardList = null;
  public $totalNum = null;
  public $error = null;
  public $chargeCardOverdueNum = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'chargeCardList',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'ChargeCardInfo',
            ),
          ),
        2 => array(
          'var' => 'totalNum',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'error',
          'type' => TType::STRUCT,
          'class' => 'ExceptionDes',
          ),
        4 => array(
          'var' => 'chargeCardOverdueNum',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['chargeCardList'])) {
        $this->chargeCardList = $vals['chargeCardList'];
      }
      if (isset($vals['totalNum'])) {
        $this->totalNum = $vals['totalNum'];
      }
      if (isset($vals['error'])) {
        $this->error = $vals['error'];
      }
      if (isset($vals['chargeCardOverdueNum'])) {
        $this->chargeCardOverdueNum = $vals['chargeCardOverdueNum'];
      }
    }
  }

  public function getName() {
    return 'GetChargeCardListResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->chargeCardList = array();
            $_size112 = 0;
            $_etype115 = 0;
            $xfer += $input->readListBegin($_etype115, $_size112);
            for ($_i116 = 0; $_i116 < $_size112; ++$_i116)
            {
              $elem117 = null;
              $elem117 = new ChargeCardInfo();
              $xfer += $elem117->read($input);
              $this->chargeCardList []= $elem117;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->totalNum);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->error = new ExceptionDes();
            $xfer += $this->error->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->chargeCardOverdueNum);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetChargeCardListResponse');
    if ($this->chargeCardList !== null) {
      if (!is_array($this->chargeCardList)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('chargeCardList', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->chargeCardList));
        {
          foreach ($this->chargeCardList as $iter118)
          {
            $xfer += $iter118->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->totalNum !== null) {
      $xfer += $output->writeFieldBegin('totalNum', TType::I32, 2);
      $xfer += $output->writeI32($this->totalNum);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->error !== null) {
      if (!is_object($this->error)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('error', TType::STRUCT, 3);
      $xfer += $this->error->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->chargeCardOverdueNum !== null) {
      $xfer += $output->writeFieldBegin('chargeCardOverdueNum', TType::I32, 4);
      $xfer += $output->writeI32($this->chargeCardOverdueNum);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetLotteryCardListRequest {
  static $_TSPEC;

  public $userId = null;
  public $pageId = null;
  public $limit = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'userId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'pageId',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'limit',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['userId'])) {
        $this->userId = $vals['userId'];
      }
      if (isset($vals['pageId'])) {
        $this->pageId = $vals['pageId'];
      }
      if (isset($vals['limit'])) {
        $this->limit = $vals['limit'];
      }
    }
  }

  public function getName() {
    return 'GetLotteryCardListRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->userId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->pageId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->limit);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetLotteryCardListRequest');
    if ($this->userId !== null) {
      $xfer += $output->writeFieldBegin('userId', TType::I32, 1);
      $xfer += $output->writeI32($this->userId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pageId !== null) {
      $xfer += $output->writeFieldBegin('pageId', TType::I32, 2);
      $xfer += $output->writeI32($this->pageId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->limit !== null) {
      $xfer += $output->writeFieldBegin('limit', TType::I32, 3);
      $xfer += $output->writeI32($this->limit);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetLotteryCardListResponse {
  static $_TSPEC;

  public $lotteryCardList = null;
  public $totalNum = null;
  public $error = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'lotteryCardList',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'LotteryCardInfo',
            ),
          ),
        2 => array(
          'var' => 'totalNum',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'error',
          'type' => TType::STRUCT,
          'class' => 'ExceptionDes',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['lotteryCardList'])) {
        $this->lotteryCardList = $vals['lotteryCardList'];
      }
      if (isset($vals['totalNum'])) {
        $this->totalNum = $vals['totalNum'];
      }
      if (isset($vals['error'])) {
        $this->error = $vals['error'];
      }
    }
  }

  public function getName() {
    return 'GetLotteryCardListResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->lotteryCardList = array();
            $_size119 = 0;
            $_etype122 = 0;
            $xfer += $input->readListBegin($_etype122, $_size119);
            for ($_i123 = 0; $_i123 < $_size119; ++$_i123)
            {
              $elem124 = null;
              $elem124 = new LotteryCardInfo();
              $xfer += $elem124->read($input);
              $this->lotteryCardList []= $elem124;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->totalNum);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->error = new ExceptionDes();
            $xfer += $this->error->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetLotteryCardListResponse');
    if ($this->lotteryCardList !== null) {
      if (!is_array($this->lotteryCardList)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('lotteryCardList', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->lotteryCardList));
        {
          foreach ($this->lotteryCardList as $iter125)
          {
            $xfer += $iter125->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->totalNum !== null) {
      $xfer += $output->writeFieldBegin('totalNum', TType::I32, 2);
      $xfer += $output->writeI32($this->totalNum);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->error !== null) {
      if (!is_object($this->error)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('error', TType::STRUCT, 3);
      $xfer += $this->error->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ReceivePropByMessageRequest {
  static $_TSPEC;

  public $propType = null;
  public $propId = null;
  public $userId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'propType',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'propId',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'userId',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['propType'])) {
        $this->propType = $vals['propType'];
      }
      if (isset($vals['propId'])) {
        $this->propId = $vals['propId'];
      }
      if (isset($vals['userId'])) {
        $this->userId = $vals['userId'];
      }
    }
  }

  public function getName() {
    return 'ReceivePropByMessageRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->propType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->propId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->userId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ReceivePropByMessageRequest');
    if ($this->propType !== null) {
      $xfer += $output->writeFieldBegin('propType', TType::I32, 1);
      $xfer += $output->writeI32($this->propType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->propId !== null) {
      $xfer += $output->writeFieldBegin('propId', TType::I32, 2);
      $xfer += $output->writeI32($this->propId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userId !== null) {
      $xfer += $output->writeFieldBegin('userId', TType::I32, 3);
      $xfer += $output->writeI32($this->userId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ReceivePropByMessageResponse {
  static $_TSPEC;

  public $resultCode = null;
  public $msg = null;
  public $propName = null;
  public $propContent = null;
  public $error = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'resultCode',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'msg',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'propName',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'propContent',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'error',
          'type' => TType::STRUCT,
          'class' => 'ExceptionDes',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['resultCode'])) {
        $this->resultCode = $vals['resultCode'];
      }
      if (isset($vals['msg'])) {
        $this->msg = $vals['msg'];
      }
      if (isset($vals['propName'])) {
        $this->propName = $vals['propName'];
      }
      if (isset($vals['propContent'])) {
        $this->propContent = $vals['propContent'];
      }
      if (isset($vals['error'])) {
        $this->error = $vals['error'];
      }
    }
  }

  public function getName() {
    return 'ReceivePropByMessageResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->resultCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->msg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->propName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->propContent);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->error = new ExceptionDes();
            $xfer += $this->error->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ReceivePropByMessageResponse');
    if ($this->resultCode !== null) {
      $xfer += $output->writeFieldBegin('resultCode', TType::I32, 1);
      $xfer += $output->writeI32($this->resultCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->msg !== null) {
      $xfer += $output->writeFieldBegin('msg', TType::STRING, 2);
      $xfer += $output->writeString($this->msg);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->propName !== null) {
      $xfer += $output->writeFieldBegin('propName', TType::STRING, 3);
      $xfer += $output->writeString($this->propName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->propContent !== null) {
      $xfer += $output->writeFieldBegin('propContent', TType::STRING, 4);
      $xfer += $output->writeString($this->propContent);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->error !== null) {
      if (!is_object($this->error)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('error', TType::STRUCT, 5);
      $xfer += $this->error->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class UseLotteryCardRequest {
  static $_TSPEC;

  public $userId = null;
  public $cardId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'userId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'cardId',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['userId'])) {
        $this->userId = $vals['userId'];
      }
      if (isset($vals['cardId'])) {
        $this->cardId = $vals['cardId'];
      }
    }
  }

  public function getName() {
    return 'UseLotteryCardRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->userId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->cardId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('UseLotteryCardRequest');
    if ($this->userId !== null) {
      $xfer += $output->writeFieldBegin('userId', TType::I32, 1);
      $xfer += $output->writeI32($this->userId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cardId !== null) {
      $xfer += $output->writeFieldBegin('cardId', TType::I32, 2);
      $xfer += $output->writeI32($this->cardId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class UseLotteryCardResponse {
  static $_TSPEC;

  public $isSuccess = null;
  public $error = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'isSuccess',
          'type' => TType::BOOL,
          ),
        2 => array(
          'var' => 'error',
          'type' => TType::STRUCT,
          'class' => 'ExceptionDes',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['isSuccess'])) {
        $this->isSuccess = $vals['isSuccess'];
      }
      if (isset($vals['error'])) {
        $this->error = $vals['error'];
      }
    }
  }

  public function getName() {
    return 'UseLotteryCardResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->isSuccess);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->error = new ExceptionDes();
            $xfer += $this->error->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('UseLotteryCardResponse');
    if ($this->isSuccess !== null) {
      $xfer += $output->writeFieldBegin('isSuccess', TType::BOOL, 1);
      $xfer += $output->writeBool($this->isSuccess);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->error !== null) {
      if (!is_object($this->error)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('error', TType::STRUCT, 2);
      $xfer += $this->error->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CheckLotteryCardRequest {
  static $_TSPEC;

  public $userId = null;
  public $cardId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'userId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'cardId',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['userId'])) {
        $this->userId = $vals['userId'];
      }
      if (isset($vals['cardId'])) {
        $this->cardId = $vals['cardId'];
      }
    }
  }

  public function getName() {
    return 'CheckLotteryCardRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->userId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->cardId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CheckLotteryCardRequest');
    if ($this->userId !== null) {
      $xfer += $output->writeFieldBegin('userId', TType::I32, 1);
      $xfer += $output->writeI32($this->userId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cardId !== null) {
      $xfer += $output->writeFieldBegin('cardId', TType::I32, 2);
      $xfer += $output->writeI32($this->cardId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CheckLotteryCardResponse {
  static $_TSPEC;

  public $useStatus = null;
  public $error = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'useStatus',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'error',
          'type' => TType::STRUCT,
          'class' => 'ExceptionDes',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['useStatus'])) {
        $this->useStatus = $vals['useStatus'];
      }
      if (isset($vals['error'])) {
        $this->error = $vals['error'];
      }
    }
  }

  public function getName() {
    return 'CheckLotteryCardResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->useStatus);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->error = new ExceptionDes();
            $xfer += $this->error->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CheckLotteryCardResponse');
    if ($this->useStatus !== null) {
      $xfer += $output->writeFieldBegin('useStatus', TType::I32, 1);
      $xfer += $output->writeI32($this->useStatus);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->error !== null) {
      if (!is_object($this->error)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('error', TType::STRUCT, 2);
      $xfer += $this->error->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class UseVoucherRequest {
  static $_TSPEC;

  public $userId = null;
  public $voucherId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'userId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'voucherId',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['userId'])) {
        $this->userId = $vals['userId'];
      }
      if (isset($vals['voucherId'])) {
        $this->voucherId = $vals['voucherId'];
      }
    }
  }

  public function getName() {
    return 'UseVoucherRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->userId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->voucherId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('UseVoucherRequest');
    if ($this->userId !== null) {
      $xfer += $output->writeFieldBegin('userId', TType::I32, 1);
      $xfer += $output->writeI32($this->userId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->voucherId !== null) {
      $xfer += $output->writeFieldBegin('voucherId', TType::I32, 2);
      $xfer += $output->writeI32($this->voucherId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class UseVoucherResponse {
  static $_TSPEC;

  public $isSuccess = null;
  public $error = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'isSuccess',
          'type' => TType::BOOL,
          ),
        2 => array(
          'var' => 'error',
          'type' => TType::STRUCT,
          'class' => 'ExceptionDes',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['isSuccess'])) {
        $this->isSuccess = $vals['isSuccess'];
      }
      if (isset($vals['error'])) {
        $this->error = $vals['error'];
      }
    }
  }

  public function getName() {
    return 'UseVoucherResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->isSuccess);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->error = new ExceptionDes();
            $xfer += $this->error->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('UseVoucherResponse');
    if ($this->isSuccess !== null) {
      $xfer += $output->writeFieldBegin('isSuccess', TType::BOOL, 1);
      $xfer += $output->writeBool($this->isSuccess);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->error !== null) {
      if (!is_object($this->error)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('error', TType::STRUCT, 2);
      $xfer += $this->error->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetUserVoucherRequest {
  static $_TSPEC;

  public $userId = null;
  public $voucherId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'userId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'voucherId',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['userId'])) {
        $this->userId = $vals['userId'];
      }
      if (isset($vals['voucherId'])) {
        $this->voucherId = $vals['voucherId'];
      }
    }
  }

  public function getName() {
    return 'GetUserVoucherRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->userId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->voucherId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetUserVoucherRequest');
    if ($this->userId !== null) {
      $xfer += $output->writeFieldBegin('userId', TType::I32, 1);
      $xfer += $output->writeI32($this->userId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->voucherId !== null) {
      $xfer += $output->writeFieldBegin('voucherId', TType::I32, 2);
      $xfer += $output->writeI32($this->voucherId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetUserVoucherResponse {
  static $_TSPEC;

  public $voucherInfo = null;
  public $error = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'voucherInfo',
          'type' => TType::STRUCT,
          'class' => 'VoucherInfo',
          ),
        2 => array(
          'var' => 'error',
          'type' => TType::STRUCT,
          'class' => 'ExceptionDes',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['voucherInfo'])) {
        $this->voucherInfo = $vals['voucherInfo'];
      }
      if (isset($vals['error'])) {
        $this->error = $vals['error'];
      }
    }
  }

  public function getName() {
    return 'GetUserVoucherResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->voucherInfo = new VoucherInfo();
            $xfer += $this->voucherInfo->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->error = new ExceptionDes();
            $xfer += $this->error->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetUserVoucherResponse');
    if ($this->voucherInfo !== null) {
      if (!is_object($this->voucherInfo)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('voucherInfo', TType::STRUCT, 1);
      $xfer += $this->voucherInfo->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->error !== null) {
      if (!is_object($this->error)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('error', TType::STRUCT, 2);
      $xfer += $this->error->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CheckCommodityPackageStatusRequest {
  static $_TSPEC;

  public $packageIdList = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'packageIdList',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['packageIdList'])) {
        $this->packageIdList = $vals['packageIdList'];
      }
    }
  }

  public function getName() {
    return 'CheckCommodityPackageStatusRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->packageIdList = array();
            $_size126 = 0;
            $_etype129 = 0;
            $xfer += $input->readListBegin($_etype129, $_size126);
            for ($_i130 = 0; $_i130 < $_size126; ++$_i130)
            {
              $elem131 = null;
              $xfer += $input->readI32($elem131);
              $this->packageIdList []= $elem131;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CheckCommodityPackageStatusRequest');
    if ($this->packageIdList !== null) {
      if (!is_array($this->packageIdList)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('packageIdList', TType::LST, 1);
      {
        $output->writeListBegin(TType::I32, count($this->packageIdList));
        {
          foreach ($this->packageIdList as $iter132)
          {
            $xfer += $output->writeI32($iter132);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CheckCommodityPackageStatusResponse {
  static $_TSPEC;

  public $statusMap = null;
  public $error = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'statusMap',
          'type' => TType::MAP,
          'ktype' => TType::I32,
          'vtype' => TType::I32,
          'key' => array(
            'type' => TType::I32,
          ),
          'val' => array(
            'type' => TType::I32,
            ),
          ),
        2 => array(
          'var' => 'error',
          'type' => TType::STRUCT,
          'class' => 'ExceptionDes',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['statusMap'])) {
        $this->statusMap = $vals['statusMap'];
      }
      if (isset($vals['error'])) {
        $this->error = $vals['error'];
      }
    }
  }

  public function getName() {
    return 'CheckCommodityPackageStatusResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::MAP) {
            $this->statusMap = array();
            $_size133 = 0;
            $_ktype134 = 0;
            $_vtype135 = 0;
            $xfer += $input->readMapBegin($_ktype134, $_vtype135, $_size133);
            for ($_i137 = 0; $_i137 < $_size133; ++$_i137)
            {
              $key138 = 0;
              $val139 = 0;
              $xfer += $input->readI32($key138);
              $xfer += $input->readI32($val139);
              $this->statusMap[$key138] = $val139;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->error = new ExceptionDes();
            $xfer += $this->error->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CheckCommodityPackageStatusResponse');
    if ($this->statusMap !== null) {
      if (!is_array($this->statusMap)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('statusMap', TType::MAP, 1);
      {
        $output->writeMapBegin(TType::I32, TType::I32, count($this->statusMap));
        {
          foreach ($this->statusMap as $kiter140 => $viter141)
          {
            $xfer += $output->writeI32($kiter140);
            $xfer += $output->writeI32($viter141);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->error !== null) {
      if (!is_object($this->error)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('error', TType::STRUCT, 2);
      $xfer += $this->error->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

?>
