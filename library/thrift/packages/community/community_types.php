<?php
/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
include_once $GLOBALS['THRIFT_ROOT'].'/Thrift.php';


class thrift_CommunityResultThrift {
  static $_TSPEC;

  public $isSuccess = null;
  public $code = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'isSuccess',
          'type' => TType::BOOL,
          ),
        2 => array(
          'var' => 'code',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['isSuccess'])) {
        $this->isSuccess = $vals['isSuccess'];
      }
      if (isset($vals['code'])) {
        $this->code = $vals['code'];
      }
    }
  }

  public function getName() {
    return 'CommunityResultThrift';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->isSuccess);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CommunityResultThrift');
    if ($this->isSuccess !== null) {
      $xfer += $output->writeFieldBegin('isSuccess', TType::BOOL, 1);
      $xfer += $output->writeBool($this->isSuccess);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->code !== null) {
      $xfer += $output->writeFieldBegin('code', TType::I32, 2);
      $xfer += $output->writeI32($this->code);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class thrift_CommunityBeanThrift {
  static $_TSPEC;

  public $id = null;
  public $name = null;
  public $summary = null;
  public $slogan = null;
  public $pic = null;
  public $createUserid = null;
  public $mobile = null;
  public $contribution = null;
  public $createTime = null;
  public $status = null;
  public $level = null;
  public $type = null;
  public $interest = null;
  public $url = null;
  public $isAudit = null;
  public $flag = null;
  public $userNum = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'summary',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'slogan',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'pic',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'createUserid',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'mobile',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'contribution',
          'type' => TType::I32,
          ),
        9 => array(
          'var' => 'createTime',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'status',
          'type' => TType::I32,
          ),
        11 => array(
          'var' => 'level',
          'type' => TType::I32,
          ),
        12 => array(
          'var' => 'type',
          'type' => TType::I32,
          ),
        13 => array(
          'var' => 'interest',
          'type' => TType::STRING,
          ),
        14 => array(
          'var' => 'url',
          'type' => TType::STRING,
          ),
        15 => array(
          'var' => 'isAudit',
          'type' => TType::I32,
          ),
        16 => array(
          'var' => 'flag',
          'type' => TType::I32,
          ),
        17 => array(
          'var' => 'userNum',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['summary'])) {
        $this->summary = $vals['summary'];
      }
      if (isset($vals['slogan'])) {
        $this->slogan = $vals['slogan'];
      }
      if (isset($vals['pic'])) {
        $this->pic = $vals['pic'];
      }
      if (isset($vals['createUserid'])) {
        $this->createUserid = $vals['createUserid'];
      }
      if (isset($vals['mobile'])) {
        $this->mobile = $vals['mobile'];
      }
      if (isset($vals['contribution'])) {
        $this->contribution = $vals['contribution'];
      }
      if (isset($vals['createTime'])) {
        $this->createTime = $vals['createTime'];
      }
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
      if (isset($vals['level'])) {
        $this->level = $vals['level'];
      }
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['interest'])) {
        $this->interest = $vals['interest'];
      }
      if (isset($vals['url'])) {
        $this->url = $vals['url'];
      }
      if (isset($vals['isAudit'])) {
        $this->isAudit = $vals['isAudit'];
      }
      if (isset($vals['flag'])) {
        $this->flag = $vals['flag'];
      }
      if (isset($vals['userNum'])) {
        $this->userNum = $vals['userNum'];
      }
    }
  }

  public function getName() {
    return 'CommunityBeanThrift';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->summary);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->slogan);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->pic);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->createUserid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->mobile);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->contribution);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->createTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->level);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->interest);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->url);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->isAudit);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->flag);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->userNum);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CommunityBeanThrift');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I32, 1);
      $xfer += $output->writeI32($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 2);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->summary !== null) {
      $xfer += $output->writeFieldBegin('summary', TType::STRING, 3);
      $xfer += $output->writeString($this->summary);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->slogan !== null) {
      $xfer += $output->writeFieldBegin('slogan', TType::STRING, 4);
      $xfer += $output->writeString($this->slogan);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pic !== null) {
      $xfer += $output->writeFieldBegin('pic', TType::STRING, 5);
      $xfer += $output->writeString($this->pic);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->createUserid !== null) {
      $xfer += $output->writeFieldBegin('createUserid', TType::I32, 6);
      $xfer += $output->writeI32($this->createUserid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->mobile !== null) {
      $xfer += $output->writeFieldBegin('mobile', TType::STRING, 7);
      $xfer += $output->writeString($this->mobile);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->contribution !== null) {
      $xfer += $output->writeFieldBegin('contribution', TType::I32, 8);
      $xfer += $output->writeI32($this->contribution);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->createTime !== null) {
      $xfer += $output->writeFieldBegin('createTime', TType::STRING, 9);
      $xfer += $output->writeString($this->createTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->status !== null) {
      $xfer += $output->writeFieldBegin('status', TType::I32, 10);
      $xfer += $output->writeI32($this->status);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->level !== null) {
      $xfer += $output->writeFieldBegin('level', TType::I32, 11);
      $xfer += $output->writeI32($this->level);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::I32, 12);
      $xfer += $output->writeI32($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->interest !== null) {
      $xfer += $output->writeFieldBegin('interest', TType::STRING, 13);
      $xfer += $output->writeString($this->interest);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->url !== null) {
      $xfer += $output->writeFieldBegin('url', TType::STRING, 14);
      $xfer += $output->writeString($this->url);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->isAudit !== null) {
      $xfer += $output->writeFieldBegin('isAudit', TType::I32, 15);
      $xfer += $output->writeI32($this->isAudit);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->flag !== null) {
      $xfer += $output->writeFieldBegin('flag', TType::I32, 16);
      $xfer += $output->writeI32($this->flag);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userNum !== null) {
      $xfer += $output->writeFieldBegin('userNum', TType::I32, 17);
      $xfer += $output->writeI32($this->userNum);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class thrift_CommunityBeanExtThrift {
  static $_TSPEC;

  public $commId = null;
  public $checkinUserNumToday = null;
  public $checkinRateToday = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'commId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'checkinUserNumToday',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'checkinRateToday',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['commId'])) {
        $this->commId = $vals['commId'];
      }
      if (isset($vals['checkinUserNumToday'])) {
        $this->checkinUserNumToday = $vals['checkinUserNumToday'];
      }
      if (isset($vals['checkinRateToday'])) {
        $this->checkinRateToday = $vals['checkinRateToday'];
      }
    }
  }

  public function getName() {
    return 'CommunityBeanExtThrift';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->commId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->checkinUserNumToday);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->checkinRateToday);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CommunityBeanExtThrift');
    if ($this->commId !== null) {
      $xfer += $output->writeFieldBegin('commId', TType::I32, 1);
      $xfer += $output->writeI32($this->commId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->checkinUserNumToday !== null) {
      $xfer += $output->writeFieldBegin('checkinUserNumToday', TType::I32, 2);
      $xfer += $output->writeI32($this->checkinUserNumToday);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->checkinRateToday !== null) {
      $xfer += $output->writeFieldBegin('checkinRateToday', TType::I32, 3);
      $xfer += $output->writeI32($this->checkinRateToday);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class thrift_CommunityListThrift {
  static $_TSPEC;

  public $count = null;
  public $commList = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'count',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'commList',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'thrift_CommunityBeanThrift',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['count'])) {
        $this->count = $vals['count'];
      }
      if (isset($vals['commList'])) {
        $this->commList = $vals['commList'];
      }
    }
  }

  public function getName() {
    return 'CommunityListThrift';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->count);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->commList = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readListBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $elem5 = new thrift_CommunityBeanThrift();
              $xfer += $elem5->read($input);
              $this->commList []= $elem5;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CommunityListThrift');
    if ($this->count !== null) {
      $xfer += $output->writeFieldBegin('count', TType::I32, 1);
      $xfer += $output->writeI32($this->count);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->commList !== null) {
      if (!is_array($this->commList)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('commList', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRUCT, count($this->commList));
        {
          foreach ($this->commList as $iter6)
          {
            $xfer += $iter6->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class thrift_CommunityUserThrift {
  static $_TSPEC;

  public $id = null;
  public $commId = null;
  public $userId = null;
  public $flags = null;
  public $name = null;
  public $createTime = null;
  public $score = null;
  public $checkInNum = null;
  public $nickName = null;
  public $pic = null;
  public $snsPic = null;
  public $todayScore = null;
  public $userTitle = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'commId',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'userId',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'flags',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        5 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'createTime',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'score',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'checkInNum',
          'type' => TType::I32,
          ),
        9 => array(
          'var' => 'nickName',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'pic',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'snsPic',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'todayScore',
          'type' => TType::I32,
          ),
        13 => array(
          'var' => 'userTitle',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['commId'])) {
        $this->commId = $vals['commId'];
      }
      if (isset($vals['userId'])) {
        $this->userId = $vals['userId'];
      }
      if (isset($vals['flags'])) {
        $this->flags = $vals['flags'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['createTime'])) {
        $this->createTime = $vals['createTime'];
      }
      if (isset($vals['score'])) {
        $this->score = $vals['score'];
      }
      if (isset($vals['checkInNum'])) {
        $this->checkInNum = $vals['checkInNum'];
      }
      if (isset($vals['nickName'])) {
        $this->nickName = $vals['nickName'];
      }
      if (isset($vals['pic'])) {
        $this->pic = $vals['pic'];
      }
      if (isset($vals['snsPic'])) {
        $this->snsPic = $vals['snsPic'];
      }
      if (isset($vals['todayScore'])) {
        $this->todayScore = $vals['todayScore'];
      }
      if (isset($vals['userTitle'])) {
        $this->userTitle = $vals['userTitle'];
      }
    }
  }

  public function getName() {
    return 'CommunityUserThrift';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->commId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->userId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::LST) {
            $this->flags = array();
            $_size7 = 0;
            $_etype10 = 0;
            $xfer += $input->readListBegin($_etype10, $_size7);
            for ($_i11 = 0; $_i11 < $_size7; ++$_i11)
            {
              $elem12 = null;
              $xfer += $input->readI32($elem12);
              $this->flags []= $elem12;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->createTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->score);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->checkInNum);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->nickName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->pic);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->snsPic);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->todayScore);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->userTitle);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CommunityUserThrift');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I32, 1);
      $xfer += $output->writeI32($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->commId !== null) {
      $xfer += $output->writeFieldBegin('commId', TType::I32, 2);
      $xfer += $output->writeI32($this->commId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userId !== null) {
      $xfer += $output->writeFieldBegin('userId', TType::I32, 3);
      $xfer += $output->writeI32($this->userId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->flags !== null) {
      if (!is_array($this->flags)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('flags', TType::LST, 4);
      {
        $output->writeListBegin(TType::I32, count($this->flags));
        {
          foreach ($this->flags as $iter13)
          {
            $xfer += $output->writeI32($iter13);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 5);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->createTime !== null) {
      $xfer += $output->writeFieldBegin('createTime', TType::STRING, 6);
      $xfer += $output->writeString($this->createTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->score !== null) {
      $xfer += $output->writeFieldBegin('score', TType::I32, 7);
      $xfer += $output->writeI32($this->score);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->checkInNum !== null) {
      $xfer += $output->writeFieldBegin('checkInNum', TType::I32, 8);
      $xfer += $output->writeI32($this->checkInNum);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->nickName !== null) {
      $xfer += $output->writeFieldBegin('nickName', TType::STRING, 9);
      $xfer += $output->writeString($this->nickName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pic !== null) {
      $xfer += $output->writeFieldBegin('pic', TType::STRING, 10);
      $xfer += $output->writeString($this->pic);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->snsPic !== null) {
      $xfer += $output->writeFieldBegin('snsPic', TType::STRING, 11);
      $xfer += $output->writeString($this->snsPic);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->todayScore !== null) {
      $xfer += $output->writeFieldBegin('todayScore', TType::I32, 12);
      $xfer += $output->writeI32($this->todayScore);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userTitle !== null) {
      $xfer += $output->writeFieldBegin('userTitle', TType::STRING, 13);
      $xfer += $output->writeString($this->userTitle);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class thrift_CommunityUserListThrift {
  static $_TSPEC;

  public $count = null;
  public $commUserList = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'count',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'commUserList',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'thrift_CommunityUserThrift',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['count'])) {
        $this->count = $vals['count'];
      }
      if (isset($vals['commUserList'])) {
        $this->commUserList = $vals['commUserList'];
      }
    }
  }

  public function getName() {
    return 'CommunityUserListThrift';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->count);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->commUserList = array();
            $_size14 = 0;
            $_etype17 = 0;
            $xfer += $input->readListBegin($_etype17, $_size14);
            for ($_i18 = 0; $_i18 < $_size14; ++$_i18)
            {
              $elem19 = null;
              $elem19 = new thrift_CommunityUserThrift();
              $xfer += $elem19->read($input);
              $this->commUserList []= $elem19;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CommunityUserListThrift');
    if ($this->count !== null) {
      $xfer += $output->writeFieldBegin('count', TType::I32, 1);
      $xfer += $output->writeI32($this->count);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->commUserList !== null) {
      if (!is_array($this->commUserList)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('commUserList', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRUCT, count($this->commUserList));
        {
          foreach ($this->commUserList as $iter20)
          {
            $xfer += $iter20->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class thrift_NoticeResultThrift {
  static $_TSPEC;

  public $isSuccess = null;
  public $code = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'isSuccess',
          'type' => TType::BOOL,
          ),
        2 => array(
          'var' => 'code',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['isSuccess'])) {
        $this->isSuccess = $vals['isSuccess'];
      }
      if (isset($vals['code'])) {
        $this->code = $vals['code'];
      }
    }
  }

  public function getName() {
    return 'NoticeResultThrift';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->isSuccess);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('NoticeResultThrift');
    if ($this->isSuccess !== null) {
      $xfer += $output->writeFieldBegin('isSuccess', TType::BOOL, 1);
      $xfer += $output->writeBool($this->isSuccess);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->code !== null) {
      $xfer += $output->writeFieldBegin('code', TType::I32, 2);
      $xfer += $output->writeI32($this->code);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class thrift_CommunityNoticeThrift {
  static $_TSPEC;

  public $id = null;
  public $commId = null;
  public $userId = null;
  public $title = null;
  public $content = null;
  public $createTime = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'commId',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'userId',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'title',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'content',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'createTime',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['commId'])) {
        $this->commId = $vals['commId'];
      }
      if (isset($vals['userId'])) {
        $this->userId = $vals['userId'];
      }
      if (isset($vals['title'])) {
        $this->title = $vals['title'];
      }
      if (isset($vals['content'])) {
        $this->content = $vals['content'];
      }
      if (isset($vals['createTime'])) {
        $this->createTime = $vals['createTime'];
      }
    }
  }

  public function getName() {
    return 'CommunityNoticeThrift';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->commId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->userId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->title);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->content);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->createTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CommunityNoticeThrift');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I32, 1);
      $xfer += $output->writeI32($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->commId !== null) {
      $xfer += $output->writeFieldBegin('commId', TType::I32, 2);
      $xfer += $output->writeI32($this->commId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userId !== null) {
      $xfer += $output->writeFieldBegin('userId', TType::I32, 3);
      $xfer += $output->writeI32($this->userId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->title !== null) {
      $xfer += $output->writeFieldBegin('title', TType::STRING, 4);
      $xfer += $output->writeString($this->title);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->content !== null) {
      $xfer += $output->writeFieldBegin('content', TType::STRING, 5);
      $xfer += $output->writeString($this->content);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->createTime !== null) {
      $xfer += $output->writeFieldBegin('createTime', TType::STRING, 6);
      $xfer += $output->writeString($this->createTime);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class thrift_CommunityThreadThrift {
  static $_TSPEC;

  public $id = null;
  public $commId = null;
  public $threadId = null;
  public $hotDegree = null;
  public $isGood = null;
  public $isVisiable = null;
  public $threadName = null;
  public $forumId = null;
  public $forumName = null;
  public $replyNum = null;
  public $createTime = null;
  public $userId = null;
  public $nickName = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'commId',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'threadId',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'hotDegree',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'isGood',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'isVisiable',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'threadName',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'forumId',
          'type' => TType::I32,
          ),
        9 => array(
          'var' => 'forumName',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'replyNum',
          'type' => TType::I32,
          ),
        11 => array(
          'var' => 'createTime',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'userId',
          'type' => TType::I32,
          ),
        13 => array(
          'var' => 'nickName',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['commId'])) {
        $this->commId = $vals['commId'];
      }
      if (isset($vals['threadId'])) {
        $this->threadId = $vals['threadId'];
      }
      if (isset($vals['hotDegree'])) {
        $this->hotDegree = $vals['hotDegree'];
      }
      if (isset($vals['isGood'])) {
        $this->isGood = $vals['isGood'];
      }
      if (isset($vals['isVisiable'])) {
        $this->isVisiable = $vals['isVisiable'];
      }
      if (isset($vals['threadName'])) {
        $this->threadName = $vals['threadName'];
      }
      if (isset($vals['forumId'])) {
        $this->forumId = $vals['forumId'];
      }
      if (isset($vals['forumName'])) {
        $this->forumName = $vals['forumName'];
      }
      if (isset($vals['replyNum'])) {
        $this->replyNum = $vals['replyNum'];
      }
      if (isset($vals['createTime'])) {
        $this->createTime = $vals['createTime'];
      }
      if (isset($vals['userId'])) {
        $this->userId = $vals['userId'];
      }
      if (isset($vals['nickName'])) {
        $this->nickName = $vals['nickName'];
      }
    }
  }

  public function getName() {
    return 'CommunityThreadThrift';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->commId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->threadId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->hotDegree);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->isGood);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->isVisiable);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->threadName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->forumId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->forumName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->replyNum);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->createTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->userId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->nickName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CommunityThreadThrift');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I32, 1);
      $xfer += $output->writeI32($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->commId !== null) {
      $xfer += $output->writeFieldBegin('commId', TType::I32, 2);
      $xfer += $output->writeI32($this->commId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->threadId !== null) {
      $xfer += $output->writeFieldBegin('threadId', TType::STRING, 3);
      $xfer += $output->writeString($this->threadId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->hotDegree !== null) {
      $xfer += $output->writeFieldBegin('hotDegree', TType::I32, 4);
      $xfer += $output->writeI32($this->hotDegree);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->isGood !== null) {
      $xfer += $output->writeFieldBegin('isGood', TType::I32, 5);
      $xfer += $output->writeI32($this->isGood);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->isVisiable !== null) {
      $xfer += $output->writeFieldBegin('isVisiable', TType::I32, 6);
      $xfer += $output->writeI32($this->isVisiable);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->threadName !== null) {
      $xfer += $output->writeFieldBegin('threadName', TType::STRING, 7);
      $xfer += $output->writeString($this->threadName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->forumId !== null) {
      $xfer += $output->writeFieldBegin('forumId', TType::I32, 8);
      $xfer += $output->writeI32($this->forumId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->forumName !== null) {
      $xfer += $output->writeFieldBegin('forumName', TType::STRING, 9);
      $xfer += $output->writeString($this->forumName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->replyNum !== null) {
      $xfer += $output->writeFieldBegin('replyNum', TType::I32, 10);
      $xfer += $output->writeI32($this->replyNum);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->createTime !== null) {
      $xfer += $output->writeFieldBegin('createTime', TType::STRING, 11);
      $xfer += $output->writeString($this->createTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userId !== null) {
      $xfer += $output->writeFieldBegin('userId', TType::I32, 12);
      $xfer += $output->writeI32($this->userId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->nickName !== null) {
      $xfer += $output->writeFieldBegin('nickName', TType::STRING, 13);
      $xfer += $output->writeString($this->nickName);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class thrift_CommunityThreadListThrift {
  static $_TSPEC;

  public $count = null;
  public $commThreadList = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'count',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'commThreadList',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'thrift_CommunityThreadThrift',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['count'])) {
        $this->count = $vals['count'];
      }
      if (isset($vals['commThreadList'])) {
        $this->commThreadList = $vals['commThreadList'];
      }
    }
  }

  public function getName() {
    return 'CommunityThreadListThrift';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->count);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->commThreadList = array();
            $_size21 = 0;
            $_etype24 = 0;
            $xfer += $input->readListBegin($_etype24, $_size21);
            for ($_i25 = 0; $_i25 < $_size21; ++$_i25)
            {
              $elem26 = null;
              $elem26 = new thrift_CommunityThreadThrift();
              $xfer += $elem26->read($input);
              $this->commThreadList []= $elem26;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CommunityThreadListThrift');
    if ($this->count !== null) {
      $xfer += $output->writeFieldBegin('count', TType::I32, 1);
      $xfer += $output->writeI32($this->count);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->commThreadList !== null) {
      if (!is_array($this->commThreadList)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('commThreadList', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRUCT, count($this->commThreadList));
        {
          foreach ($this->commThreadList as $iter27)
          {
            $xfer += $iter27->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class thrift_UserActionThrift {
  static $_TSPEC;

  public $userId = null;
  public $userName = null;
  public $time = null;
  public $actionType = null;
  public $score = null;
  public $comId = null;
  public $comName = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'userId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'userName',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'time',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'actionType',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'score',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'comId',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'comName',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['userId'])) {
        $this->userId = $vals['userId'];
      }
      if (isset($vals['userName'])) {
        $this->userName = $vals['userName'];
      }
      if (isset($vals['time'])) {
        $this->time = $vals['time'];
      }
      if (isset($vals['actionType'])) {
        $this->actionType = $vals['actionType'];
      }
      if (isset($vals['score'])) {
        $this->score = $vals['score'];
      }
      if (isset($vals['comId'])) {
        $this->comId = $vals['comId'];
      }
      if (isset($vals['comName'])) {
        $this->comName = $vals['comName'];
      }
    }
  }

  public function getName() {
    return 'UserActionThrift';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->userId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->userName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->actionType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->score);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->comId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->comName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('UserActionThrift');
    if ($this->userId !== null) {
      $xfer += $output->writeFieldBegin('userId', TType::I32, 1);
      $xfer += $output->writeI32($this->userId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userName !== null) {
      $xfer += $output->writeFieldBegin('userName', TType::STRING, 2);
      $xfer += $output->writeString($this->userName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->time !== null) {
      $xfer += $output->writeFieldBegin('time', TType::STRING, 3);
      $xfer += $output->writeString($this->time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->actionType !== null) {
      $xfer += $output->writeFieldBegin('actionType', TType::I32, 4);
      $xfer += $output->writeI32($this->actionType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->score !== null) {
      $xfer += $output->writeFieldBegin('score', TType::I32, 5);
      $xfer += $output->writeI32($this->score);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->comId !== null) {
      $xfer += $output->writeFieldBegin('comId', TType::I32, 6);
      $xfer += $output->writeI32($this->comId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->comName !== null) {
      $xfer += $output->writeFieldBegin('comName', TType::STRING, 7);
      $xfer += $output->writeString($this->comName);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class thrift_UserActionListThrift {
  static $_TSPEC;

  public $count = null;
  public $userActionList = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'count',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'userActionList',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'thrift_UserActionThrift',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['count'])) {
        $this->count = $vals['count'];
      }
      if (isset($vals['userActionList'])) {
        $this->userActionList = $vals['userActionList'];
      }
    }
  }

  public function getName() {
    return 'UserActionListThrift';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->count);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->userActionList = array();
            $_size28 = 0;
            $_etype31 = 0;
            $xfer += $input->readListBegin($_etype31, $_size28);
            for ($_i32 = 0; $_i32 < $_size28; ++$_i32)
            {
              $elem33 = null;
              $elem33 = new thrift_UserActionThrift();
              $xfer += $elem33->read($input);
              $this->userActionList []= $elem33;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('UserActionListThrift');
    if ($this->count !== null) {
      $xfer += $output->writeFieldBegin('count', TType::I32, 1);
      $xfer += $output->writeI32($this->count);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userActionList !== null) {
      if (!is_array($this->userActionList)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('userActionList', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRUCT, count($this->userActionList));
        {
          foreach ($this->userActionList as $iter34)
          {
            $xfer += $iter34->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class thrift_CommunityApplyThrift {
  static $_TSPEC;

  public $id = null;
  public $comId = null;
  public $userId = null;
  public $type = null;
  public $content = null;
  public $pic = null;
  public $createTime = null;
  public $auditStatus = null;
  public $nickName = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'comId',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'userId',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'type',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'content',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'pic',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'createTime',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'auditStatus',
          'type' => TType::I32,
          ),
        9 => array(
          'var' => 'nickName',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['comId'])) {
        $this->comId = $vals['comId'];
      }
      if (isset($vals['userId'])) {
        $this->userId = $vals['userId'];
      }
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['content'])) {
        $this->content = $vals['content'];
      }
      if (isset($vals['pic'])) {
        $this->pic = $vals['pic'];
      }
      if (isset($vals['createTime'])) {
        $this->createTime = $vals['createTime'];
      }
      if (isset($vals['auditStatus'])) {
        $this->auditStatus = $vals['auditStatus'];
      }
      if (isset($vals['nickName'])) {
        $this->nickName = $vals['nickName'];
      }
    }
  }

  public function getName() {
    return 'CommunityApplyThrift';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->comId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->userId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->content);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->pic);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->createTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->auditStatus);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->nickName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CommunityApplyThrift');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I32, 1);
      $xfer += $output->writeI32($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->comId !== null) {
      $xfer += $output->writeFieldBegin('comId', TType::I32, 2);
      $xfer += $output->writeI32($this->comId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userId !== null) {
      $xfer += $output->writeFieldBegin('userId', TType::I32, 3);
      $xfer += $output->writeI32($this->userId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::I32, 4);
      $xfer += $output->writeI32($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->content !== null) {
      $xfer += $output->writeFieldBegin('content', TType::STRING, 5);
      $xfer += $output->writeString($this->content);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pic !== null) {
      $xfer += $output->writeFieldBegin('pic', TType::STRING, 6);
      $xfer += $output->writeString($this->pic);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->createTime !== null) {
      $xfer += $output->writeFieldBegin('createTime', TType::STRING, 7);
      $xfer += $output->writeString($this->createTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->auditStatus !== null) {
      $xfer += $output->writeFieldBegin('auditStatus', TType::I32, 8);
      $xfer += $output->writeI32($this->auditStatus);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->nickName !== null) {
      $xfer += $output->writeFieldBegin('nickName', TType::STRING, 9);
      $xfer += $output->writeString($this->nickName);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class thrift_CommunityApplyThriftList {
  static $_TSPEC;

  public $count = null;
  public $comApplyList = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'count',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'comApplyList',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'thrift_CommunityApplyThrift',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['count'])) {
        $this->count = $vals['count'];
      }
      if (isset($vals['comApplyList'])) {
        $this->comApplyList = $vals['comApplyList'];
      }
    }
  }

  public function getName() {
    return 'CommunityApplyThriftList';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->count);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->comApplyList = array();
            $_size35 = 0;
            $_etype38 = 0;
            $xfer += $input->readListBegin($_etype38, $_size35);
            for ($_i39 = 0; $_i39 < $_size35; ++$_i39)
            {
              $elem40 = null;
              $elem40 = new thrift_CommunityApplyThrift();
              $xfer += $elem40->read($input);
              $this->comApplyList []= $elem40;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CommunityApplyThriftList');
    if ($this->count !== null) {
      $xfer += $output->writeFieldBegin('count', TType::I32, 1);
      $xfer += $output->writeI32($this->count);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->comApplyList !== null) {
      if (!is_array($this->comApplyList)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('comApplyList', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRUCT, count($this->comApplyList));
        {
          foreach ($this->comApplyList as $iter41)
          {
            $xfer += $iter41->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

?>
