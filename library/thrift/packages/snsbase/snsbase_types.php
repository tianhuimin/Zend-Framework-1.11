<?php
/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
include_once $GLOBALS['THRIFT_ROOT'].'/Thrift.php';


class thrift_VipContent {
  static $_TSPEC;

  public $userState = null;
  public $vipState = null;
  public $vipPoint = null;
  public $vipGrade = null;
  public $expireTime = null;
  public $vippic = null;
  public $nickName = null;
  public $speed = null;
  public $userId = null;
  public $vipSpeedPic = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'userState',
          'type' => TType::BOOL,
          ),
        2 => array(
          'var' => 'vipState',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'vipPoint',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'vipGrade',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'expireTime',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'vippic',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'nickName',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'speed',
          'type' => TType::I32,
          ),
        9 => array(
          'var' => 'userId',
          'type' => TType::I32,
          ),
        10 => array(
          'var' => 'vipSpeedPic',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['userState'])) {
        $this->userState = $vals['userState'];
      }
      if (isset($vals['vipState'])) {
        $this->vipState = $vals['vipState'];
      }
      if (isset($vals['vipPoint'])) {
        $this->vipPoint = $vals['vipPoint'];
      }
      if (isset($vals['vipGrade'])) {
        $this->vipGrade = $vals['vipGrade'];
      }
      if (isset($vals['expireTime'])) {
        $this->expireTime = $vals['expireTime'];
      }
      if (isset($vals['vippic'])) {
        $this->vippic = $vals['vippic'];
      }
      if (isset($vals['nickName'])) {
        $this->nickName = $vals['nickName'];
      }
      if (isset($vals['speed'])) {
        $this->speed = $vals['speed'];
      }
      if (isset($vals['userId'])) {
        $this->userId = $vals['userId'];
      }
      if (isset($vals['vipSpeedPic'])) {
        $this->vipSpeedPic = $vals['vipSpeedPic'];
      }
    }
  }

  public function getName() {
    return 'VipContent';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->userState);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->vipState);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->vipPoint);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->vipGrade);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->expireTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->vippic);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->nickName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->speed);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->userId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->vipSpeedPic);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('VipContent');
    if ($this->userState !== null) {
      $xfer += $output->writeFieldBegin('userState', TType::BOOL, 1);
      $xfer += $output->writeBool($this->userState);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->vipState !== null) {
      $xfer += $output->writeFieldBegin('vipState', TType::I32, 2);
      $xfer += $output->writeI32($this->vipState);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->vipPoint !== null) {
      $xfer += $output->writeFieldBegin('vipPoint', TType::I32, 3);
      $xfer += $output->writeI32($this->vipPoint);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->vipGrade !== null) {
      $xfer += $output->writeFieldBegin('vipGrade', TType::I32, 4);
      $xfer += $output->writeI32($this->vipGrade);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->expireTime !== null) {
      $xfer += $output->writeFieldBegin('expireTime', TType::STRING, 5);
      $xfer += $output->writeString($this->expireTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->vippic !== null) {
      $xfer += $output->writeFieldBegin('vippic', TType::STRING, 6);
      $xfer += $output->writeString($this->vippic);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->nickName !== null) {
      $xfer += $output->writeFieldBegin('nickName', TType::STRING, 7);
      $xfer += $output->writeString($this->nickName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->speed !== null) {
      $xfer += $output->writeFieldBegin('speed', TType::I32, 8);
      $xfer += $output->writeI32($this->speed);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userId !== null) {
      $xfer += $output->writeFieldBegin('userId', TType::I32, 9);
      $xfer += $output->writeI32($this->userId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->vipSpeedPic !== null) {
      $xfer += $output->writeFieldBegin('vipSpeedPic', TType::STRING, 10);
      $xfer += $output->writeString($this->vipSpeedPic);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class thrift_VipResult {
  static $_TSPEC;

  public $openVipState = null;
  public $userState = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'openVipState',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'userState',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['openVipState'])) {
        $this->openVipState = $vals['openVipState'];
      }
      if (isset($vals['userState'])) {
        $this->userState = $vals['userState'];
      }
    }
  }

  public function getName() {
    return 'VipResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->openVipState);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->userState);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('VipResult');
    if ($this->openVipState !== null) {
      $xfer += $output->writeFieldBegin('openVipState', TType::I32, 1);
      $xfer += $output->writeI32($this->openVipState);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userState !== null) {
      $xfer += $output->writeFieldBegin('userState', TType::BOOL, 2);
      $xfer += $output->writeBool($this->userState);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class thrift_VipOpenedResult {
  static $_TSPEC;

  public $openVipState = null;
  public $userState = null;
  public $kubiState = null;
  public $typeState = null;
  public $userId = null;
  public $nickName = null;
  public $speed = null;
  public $vipPic = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'openVipState',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'userState',
          'type' => TType::BOOL,
          ),
        3 => array(
          'var' => 'kubiState',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'typeState',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'userId',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'nickName',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'speed',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'vipPic',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['openVipState'])) {
        $this->openVipState = $vals['openVipState'];
      }
      if (isset($vals['userState'])) {
        $this->userState = $vals['userState'];
      }
      if (isset($vals['kubiState'])) {
        $this->kubiState = $vals['kubiState'];
      }
      if (isset($vals['typeState'])) {
        $this->typeState = $vals['typeState'];
      }
      if (isset($vals['userId'])) {
        $this->userId = $vals['userId'];
      }
      if (isset($vals['nickName'])) {
        $this->nickName = $vals['nickName'];
      }
      if (isset($vals['speed'])) {
        $this->speed = $vals['speed'];
      }
      if (isset($vals['vipPic'])) {
        $this->vipPic = $vals['vipPic'];
      }
    }
  }

  public function getName() {
    return 'VipOpenedResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->openVipState);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->userState);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->kubiState);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->typeState);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->userId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->nickName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->speed);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->vipPic);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('VipOpenedResult');
    if ($this->openVipState !== null) {
      $xfer += $output->writeFieldBegin('openVipState', TType::I32, 1);
      $xfer += $output->writeI32($this->openVipState);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userState !== null) {
      $xfer += $output->writeFieldBegin('userState', TType::BOOL, 2);
      $xfer += $output->writeBool($this->userState);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->kubiState !== null) {
      $xfer += $output->writeFieldBegin('kubiState', TType::I32, 3);
      $xfer += $output->writeI32($this->kubiState);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->typeState !== null) {
      $xfer += $output->writeFieldBegin('typeState', TType::I32, 4);
      $xfer += $output->writeI32($this->typeState);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userId !== null) {
      $xfer += $output->writeFieldBegin('userId', TType::I32, 5);
      $xfer += $output->writeI32($this->userId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->nickName !== null) {
      $xfer += $output->writeFieldBegin('nickName', TType::STRING, 6);
      $xfer += $output->writeString($this->nickName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->speed !== null) {
      $xfer += $output->writeFieldBegin('speed', TType::I32, 7);
      $xfer += $output->writeI32($this->speed);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->vipPic !== null) {
      $xfer += $output->writeFieldBegin('vipPic', TType::STRING, 8);
      $xfer += $output->writeString($this->vipPic);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class thrift_VipRecord {
  static $_TSPEC;

  public $vipFlag = null;
  public $renewalTime = null;
  public $monthNum = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'vipFlag',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'renewalTime',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'monthNum',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['vipFlag'])) {
        $this->vipFlag = $vals['vipFlag'];
      }
      if (isset($vals['renewalTime'])) {
        $this->renewalTime = $vals['renewalTime'];
      }
      if (isset($vals['monthNum'])) {
        $this->monthNum = $vals['monthNum'];
      }
    }
  }

  public function getName() {
    return 'VipRecord';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->vipFlag);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->renewalTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->monthNum);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('VipRecord');
    if ($this->vipFlag !== null) {
      $xfer += $output->writeFieldBegin('vipFlag', TType::I32, 1);
      $xfer += $output->writeI32($this->vipFlag);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->renewalTime !== null) {
      $xfer += $output->writeFieldBegin('renewalTime', TType::STRING, 2);
      $xfer += $output->writeString($this->renewalTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->monthNum !== null) {
      $xfer += $output->writeFieldBegin('monthNum', TType::I32, 3);
      $xfer += $output->writeI32($this->monthNum);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class thrift_VipHistory {
  static $_TSPEC;

  public $flag = null;
  public $remainDays = null;
  public $records = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'flag',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'remainDays',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'records',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'thrift_VipRecord',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['flag'])) {
        $this->flag = $vals['flag'];
      }
      if (isset($vals['remainDays'])) {
        $this->remainDays = $vals['remainDays'];
      }
      if (isset($vals['records'])) {
        $this->records = $vals['records'];
      }
    }
  }

  public function getName() {
    return 'VipHistory';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->flag);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->remainDays);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->records = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readListBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $elem5 = new thrift_VipRecord();
              $xfer += $elem5->read($input);
              $this->records []= $elem5;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('VipHistory');
    if ($this->flag !== null) {
      $xfer += $output->writeFieldBegin('flag', TType::I32, 1);
      $xfer += $output->writeI32($this->flag);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->remainDays !== null) {
      $xfer += $output->writeFieldBegin('remainDays', TType::I32, 2);
      $xfer += $output->writeI32($this->remainDays);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->records !== null) {
      if (!is_array($this->records)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('records', TType::LST, 3);
      {
        $output->writeListBegin(TType::STRUCT, count($this->records));
        {
          foreach ($this->records as $iter6)
          {
            $xfer += $iter6->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

?>
