<?php
/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
include_once $GLOBALS['THRIFT_ROOT'].'/Thrift.php';

include_once $GLOBALS['THRIFT_ROOT'].'/packages/common/common_types.php';

$GLOBALS['E_Strategy'] = array(
  'SDK_STRATEGY' => 1,
  'APP_STRATEGY' => 2,
  'USER_STRATEGY' => 3,
  'OPERATE_STRATEGY' => 4,
  'BATCH_USER_STRATEGY' => 5,
);

final class Strategy {
  const SDK_STRATEGY = 1;
  const APP_STRATEGY = 2;
  const USER_STRATEGY = 3;
  const OPERATE_STRATEGY = 4;
  const BATCH_USER_STRATEGY = 5;
  static public $__names = array(
    1 => 'SDK_STRATEGY',
    2 => 'APP_STRATEGY',
    3 => 'USER_STRATEGY',
    4 => 'OPERATE_STRATEGY',
    5 => 'BATCH_USER_STRATEGY',
  );
}

$GLOBALS['E_MessageLingQuType'] = array(
  'MESSAGE_LINGQU' => 1,
  'MESSAGE_IS_LINGQU' => 2,
  'MESSAGE_LINGQU_DELETE' => 3,
);

final class MessageLingQuType {
  const MESSAGE_LINGQU = 1;
  const MESSAGE_IS_LINGQU = 2;
  const MESSAGE_LINGQU_DELETE = 3;
  static public $__names = array(
    1 => 'MESSAGE_LINGQU',
    2 => 'MESSAGE_IS_LINGQU',
    3 => 'MESSAGE_LINGQU_DELETE',
  );
}

$GLOBALS['E_MsgType'] = array(
  'TEXT_TYPE' => 1,
  'GAIN_SCORE_TYPE' => 2,
  'JOIN_PRIZE_TYPE' => 3,
  'SIGN_UP_ACTIVITY_TYPE' => 4,
  'DOWN_LOAD_GAME_TYPE' => 5,
  'GIFT_DETAIL_JUMP_TYPE' => 6,
  'GAME_DETAIL_JUMP_TYPE' => 7,
  'ACTIVITY_DETAIL_JUMP_TYPE' => 8,
  'URL_JUMP_TYPE' => 9,
  'GAIN_VOUCHER_TYPE' => 10,
  'GAIN_GAME_VOUCHER_TYPE' => 11,
);

final class MsgType {
  const TEXT_TYPE = 1;
  const GAIN_SCORE_TYPE = 2;
  const JOIN_PRIZE_TYPE = 3;
  const SIGN_UP_ACTIVITY_TYPE = 4;
  const DOWN_LOAD_GAME_TYPE = 5;
  const GIFT_DETAIL_JUMP_TYPE = 6;
  const GAME_DETAIL_JUMP_TYPE = 7;
  const ACTIVITY_DETAIL_JUMP_TYPE = 8;
  const URL_JUMP_TYPE = 9;
  const GAIN_VOUCHER_TYPE = 10;
  const GAIN_GAME_VOUCHER_TYPE = 11;
  static public $__names = array(
    1 => 'TEXT_TYPE',
    2 => 'GAIN_SCORE_TYPE',
    3 => 'JOIN_PRIZE_TYPE',
    4 => 'SIGN_UP_ACTIVITY_TYPE',
    5 => 'DOWN_LOAD_GAME_TYPE',
    6 => 'GIFT_DETAIL_JUMP_TYPE',
    7 => 'GAME_DETAIL_JUMP_TYPE',
    8 => 'ACTIVITY_DETAIL_JUMP_TYPE',
    9 => 'URL_JUMP_TYPE',
    10 => 'GAIN_VOUCHER_TYPE',
    11 => 'GAIN_GAME_VOUCHER_TYPE',
  );
}

class SystemStrategy {
  static $_TSPEC;

  public $sdkId = null;
  public $appId = null;
  public $userId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'sdkId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'appId',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'userId',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['sdkId'])) {
        $this->sdkId = $vals['sdkId'];
      }
      if (isset($vals['appId'])) {
        $this->appId = $vals['appId'];
      }
      if (isset($vals['userId'])) {
        $this->userId = $vals['userId'];
      }
    }
  }

  public function getName() {
    return 'SystemStrategy';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->sdkId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->appId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->userId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SystemStrategy');
    if ($this->sdkId !== null) {
      $xfer += $output->writeFieldBegin('sdkId', TType::I32, 1);
      $xfer += $output->writeI32($this->sdkId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->appId !== null) {
      $xfer += $output->writeFieldBegin('appId', TType::I32, 2);
      $xfer += $output->writeI32($this->appId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userId !== null) {
      $xfer += $output->writeFieldBegin('userId', TType::I32, 3);
      $xfer += $output->writeI32($this->userId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OperateStrategy {
  static $_TSPEC;

  public $msgType = null;
  public $content = null;
  public $gameResource = null;
  public $expiredTime = null;
  public $vipLevel = null;
  public $channel = null;
  public $gameIdList = null;
  public $beginScore = null;
  public $endScore = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'msgType',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'content',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'gameResource',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        4 => array(
          'var' => 'expiredTime',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'vipLevel',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'channel',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'gameIdList',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        8 => array(
          'var' => 'beginScore',
          'type' => TType::I32,
          ),
        9 => array(
          'var' => 'endScore',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['msgType'])) {
        $this->msgType = $vals['msgType'];
      }
      if (isset($vals['content'])) {
        $this->content = $vals['content'];
      }
      if (isset($vals['gameResource'])) {
        $this->gameResource = $vals['gameResource'];
      }
      if (isset($vals['expiredTime'])) {
        $this->expiredTime = $vals['expiredTime'];
      }
      if (isset($vals['vipLevel'])) {
        $this->vipLevel = $vals['vipLevel'];
      }
      if (isset($vals['channel'])) {
        $this->channel = $vals['channel'];
      }
      if (isset($vals['gameIdList'])) {
        $this->gameIdList = $vals['gameIdList'];
      }
      if (isset($vals['beginScore'])) {
        $this->beginScore = $vals['beginScore'];
      }
      if (isset($vals['endScore'])) {
        $this->endScore = $vals['endScore'];
      }
    }
  }

  public function getName() {
    return 'OperateStrategy';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->msgType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->content);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->gameResource = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readListBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $xfer += $input->readI32($elem5);
              $this->gameResource []= $elem5;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->expiredTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->vipLevel);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->channel);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::LST) {
            $this->gameIdList = array();
            $_size6 = 0;
            $_etype9 = 0;
            $xfer += $input->readListBegin($_etype9, $_size6);
            for ($_i10 = 0; $_i10 < $_size6; ++$_i10)
            {
              $elem11 = null;
              $xfer += $input->readI32($elem11);
              $this->gameIdList []= $elem11;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->beginScore);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->endScore);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OperateStrategy');
    if ($this->msgType !== null) {
      $xfer += $output->writeFieldBegin('msgType', TType::I32, 1);
      $xfer += $output->writeI32($this->msgType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->content !== null) {
      $xfer += $output->writeFieldBegin('content', TType::STRING, 2);
      $xfer += $output->writeString($this->content);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->gameResource !== null) {
      if (!is_array($this->gameResource)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('gameResource', TType::LST, 3);
      {
        $output->writeListBegin(TType::I32, count($this->gameResource));
        {
          foreach ($this->gameResource as $iter12)
          {
            $xfer += $output->writeI32($iter12);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->expiredTime !== null) {
      $xfer += $output->writeFieldBegin('expiredTime', TType::I64, 4);
      $xfer += $output->writeI64($this->expiredTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->vipLevel !== null) {
      $xfer += $output->writeFieldBegin('vipLevel', TType::I32, 5);
      $xfer += $output->writeI32($this->vipLevel);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->channel !== null) {
      $xfer += $output->writeFieldBegin('channel', TType::I32, 6);
      $xfer += $output->writeI32($this->channel);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->gameIdList !== null) {
      if (!is_array($this->gameIdList)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('gameIdList', TType::LST, 7);
      {
        $output->writeListBegin(TType::I32, count($this->gameIdList));
        {
          foreach ($this->gameIdList as $iter13)
          {
            $xfer += $output->writeI32($iter13);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->beginScore !== null) {
      $xfer += $output->writeFieldBegin('beginScore', TType::I32, 8);
      $xfer += $output->writeI32($this->beginScore);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->endScore !== null) {
      $xfer += $output->writeFieldBegin('endScore', TType::I32, 9);
      $xfer += $output->writeI32($this->endScore);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BatchUserStrategy {
  static $_TSPEC;

  public $userList = null;
  public $msgType = null;
  public $content = null;
  public $gameResource = null;
  public $expiredTime = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'userList',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        2 => array(
          'var' => 'msgType',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'content',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'gameResource',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        5 => array(
          'var' => 'expiredTime',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['userList'])) {
        $this->userList = $vals['userList'];
      }
      if (isset($vals['msgType'])) {
        $this->msgType = $vals['msgType'];
      }
      if (isset($vals['content'])) {
        $this->content = $vals['content'];
      }
      if (isset($vals['gameResource'])) {
        $this->gameResource = $vals['gameResource'];
      }
      if (isset($vals['expiredTime'])) {
        $this->expiredTime = $vals['expiredTime'];
      }
    }
  }

  public function getName() {
    return 'BatchUserStrategy';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->userList = array();
            $_size14 = 0;
            $_etype17 = 0;
            $xfer += $input->readListBegin($_etype17, $_size14);
            for ($_i18 = 0; $_i18 < $_size14; ++$_i18)
            {
              $elem19 = null;
              $xfer += $input->readI32($elem19);
              $this->userList []= $elem19;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->msgType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->content);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::LST) {
            $this->gameResource = array();
            $_size20 = 0;
            $_etype23 = 0;
            $xfer += $input->readListBegin($_etype23, $_size20);
            for ($_i24 = 0; $_i24 < $_size20; ++$_i24)
            {
              $elem25 = null;
              $xfer += $input->readI32($elem25);
              $this->gameResource []= $elem25;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->expiredTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BatchUserStrategy');
    if ($this->userList !== null) {
      if (!is_array($this->userList)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('userList', TType::LST, 1);
      {
        $output->writeListBegin(TType::I32, count($this->userList));
        {
          foreach ($this->userList as $iter26)
          {
            $xfer += $output->writeI32($iter26);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->msgType !== null) {
      $xfer += $output->writeFieldBegin('msgType', TType::I32, 2);
      $xfer += $output->writeI32($this->msgType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->content !== null) {
      $xfer += $output->writeFieldBegin('content', TType::STRING, 3);
      $xfer += $output->writeString($this->content);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->gameResource !== null) {
      if (!is_array($this->gameResource)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('gameResource', TType::LST, 4);
      {
        $output->writeListBegin(TType::I32, count($this->gameResource));
        {
          foreach ($this->gameResource as $iter27)
          {
            $xfer += $output->writeI32($iter27);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->expiredTime !== null) {
      $xfer += $output->writeFieldBegin('expiredTime', TType::I64, 5);
      $xfer += $output->writeI64($this->expiredTime);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class MsgContent {
  static $_TSPEC;

  public $msgId = null;
  public $content = null;
  public $messageTitle = null;
  public $messageSource = null;
  public $time = null;
  public $overview = null;
  public $systemStrategy = null;
  public $operateStrategy = null;
  public $batchUserStrategy = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'msgId',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'content',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'messageTitle',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'messageSource',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'time',
          'type' => TType::I64,
          ),
        6 => array(
          'var' => 'overview',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'systemStrategy',
          'type' => TType::STRUCT,
          'class' => 'SystemStrategy',
          ),
        8 => array(
          'var' => 'operateStrategy',
          'type' => TType::STRUCT,
          'class' => 'OperateStrategy',
          ),
        9 => array(
          'var' => 'batchUserStrategy',
          'type' => TType::STRUCT,
          'class' => 'BatchUserStrategy',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['msgId'])) {
        $this->msgId = $vals['msgId'];
      }
      if (isset($vals['content'])) {
        $this->content = $vals['content'];
      }
      if (isset($vals['messageTitle'])) {
        $this->messageTitle = $vals['messageTitle'];
      }
      if (isset($vals['messageSource'])) {
        $this->messageSource = $vals['messageSource'];
      }
      if (isset($vals['time'])) {
        $this->time = $vals['time'];
      }
      if (isset($vals['overview'])) {
        $this->overview = $vals['overview'];
      }
      if (isset($vals['systemStrategy'])) {
        $this->systemStrategy = $vals['systemStrategy'];
      }
      if (isset($vals['operateStrategy'])) {
        $this->operateStrategy = $vals['operateStrategy'];
      }
      if (isset($vals['batchUserStrategy'])) {
        $this->batchUserStrategy = $vals['batchUserStrategy'];
      }
    }
  }

  public function getName() {
    return 'MsgContent';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->msgId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->content);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->messageTitle);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->messageSource);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->overview);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRUCT) {
            $this->systemStrategy = new SystemStrategy();
            $xfer += $this->systemStrategy->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRUCT) {
            $this->operateStrategy = new OperateStrategy();
            $xfer += $this->operateStrategy->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRUCT) {
            $this->batchUserStrategy = new BatchUserStrategy();
            $xfer += $this->batchUserStrategy->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MsgContent');
    if ($this->msgId !== null) {
      $xfer += $output->writeFieldBegin('msgId', TType::I64, 1);
      $xfer += $output->writeI64($this->msgId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->content !== null) {
      $xfer += $output->writeFieldBegin('content', TType::STRING, 2);
      $xfer += $output->writeString($this->content);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->messageTitle !== null) {
      $xfer += $output->writeFieldBegin('messageTitle', TType::STRING, 3);
      $xfer += $output->writeString($this->messageTitle);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->messageSource !== null) {
      $xfer += $output->writeFieldBegin('messageSource', TType::STRING, 4);
      $xfer += $output->writeString($this->messageSource);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->time !== null) {
      $xfer += $output->writeFieldBegin('time', TType::I64, 5);
      $xfer += $output->writeI64($this->time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->overview !== null) {
      $xfer += $output->writeFieldBegin('overview', TType::STRING, 6);
      $xfer += $output->writeString($this->overview);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->systemStrategy !== null) {
      if (!is_object($this->systemStrategy)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('systemStrategy', TType::STRUCT, 7);
      $xfer += $this->systemStrategy->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->operateStrategy !== null) {
      if (!is_object($this->operateStrategy)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('operateStrategy', TType::STRUCT, 8);
      $xfer += $this->operateStrategy->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->batchUserStrategy !== null) {
      if (!is_object($this->batchUserStrategy)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('batchUserStrategy', TType::STRUCT, 9);
      $xfer += $this->batchUserStrategy->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Message {
  static $_TSPEC;

  public $msgId = null;
  public $content = null;
  public $strategy = null;
  public $createTime = null;
  public $updateTime = null;
  public $isRead = null;
  public $isTop = null;
  public $isFlag = null;
  public $iconUrl = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'msgId',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'content',
          'type' => TType::STRUCT,
          'class' => 'MsgContent',
          ),
        3 => array(
          'var' => 'strategy',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'createTime',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'updateTime',
          'type' => TType::I64,
          ),
        6 => array(
          'var' => 'isRead',
          'type' => TType::BOOL,
          ),
        7 => array(
          'var' => 'isTop',
          'type' => TType::BOOL,
          ),
        8 => array(
          'var' => 'isFlag',
          'type' => TType::BOOL,
          ),
        9 => array(
          'var' => 'iconUrl',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['msgId'])) {
        $this->msgId = $vals['msgId'];
      }
      if (isset($vals['content'])) {
        $this->content = $vals['content'];
      }
      if (isset($vals['strategy'])) {
        $this->strategy = $vals['strategy'];
      }
      if (isset($vals['createTime'])) {
        $this->createTime = $vals['createTime'];
      }
      if (isset($vals['updateTime'])) {
        $this->updateTime = $vals['updateTime'];
      }
      if (isset($vals['isRead'])) {
        $this->isRead = $vals['isRead'];
      }
      if (isset($vals['isTop'])) {
        $this->isTop = $vals['isTop'];
      }
      if (isset($vals['isFlag'])) {
        $this->isFlag = $vals['isFlag'];
      }
      if (isset($vals['iconUrl'])) {
        $this->iconUrl = $vals['iconUrl'];
      }
    }
  }

  public function getName() {
    return 'Message';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->msgId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->content = new MsgContent();
            $xfer += $this->content->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->strategy);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->createTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->updateTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->isRead);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->isTop);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->isFlag);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->iconUrl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Message');
    if ($this->msgId !== null) {
      $xfer += $output->writeFieldBegin('msgId', TType::I64, 1);
      $xfer += $output->writeI64($this->msgId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->content !== null) {
      if (!is_object($this->content)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('content', TType::STRUCT, 2);
      $xfer += $this->content->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->strategy !== null) {
      $xfer += $output->writeFieldBegin('strategy', TType::I32, 3);
      $xfer += $output->writeI32($this->strategy);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->createTime !== null) {
      $xfer += $output->writeFieldBegin('createTime', TType::I64, 4);
      $xfer += $output->writeI64($this->createTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->updateTime !== null) {
      $xfer += $output->writeFieldBegin('updateTime', TType::I64, 5);
      $xfer += $output->writeI64($this->updateTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->isRead !== null) {
      $xfer += $output->writeFieldBegin('isRead', TType::BOOL, 6);
      $xfer += $output->writeBool($this->isRead);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->isTop !== null) {
      $xfer += $output->writeFieldBegin('isTop', TType::BOOL, 7);
      $xfer += $output->writeBool($this->isTop);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->isFlag !== null) {
      $xfer += $output->writeFieldBegin('isFlag', TType::BOOL, 8);
      $xfer += $output->writeBool($this->isFlag);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->iconUrl !== null) {
      $xfer += $output->writeFieldBegin('iconUrl', TType::STRING, 9);
      $xfer += $output->writeString($this->iconUrl);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class PushMessagesRequest {
  static $_TSPEC;

  public $strategy = null;
  public $content = null;
  public $startTime = null;
  public $endTime = null;
  public $isTop = null;
  public $isFlag = null;
  public $iconUrl = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'strategy',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'content',
          'type' => TType::STRUCT,
          'class' => 'MsgContent',
          ),
        3 => array(
          'var' => 'startTime',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'endTime',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'isTop',
          'type' => TType::BOOL,
          ),
        6 => array(
          'var' => 'isFlag',
          'type' => TType::BOOL,
          ),
        7 => array(
          'var' => 'iconUrl',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['strategy'])) {
        $this->strategy = $vals['strategy'];
      }
      if (isset($vals['content'])) {
        $this->content = $vals['content'];
      }
      if (isset($vals['startTime'])) {
        $this->startTime = $vals['startTime'];
      }
      if (isset($vals['endTime'])) {
        $this->endTime = $vals['endTime'];
      }
      if (isset($vals['isTop'])) {
        $this->isTop = $vals['isTop'];
      }
      if (isset($vals['isFlag'])) {
        $this->isFlag = $vals['isFlag'];
      }
      if (isset($vals['iconUrl'])) {
        $this->iconUrl = $vals['iconUrl'];
      }
    }
  }

  public function getName() {
    return 'PushMessagesRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->strategy);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->content = new MsgContent();
            $xfer += $this->content->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->startTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->endTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->isTop);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->isFlag);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->iconUrl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PushMessagesRequest');
    if ($this->strategy !== null) {
      $xfer += $output->writeFieldBegin('strategy', TType::I32, 1);
      $xfer += $output->writeI32($this->strategy);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->content !== null) {
      if (!is_object($this->content)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('content', TType::STRUCT, 2);
      $xfer += $this->content->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->startTime !== null) {
      $xfer += $output->writeFieldBegin('startTime', TType::I64, 3);
      $xfer += $output->writeI64($this->startTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->endTime !== null) {
      $xfer += $output->writeFieldBegin('endTime', TType::I64, 4);
      $xfer += $output->writeI64($this->endTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->isTop !== null) {
      $xfer += $output->writeFieldBegin('isTop', TType::BOOL, 5);
      $xfer += $output->writeBool($this->isTop);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->isFlag !== null) {
      $xfer += $output->writeFieldBegin('isFlag', TType::BOOL, 6);
      $xfer += $output->writeBool($this->isFlag);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->iconUrl !== null) {
      $xfer += $output->writeFieldBegin('iconUrl', TType::STRING, 7);
      $xfer += $output->writeString($this->iconUrl);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class PushMessagesResponse {
  static $_TSPEC;

  public $isSuccess = null;
  public $error = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'isSuccess',
          'type' => TType::BOOL,
          ),
        2 => array(
          'var' => 'error',
          'type' => TType::STRUCT,
          'class' => 'ExceptionDes',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['isSuccess'])) {
        $this->isSuccess = $vals['isSuccess'];
      }
      if (isset($vals['error'])) {
        $this->error = $vals['error'];
      }
    }
  }

  public function getName() {
    return 'PushMessagesResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->isSuccess);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->error = new ExceptionDes();
            $xfer += $this->error->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PushMessagesResponse');
    if ($this->isSuccess !== null) {
      $xfer += $output->writeFieldBegin('isSuccess', TType::BOOL, 1);
      $xfer += $output->writeBool($this->isSuccess);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->error !== null) {
      if (!is_object($this->error)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('error', TType::STRUCT, 2);
      $xfer += $this->error->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetUserMessagesResponse {
  static $_TSPEC;

  public $messages = null;
  public $pageId = null;
  public $error = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'messages',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'Message',
            ),
          ),
        2 => array(
          'var' => 'pageId',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'error',
          'type' => TType::STRUCT,
          'class' => 'ExceptionDes',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['messages'])) {
        $this->messages = $vals['messages'];
      }
      if (isset($vals['pageId'])) {
        $this->pageId = $vals['pageId'];
      }
      if (isset($vals['error'])) {
        $this->error = $vals['error'];
      }
    }
  }

  public function getName() {
    return 'GetUserMessagesResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->messages = array();
            $_size28 = 0;
            $_etype31 = 0;
            $xfer += $input->readListBegin($_etype31, $_size28);
            for ($_i32 = 0; $_i32 < $_size28; ++$_i32)
            {
              $elem33 = null;
              $elem33 = new Message();
              $xfer += $elem33->read($input);
              $this->messages []= $elem33;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->pageId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->error = new ExceptionDes();
            $xfer += $this->error->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetUserMessagesResponse');
    if ($this->messages !== null) {
      if (!is_array($this->messages)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('messages', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->messages));
        {
          foreach ($this->messages as $iter34)
          {
            $xfer += $iter34->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pageId !== null) {
      $xfer += $output->writeFieldBegin('pageId', TType::I32, 2);
      $xfer += $output->writeI32($this->pageId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->error !== null) {
      if (!is_object($this->error)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('error', TType::STRUCT, 3);
      $xfer += $this->error->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetUserMessagesRequest {
  static $_TSPEC;

  public $userId = null;
  public $appId = null;
  public $sdkId = null;
  public $pageId = null;
  public $limit = null;
  public $vipLevel = null;
  public $channel = null;
  public $score = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'userId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'appId',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'sdkId',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'pageId',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'limit',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'vipLevel',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'channel',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'score',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['userId'])) {
        $this->userId = $vals['userId'];
      }
      if (isset($vals['appId'])) {
        $this->appId = $vals['appId'];
      }
      if (isset($vals['sdkId'])) {
        $this->sdkId = $vals['sdkId'];
      }
      if (isset($vals['pageId'])) {
        $this->pageId = $vals['pageId'];
      }
      if (isset($vals['limit'])) {
        $this->limit = $vals['limit'];
      }
      if (isset($vals['vipLevel'])) {
        $this->vipLevel = $vals['vipLevel'];
      }
      if (isset($vals['channel'])) {
        $this->channel = $vals['channel'];
      }
      if (isset($vals['score'])) {
        $this->score = $vals['score'];
      }
    }
  }

  public function getName() {
    return 'GetUserMessagesRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->userId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->appId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->sdkId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->pageId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->limit);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->vipLevel);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->channel);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->score);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetUserMessagesRequest');
    if ($this->userId !== null) {
      $xfer += $output->writeFieldBegin('userId', TType::I32, 1);
      $xfer += $output->writeI32($this->userId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->appId !== null) {
      $xfer += $output->writeFieldBegin('appId', TType::I32, 2);
      $xfer += $output->writeI32($this->appId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sdkId !== null) {
      $xfer += $output->writeFieldBegin('sdkId', TType::I32, 3);
      $xfer += $output->writeI32($this->sdkId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pageId !== null) {
      $xfer += $output->writeFieldBegin('pageId', TType::I32, 4);
      $xfer += $output->writeI32($this->pageId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->limit !== null) {
      $xfer += $output->writeFieldBegin('limit', TType::I32, 5);
      $xfer += $output->writeI32($this->limit);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->vipLevel !== null) {
      $xfer += $output->writeFieldBegin('vipLevel', TType::I32, 6);
      $xfer += $output->writeI32($this->vipLevel);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->channel !== null) {
      $xfer += $output->writeFieldBegin('channel', TType::I32, 7);
      $xfer += $output->writeI32($this->channel);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->score !== null) {
      $xfer += $output->writeFieldBegin('score', TType::I32, 8);
      $xfer += $output->writeI32($this->score);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class MarkUserMessageReadRequest {
  static $_TSPEC;

  public $msgId = null;
  public $userId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'msgId',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'userId',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['msgId'])) {
        $this->msgId = $vals['msgId'];
      }
      if (isset($vals['userId'])) {
        $this->userId = $vals['userId'];
      }
    }
  }

  public function getName() {
    return 'MarkUserMessageReadRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->msgId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->userId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MarkUserMessageReadRequest');
    if ($this->msgId !== null) {
      $xfer += $output->writeFieldBegin('msgId', TType::I64, 1);
      $xfer += $output->writeI64($this->msgId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userId !== null) {
      $xfer += $output->writeFieldBegin('userId', TType::I32, 2);
      $xfer += $output->writeI32($this->userId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class MarkUserMessageReadResponse {
  static $_TSPEC;

  public $error = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'error',
          'type' => TType::STRUCT,
          'class' => 'ExceptionDes',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['error'])) {
        $this->error = $vals['error'];
      }
    }
  }

  public function getName() {
    return 'MarkUserMessageReadResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->error = new ExceptionDes();
            $xfer += $this->error->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MarkUserMessageReadResponse');
    if ($this->error !== null) {
      if (!is_object($this->error)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('error', TType::STRUCT, 1);
      $xfer += $this->error->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetMessageDetailRequest {
  static $_TSPEC;

  public $msgId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'msgId',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['msgId'])) {
        $this->msgId = $vals['msgId'];
      }
    }
  }

  public function getName() {
    return 'GetMessageDetailRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->msgId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetMessageDetailRequest');
    if ($this->msgId !== null) {
      $xfer += $output->writeFieldBegin('msgId', TType::I64, 1);
      $xfer += $output->writeI64($this->msgId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetMessageDetailResponse {
  static $_TSPEC;

  public $message = null;
  public $error = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'message',
          'type' => TType::STRUCT,
          'class' => 'Message',
          ),
        2 => array(
          'var' => 'error',
          'type' => TType::STRUCT,
          'class' => 'ExceptionDes',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['message'])) {
        $this->message = $vals['message'];
      }
      if (isset($vals['error'])) {
        $this->error = $vals['error'];
      }
    }
  }

  public function getName() {
    return 'GetMessageDetailResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->message = new Message();
            $xfer += $this->message->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->error = new ExceptionDes();
            $xfer += $this->error->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetMessageDetailResponse');
    if ($this->message !== null) {
      if (!is_object($this->message)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('message', TType::STRUCT, 1);
      $xfer += $this->message->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->error !== null) {
      if (!is_object($this->error)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('error', TType::STRUCT, 2);
      $xfer += $this->error->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetAllMessagesRequest {
  static $_TSPEC;

  public $pageId = null;
  public $limit = null;
  public $type = null;
  public $sdkId = null;
  public $dType = null;
  public $status = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'pageId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'limit',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'type',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'sdkId',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'dType',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'status',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['pageId'])) {
        $this->pageId = $vals['pageId'];
      }
      if (isset($vals['limit'])) {
        $this->limit = $vals['limit'];
      }
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['sdkId'])) {
        $this->sdkId = $vals['sdkId'];
      }
      if (isset($vals['dType'])) {
        $this->dType = $vals['dType'];
      }
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
    }
  }

  public function getName() {
    return 'GetAllMessagesRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->pageId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->limit);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->sdkId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->dType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetAllMessagesRequest');
    if ($this->pageId !== null) {
      $xfer += $output->writeFieldBegin('pageId', TType::I32, 1);
      $xfer += $output->writeI32($this->pageId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->limit !== null) {
      $xfer += $output->writeFieldBegin('limit', TType::I32, 2);
      $xfer += $output->writeI32($this->limit);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::I32, 3);
      $xfer += $output->writeI32($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sdkId !== null) {
      $xfer += $output->writeFieldBegin('sdkId', TType::I32, 4);
      $xfer += $output->writeI32($this->sdkId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dType !== null) {
      $xfer += $output->writeFieldBegin('dType', TType::I32, 5);
      $xfer += $output->writeI32($this->dType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->status !== null) {
      $xfer += $output->writeFieldBegin('status', TType::I32, 6);
      $xfer += $output->writeI32($this->status);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class MessageInfo {
  static $_TSPEC;

  public $msgId = null;
  public $msgState = null;
  public $msgType = null;
  public $title = null;
  public $startTime = null;
  public $endTime = null;
  public $vipLevel = null;
  public $beginSocre = null;
  public $endSocre = null;
  public $appId = null;
  public $isCancel = null;
  public $content = null;
  public $sdkId = null;
  public $createTime = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'msgId',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'msgState',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'msgType',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'title',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'startTime',
          'type' => TType::I64,
          ),
        6 => array(
          'var' => 'endTime',
          'type' => TType::I64,
          ),
        7 => array(
          'var' => 'vipLevel',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'beginSocre',
          'type' => TType::I32,
          ),
        9 => array(
          'var' => 'endSocre',
          'type' => TType::I32,
          ),
        10 => array(
          'var' => 'appId',
          'type' => TType::I32,
          ),
        11 => array(
          'var' => 'isCancel',
          'type' => TType::I32,
          ),
        12 => array(
          'var' => 'content',
          'type' => TType::STRING,
          ),
        13 => array(
          'var' => 'sdkId',
          'type' => TType::I32,
          ),
        14 => array(
          'var' => 'createTime',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['msgId'])) {
        $this->msgId = $vals['msgId'];
      }
      if (isset($vals['msgState'])) {
        $this->msgState = $vals['msgState'];
      }
      if (isset($vals['msgType'])) {
        $this->msgType = $vals['msgType'];
      }
      if (isset($vals['title'])) {
        $this->title = $vals['title'];
      }
      if (isset($vals['startTime'])) {
        $this->startTime = $vals['startTime'];
      }
      if (isset($vals['endTime'])) {
        $this->endTime = $vals['endTime'];
      }
      if (isset($vals['vipLevel'])) {
        $this->vipLevel = $vals['vipLevel'];
      }
      if (isset($vals['beginSocre'])) {
        $this->beginSocre = $vals['beginSocre'];
      }
      if (isset($vals['endSocre'])) {
        $this->endSocre = $vals['endSocre'];
      }
      if (isset($vals['appId'])) {
        $this->appId = $vals['appId'];
      }
      if (isset($vals['isCancel'])) {
        $this->isCancel = $vals['isCancel'];
      }
      if (isset($vals['content'])) {
        $this->content = $vals['content'];
      }
      if (isset($vals['sdkId'])) {
        $this->sdkId = $vals['sdkId'];
      }
      if (isset($vals['createTime'])) {
        $this->createTime = $vals['createTime'];
      }
    }
  }

  public function getName() {
    return 'MessageInfo';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->msgId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->msgState);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->msgType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->title);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->startTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->endTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->vipLevel);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->beginSocre);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->endSocre);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->appId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->isCancel);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->content);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->sdkId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->createTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MessageInfo');
    if ($this->msgId !== null) {
      $xfer += $output->writeFieldBegin('msgId', TType::I64, 1);
      $xfer += $output->writeI64($this->msgId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->msgState !== null) {
      $xfer += $output->writeFieldBegin('msgState', TType::I32, 2);
      $xfer += $output->writeI32($this->msgState);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->msgType !== null) {
      $xfer += $output->writeFieldBegin('msgType', TType::I32, 3);
      $xfer += $output->writeI32($this->msgType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->title !== null) {
      $xfer += $output->writeFieldBegin('title', TType::STRING, 4);
      $xfer += $output->writeString($this->title);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->startTime !== null) {
      $xfer += $output->writeFieldBegin('startTime', TType::I64, 5);
      $xfer += $output->writeI64($this->startTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->endTime !== null) {
      $xfer += $output->writeFieldBegin('endTime', TType::I64, 6);
      $xfer += $output->writeI64($this->endTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->vipLevel !== null) {
      $xfer += $output->writeFieldBegin('vipLevel', TType::I32, 7);
      $xfer += $output->writeI32($this->vipLevel);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->beginSocre !== null) {
      $xfer += $output->writeFieldBegin('beginSocre', TType::I32, 8);
      $xfer += $output->writeI32($this->beginSocre);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->endSocre !== null) {
      $xfer += $output->writeFieldBegin('endSocre', TType::I32, 9);
      $xfer += $output->writeI32($this->endSocre);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->appId !== null) {
      $xfer += $output->writeFieldBegin('appId', TType::I32, 10);
      $xfer += $output->writeI32($this->appId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->isCancel !== null) {
      $xfer += $output->writeFieldBegin('isCancel', TType::I32, 11);
      $xfer += $output->writeI32($this->isCancel);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->content !== null) {
      $xfer += $output->writeFieldBegin('content', TType::STRING, 12);
      $xfer += $output->writeString($this->content);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sdkId !== null) {
      $xfer += $output->writeFieldBegin('sdkId', TType::I32, 13);
      $xfer += $output->writeI32($this->sdkId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->createTime !== null) {
      $xfer += $output->writeFieldBegin('createTime', TType::I64, 14);
      $xfer += $output->writeI64($this->createTime);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetAllMessagesResponse {
  static $_TSPEC;

  public $messageList = null;
  public $count = null;
  public $error = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'messageList',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'MessageInfo',
            ),
          ),
        2 => array(
          'var' => 'count',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'error',
          'type' => TType::STRUCT,
          'class' => 'ExceptionDes',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['messageList'])) {
        $this->messageList = $vals['messageList'];
      }
      if (isset($vals['count'])) {
        $this->count = $vals['count'];
      }
      if (isset($vals['error'])) {
        $this->error = $vals['error'];
      }
    }
  }

  public function getName() {
    return 'GetAllMessagesResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->messageList = array();
            $_size35 = 0;
            $_etype38 = 0;
            $xfer += $input->readListBegin($_etype38, $_size35);
            for ($_i39 = 0; $_i39 < $_size35; ++$_i39)
            {
              $elem40 = null;
              $elem40 = new MessageInfo();
              $xfer += $elem40->read($input);
              $this->messageList []= $elem40;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->count);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->error = new ExceptionDes();
            $xfer += $this->error->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetAllMessagesResponse');
    if ($this->messageList !== null) {
      if (!is_array($this->messageList)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('messageList', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->messageList));
        {
          foreach ($this->messageList as $iter41)
          {
            $xfer += $iter41->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->count !== null) {
      $xfer += $output->writeFieldBegin('count', TType::I64, 2);
      $xfer += $output->writeI64($this->count);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->error !== null) {
      if (!is_object($this->error)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('error', TType::STRUCT, 3);
      $xfer += $this->error->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class DeleteMessageRequest {
  static $_TSPEC;

  public $msgId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'msgId',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['msgId'])) {
        $this->msgId = $vals['msgId'];
      }
    }
  }

  public function getName() {
    return 'DeleteMessageRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->msgId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('DeleteMessageRequest');
    if ($this->msgId !== null) {
      $xfer += $output->writeFieldBegin('msgId', TType::I64, 1);
      $xfer += $output->writeI64($this->msgId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class DeleteMessageResponse {
  static $_TSPEC;

  public $error = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'error',
          'type' => TType::STRUCT,
          'class' => 'ExceptionDes',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['error'])) {
        $this->error = $vals['error'];
      }
    }
  }

  public function getName() {
    return 'DeleteMessageResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->error = new ExceptionDes();
            $xfer += $this->error->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('DeleteMessageResponse');
    if ($this->error !== null) {
      if (!is_object($this->error)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('error', TType::STRUCT, 1);
      $xfer += $this->error->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class MessageLingQuRequest {
  static $_TSPEC;

  public $userId = null;
  public $msgId = null;
  public $actionType = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'userId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'msgId',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'actionType',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['userId'])) {
        $this->userId = $vals['userId'];
      }
      if (isset($vals['msgId'])) {
        $this->msgId = $vals['msgId'];
      }
      if (isset($vals['actionType'])) {
        $this->actionType = $vals['actionType'];
      }
    }
  }

  public function getName() {
    return 'MessageLingQuRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->userId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->msgId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->actionType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MessageLingQuRequest');
    if ($this->userId !== null) {
      $xfer += $output->writeFieldBegin('userId', TType::I32, 1);
      $xfer += $output->writeI32($this->userId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->msgId !== null) {
      $xfer += $output->writeFieldBegin('msgId', TType::I64, 2);
      $xfer += $output->writeI64($this->msgId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->actionType !== null) {
      $xfer += $output->writeFieldBegin('actionType', TType::I32, 3);
      $xfer += $output->writeI32($this->actionType);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class MessageLingQuResponse {
  static $_TSPEC;

  public $status = null;
  public $error = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'status',
          'type' => TType::BOOL,
          ),
        2 => array(
          'var' => 'error',
          'type' => TType::STRUCT,
          'class' => 'ExceptionDes',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
      if (isset($vals['error'])) {
        $this->error = $vals['error'];
      }
    }
  }

  public function getName() {
    return 'MessageLingQuResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->error = new ExceptionDes();
            $xfer += $this->error->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MessageLingQuResponse');
    if ($this->status !== null) {
      $xfer += $output->writeFieldBegin('status', TType::BOOL, 1);
      $xfer += $output->writeBool($this->status);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->error !== null) {
      if (!is_object($this->error)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('error', TType::STRUCT, 2);
      $xfer += $this->error->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

?>
