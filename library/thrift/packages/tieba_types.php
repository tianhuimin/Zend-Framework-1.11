<?php
/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
include_once $GLOBALS['THRIFT_ROOT'].'/Thrift.php';


class thrift_CommentUser {
  static $_TSPEC;

  public $lastReviewer = null;
  public $lastComment = null;
  public $publishDate = null;
  public $reviewerId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'lastReviewer',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'lastComment',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'publishDate',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'reviewerId',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['lastReviewer'])) {
        $this->lastReviewer = $vals['lastReviewer'];
      }
      if (isset($vals['lastComment'])) {
        $this->lastComment = $vals['lastComment'];
      }
      if (isset($vals['publishDate'])) {
        $this->publishDate = $vals['publishDate'];
      }
      if (isset($vals['reviewerId'])) {
        $this->reviewerId = $vals['reviewerId'];
      }
    }
  }

  public function getName() {
    return 'CommentUser';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->lastReviewer);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->lastComment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->publishDate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->reviewerId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CommentUser');
    if ($this->lastReviewer !== null) {
      $xfer += $output->writeFieldBegin('lastReviewer', TType::STRING, 1);
      $xfer += $output->writeString($this->lastReviewer);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lastComment !== null) {
      $xfer += $output->writeFieldBegin('lastComment', TType::STRING, 2);
      $xfer += $output->writeString($this->lastComment);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->publishDate !== null) {
      $xfer += $output->writeFieldBegin('publishDate', TType::STRING, 3);
      $xfer += $output->writeString($this->publishDate);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->reviewerId !== null) {
      $xfer += $output->writeFieldBegin('reviewerId', TType::I32, 4);
      $xfer += $output->writeI32($this->reviewerId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class thrift_SourceComment {
  static $_TSPEC;

  public $threadId = null;
  public $replyCount = null;
  public $forumId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'threadId',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'replyCount',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'forumId',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['threadId'])) {
        $this->threadId = $vals['threadId'];
      }
      if (isset($vals['replyCount'])) {
        $this->replyCount = $vals['replyCount'];
      }
      if (isset($vals['forumId'])) {
        $this->forumId = $vals['forumId'];
      }
    }
  }

  public function getName() {
    return 'SourceComment';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->threadId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->replyCount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->forumId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SourceComment');
    if ($this->threadId !== null) {
      $xfer += $output->writeFieldBegin('threadId', TType::STRING, 1);
      $xfer += $output->writeString($this->threadId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->replyCount !== null) {
      $xfer += $output->writeFieldBegin('replyCount', TType::I32, 2);
      $xfer += $output->writeI32($this->replyCount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->forumId !== null) {
      $xfer += $output->writeFieldBegin('forumId', TType::I32, 3);
      $xfer += $output->writeI32($this->forumId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class thrift_CommentElement {
  static $_TSPEC;

  public $threadId = null;
  public $replyCount = null;
  public $forumId = null;
  public $commentUsers = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'threadId',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'replyCount',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'forumId',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'commentUsers',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'thrift_CommentUser',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['threadId'])) {
        $this->threadId = $vals['threadId'];
      }
      if (isset($vals['replyCount'])) {
        $this->replyCount = $vals['replyCount'];
      }
      if (isset($vals['forumId'])) {
        $this->forumId = $vals['forumId'];
      }
      if (isset($vals['commentUsers'])) {
        $this->commentUsers = $vals['commentUsers'];
      }
    }
  }

  public function getName() {
    return 'CommentElement';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->threadId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->replyCount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->forumId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::LST) {
            $this->commentUsers = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readListBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $elem5 = new thrift_CommentUser();
              $xfer += $elem5->read($input);
              $this->commentUsers []= $elem5;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CommentElement');
    if ($this->threadId !== null) {
      $xfer += $output->writeFieldBegin('threadId', TType::STRING, 1);
      $xfer += $output->writeString($this->threadId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->replyCount !== null) {
      $xfer += $output->writeFieldBegin('replyCount', TType::I32, 2);
      $xfer += $output->writeI32($this->replyCount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->forumId !== null) {
      $xfer += $output->writeFieldBegin('forumId', TType::I32, 3);
      $xfer += $output->writeI32($this->forumId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->commentUsers !== null) {
      if (!is_array($this->commentUsers)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('commentUsers', TType::LST, 4);
      {
        $output->writeListBegin(TType::STRUCT, count($this->commentUsers));
        {
          foreach ($this->commentUsers as $iter6)
          {
            $xfer += $iter6->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class thrift_TiebaState {
  static $_TSPEC;

  public $state = null;
  public $sourceId = null;
  public $tiebaId = null;
  public $tiebaTitle = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'state',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'sourceId',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'tiebaId',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'tiebaTitle',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['state'])) {
        $this->state = $vals['state'];
      }
      if (isset($vals['sourceId'])) {
        $this->sourceId = $vals['sourceId'];
      }
      if (isset($vals['tiebaId'])) {
        $this->tiebaId = $vals['tiebaId'];
      }
      if (isset($vals['tiebaTitle'])) {
        $this->tiebaTitle = $vals['tiebaTitle'];
      }
    }
  }

  public function getName() {
    return 'TiebaState';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->state);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->sourceId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->tiebaId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tiebaTitle);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TiebaState');
    if ($this->state !== null) {
      $xfer += $output->writeFieldBegin('state', TType::I32, 1);
      $xfer += $output->writeI32($this->state);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sourceId !== null) {
      $xfer += $output->writeFieldBegin('sourceId', TType::STRING, 2);
      $xfer += $output->writeString($this->sourceId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tiebaId !== null) {
      $xfer += $output->writeFieldBegin('tiebaId', TType::I32, 3);
      $xfer += $output->writeI32($this->tiebaId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tiebaTitle !== null) {
      $xfer += $output->writeFieldBegin('tiebaTitle', TType::STRING, 4);
      $xfer += $output->writeString($this->tiebaTitle);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class thrift_TiebaStateResult {
  static $_TSPEC;

  public $opState = null;
  public $paramState = null;
  public $tiebaStates = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'opState',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'paramState',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'tiebaStates',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'thrift_TiebaState',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['opState'])) {
        $this->opState = $vals['opState'];
      }
      if (isset($vals['paramState'])) {
        $this->paramState = $vals['paramState'];
      }
      if (isset($vals['tiebaStates'])) {
        $this->tiebaStates = $vals['tiebaStates'];
      }
    }
  }

  public function getName() {
    return 'TiebaStateResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->opState);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->paramState);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->tiebaStates = array();
            $_size7 = 0;
            $_etype10 = 0;
            $xfer += $input->readListBegin($_etype10, $_size7);
            for ($_i11 = 0; $_i11 < $_size7; ++$_i11)
            {
              $elem12 = null;
              $elem12 = new thrift_TiebaState();
              $xfer += $elem12->read($input);
              $this->tiebaStates []= $elem12;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TiebaStateResult');
    if ($this->opState !== null) {
      $xfer += $output->writeFieldBegin('opState', TType::I32, 1);
      $xfer += $output->writeI32($this->opState);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->paramState !== null) {
      $xfer += $output->writeFieldBegin('paramState', TType::I32, 2);
      $xfer += $output->writeI32($this->paramState);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tiebaStates !== null) {
      if (!is_array($this->tiebaStates)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('tiebaStates', TType::LST, 3);
      {
        $output->writeListBegin(TType::STRUCT, count($this->tiebaStates));
        {
          foreach ($this->tiebaStates as $iter13)
          {
            $xfer += $iter13->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class thrift_UserExtendInfo {
  static $_TSPEC;

  public $userId = null;
  public $nickName = null;
  public $point = null;
  public $grade = null;
  public $vipPoint = null;
  public $vipGrade = null;
  public $realDesc = null;
  public $sexual = null;
  public $tag = null;
  public $age = null;
  public $birth = null;
  public $city = null;
  public $mobileType = null;
  public $photo = null;
  public $note = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'userId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'nickName',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'point',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'grade',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'vipPoint',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'vipGrade',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'realDesc',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'sexual',
          'type' => TType::I32,
          ),
        9 => array(
          'var' => 'tag',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'age',
          'type' => TType::I32,
          ),
        11 => array(
          'var' => 'birth',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'city',
          'type' => TType::STRING,
          ),
        13 => array(
          'var' => 'mobileType',
          'type' => TType::I32,
          ),
        14 => array(
          'var' => 'photo',
          'type' => TType::STRING,
          ),
        15 => array(
          'var' => 'note',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['userId'])) {
        $this->userId = $vals['userId'];
      }
      if (isset($vals['nickName'])) {
        $this->nickName = $vals['nickName'];
      }
      if (isset($vals['point'])) {
        $this->point = $vals['point'];
      }
      if (isset($vals['grade'])) {
        $this->grade = $vals['grade'];
      }
      if (isset($vals['vipPoint'])) {
        $this->vipPoint = $vals['vipPoint'];
      }
      if (isset($vals['vipGrade'])) {
        $this->vipGrade = $vals['vipGrade'];
      }
      if (isset($vals['realDesc'])) {
        $this->realDesc = $vals['realDesc'];
      }
      if (isset($vals['sexual'])) {
        $this->sexual = $vals['sexual'];
      }
      if (isset($vals['tag'])) {
        $this->tag = $vals['tag'];
      }
      if (isset($vals['age'])) {
        $this->age = $vals['age'];
      }
      if (isset($vals['birth'])) {
        $this->birth = $vals['birth'];
      }
      if (isset($vals['city'])) {
        $this->city = $vals['city'];
      }
      if (isset($vals['mobileType'])) {
        $this->mobileType = $vals['mobileType'];
      }
      if (isset($vals['photo'])) {
        $this->photo = $vals['photo'];
      }
      if (isset($vals['note'])) {
        $this->note = $vals['note'];
      }
    }
  }

  public function getName() {
    return 'UserExtendInfo';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->userId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->nickName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->point);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->grade);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->vipPoint);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->vipGrade);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->realDesc);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->sexual);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tag);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->age);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->birth);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->city);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->mobileType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->photo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->note);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('UserExtendInfo');
    if ($this->userId !== null) {
      $xfer += $output->writeFieldBegin('userId', TType::I32, 1);
      $xfer += $output->writeI32($this->userId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->nickName !== null) {
      $xfer += $output->writeFieldBegin('nickName', TType::STRING, 2);
      $xfer += $output->writeString($this->nickName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->point !== null) {
      $xfer += $output->writeFieldBegin('point', TType::I32, 3);
      $xfer += $output->writeI32($this->point);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->grade !== null) {
      $xfer += $output->writeFieldBegin('grade', TType::I32, 4);
      $xfer += $output->writeI32($this->grade);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->vipPoint !== null) {
      $xfer += $output->writeFieldBegin('vipPoint', TType::I32, 5);
      $xfer += $output->writeI32($this->vipPoint);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->vipGrade !== null) {
      $xfer += $output->writeFieldBegin('vipGrade', TType::I32, 6);
      $xfer += $output->writeI32($this->vipGrade);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->realDesc !== null) {
      $xfer += $output->writeFieldBegin('realDesc', TType::STRING, 7);
      $xfer += $output->writeString($this->realDesc);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sexual !== null) {
      $xfer += $output->writeFieldBegin('sexual', TType::I32, 8);
      $xfer += $output->writeI32($this->sexual);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tag !== null) {
      $xfer += $output->writeFieldBegin('tag', TType::STRING, 9);
      $xfer += $output->writeString($this->tag);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->age !== null) {
      $xfer += $output->writeFieldBegin('age', TType::I32, 10);
      $xfer += $output->writeI32($this->age);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->birth !== null) {
      $xfer += $output->writeFieldBegin('birth', TType::STRING, 11);
      $xfer += $output->writeString($this->birth);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->city !== null) {
      $xfer += $output->writeFieldBegin('city', TType::STRING, 12);
      $xfer += $output->writeString($this->city);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->mobileType !== null) {
      $xfer += $output->writeFieldBegin('mobileType', TType::I32, 13);
      $xfer += $output->writeI32($this->mobileType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->photo !== null) {
      $xfer += $output->writeFieldBegin('photo', TType::STRING, 14);
      $xfer += $output->writeString($this->photo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->note !== null) {
      $xfer += $output->writeFieldBegin('note', TType::STRING, 15);
      $xfer += $output->writeString($this->note);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class thrift_ForumColumnNodeElements {
  static $_TSPEC;

  public $forumId = null;
  public $forumName = null;
  public $forumDesc = null;
  public $forumTag = null;
  public $forumCreateTime = null;
  public $forumAdmin = null;
  public $forumIsLeaf = null;
  public $forumParentId = null;
  public $forumStatus = null;
  public $forumLevel = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'forumId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'forumName',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'forumDesc',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'forumTag',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'forumCreateTime',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'forumAdmin',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'forumIsLeaf',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'forumParentId',
          'type' => TType::I32,
          ),
        9 => array(
          'var' => 'forumStatus',
          'type' => TType::I32,
          ),
        10 => array(
          'var' => 'forumLevel',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['forumId'])) {
        $this->forumId = $vals['forumId'];
      }
      if (isset($vals['forumName'])) {
        $this->forumName = $vals['forumName'];
      }
      if (isset($vals['forumDesc'])) {
        $this->forumDesc = $vals['forumDesc'];
      }
      if (isset($vals['forumTag'])) {
        $this->forumTag = $vals['forumTag'];
      }
      if (isset($vals['forumCreateTime'])) {
        $this->forumCreateTime = $vals['forumCreateTime'];
      }
      if (isset($vals['forumAdmin'])) {
        $this->forumAdmin = $vals['forumAdmin'];
      }
      if (isset($vals['forumIsLeaf'])) {
        $this->forumIsLeaf = $vals['forumIsLeaf'];
      }
      if (isset($vals['forumParentId'])) {
        $this->forumParentId = $vals['forumParentId'];
      }
      if (isset($vals['forumStatus'])) {
        $this->forumStatus = $vals['forumStatus'];
      }
      if (isset($vals['forumLevel'])) {
        $this->forumLevel = $vals['forumLevel'];
      }
    }
  }

  public function getName() {
    return 'ForumColumnNodeElements';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->forumId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->forumName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->forumDesc);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->forumTag);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->forumCreateTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->forumAdmin);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->forumIsLeaf);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->forumParentId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->forumStatus);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->forumLevel);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ForumColumnNodeElements');
    if ($this->forumId !== null) {
      $xfer += $output->writeFieldBegin('forumId', TType::I32, 1);
      $xfer += $output->writeI32($this->forumId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->forumName !== null) {
      $xfer += $output->writeFieldBegin('forumName', TType::STRING, 2);
      $xfer += $output->writeString($this->forumName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->forumDesc !== null) {
      $xfer += $output->writeFieldBegin('forumDesc', TType::STRING, 3);
      $xfer += $output->writeString($this->forumDesc);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->forumTag !== null) {
      $xfer += $output->writeFieldBegin('forumTag', TType::STRING, 4);
      $xfer += $output->writeString($this->forumTag);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->forumCreateTime !== null) {
      $xfer += $output->writeFieldBegin('forumCreateTime', TType::STRING, 5);
      $xfer += $output->writeString($this->forumCreateTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->forumAdmin !== null) {
      $xfer += $output->writeFieldBegin('forumAdmin', TType::I32, 6);
      $xfer += $output->writeI32($this->forumAdmin);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->forumIsLeaf !== null) {
      $xfer += $output->writeFieldBegin('forumIsLeaf', TType::I32, 7);
      $xfer += $output->writeI32($this->forumIsLeaf);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->forumParentId !== null) {
      $xfer += $output->writeFieldBegin('forumParentId', TType::I32, 8);
      $xfer += $output->writeI32($this->forumParentId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->forumStatus !== null) {
      $xfer += $output->writeFieldBegin('forumStatus', TType::I32, 9);
      $xfer += $output->writeI32($this->forumStatus);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->forumLevel !== null) {
      $xfer += $output->writeFieldBegin('forumLevel', TType::I32, 10);
      $xfer += $output->writeI32($this->forumLevel);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class thrift_ForumColumnElementsList {
  static $_TSPEC;

  public $forumColumnNodeElements = null;
  public $count = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'forumColumnNodeElements',
          'type' => TType::STRUCT,
          'class' => 'thrift_ForumColumnNodeElements',
          ),
        2 => array(
          'var' => 'count',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['forumColumnNodeElements'])) {
        $this->forumColumnNodeElements = $vals['forumColumnNodeElements'];
      }
      if (isset($vals['count'])) {
        $this->count = $vals['count'];
      }
    }
  }

  public function getName() {
    return 'ForumColumnElementsList';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->forumColumnNodeElements = new thrift_ForumColumnNodeElements();
            $xfer += $this->forumColumnNodeElements->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->count);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ForumColumnElementsList');
    if ($this->forumColumnNodeElements !== null) {
      if (!is_object($this->forumColumnNodeElements)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('forumColumnNodeElements', TType::STRUCT, 1);
      $xfer += $this->forumColumnNodeElements->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->count !== null) {
      $xfer += $output->writeFieldBegin('count', TType::I32, 2);
      $xfer += $output->writeI32($this->count);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class thrift_ForumColumnElements {
  static $_TSPEC;

  public $forumColumnElementsList = null;
  public $count = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'forumColumnElementsList',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'thrift_ForumColumnElementsList',
            ),
          ),
        2 => array(
          'var' => 'count',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['forumColumnElementsList'])) {
        $this->forumColumnElementsList = $vals['forumColumnElementsList'];
      }
      if (isset($vals['count'])) {
        $this->count = $vals['count'];
      }
    }
  }

  public function getName() {
    return 'ForumColumnElements';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->forumColumnElementsList = array();
            $_size14 = 0;
            $_etype17 = 0;
            $xfer += $input->readListBegin($_etype17, $_size14);
            for ($_i18 = 0; $_i18 < $_size14; ++$_i18)
            {
              $elem19 = null;
              $elem19 = new thrift_ForumColumnElementsList();
              $xfer += $elem19->read($input);
              $this->forumColumnElementsList []= $elem19;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->count);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ForumColumnElements');
    if ($this->forumColumnElementsList !== null) {
      if (!is_array($this->forumColumnElementsList)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('forumColumnElementsList', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->forumColumnElementsList));
        {
          foreach ($this->forumColumnElementsList as $iter20)
          {
            $xfer += $iter20->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->count !== null) {
      $xfer += $output->writeFieldBegin('count', TType::I32, 2);
      $xfer += $output->writeI32($this->count);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class thrift_ForumElementsList {
  static $_TSPEC;

  public $forumId = null;
  public $forumName = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'forumId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'forumName',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['forumId'])) {
        $this->forumId = $vals['forumId'];
      }
      if (isset($vals['forumName'])) {
        $this->forumName = $vals['forumName'];
      }
    }
  }

  public function getName() {
    return 'ForumElementsList';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->forumId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->forumName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ForumElementsList');
    if ($this->forumId !== null) {
      $xfer += $output->writeFieldBegin('forumId', TType::I32, 1);
      $xfer += $output->writeI32($this->forumId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->forumName !== null) {
      $xfer += $output->writeFieldBegin('forumName', TType::STRING, 2);
      $xfer += $output->writeString($this->forumName);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class thrift_ForumElements {
  static $_TSPEC;

  public $forumElementsList = null;
  public $count = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'forumElementsList',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'thrift_ForumElementsList',
            ),
          ),
        2 => array(
          'var' => 'count',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['forumElementsList'])) {
        $this->forumElementsList = $vals['forumElementsList'];
      }
      if (isset($vals['count'])) {
        $this->count = $vals['count'];
      }
    }
  }

  public function getName() {
    return 'ForumElements';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->forumElementsList = array();
            $_size21 = 0;
            $_etype24 = 0;
            $xfer += $input->readListBegin($_etype24, $_size21);
            for ($_i25 = 0; $_i25 < $_size21; ++$_i25)
            {
              $elem26 = null;
              $elem26 = new thrift_ForumElementsList();
              $xfer += $elem26->read($input);
              $this->forumElementsList []= $elem26;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->count);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ForumElements');
    if ($this->forumElementsList !== null) {
      if (!is_array($this->forumElementsList)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('forumElementsList', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->forumElementsList));
        {
          foreach ($this->forumElementsList as $iter27)
          {
            $xfer += $iter27->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->count !== null) {
      $xfer += $output->writeFieldBegin('count', TType::I32, 2);
      $xfer += $output->writeI32($this->count);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class thrift_FormuThreadElementsList {
  static $_TSPEC;

  public $threadId = null;
  public $title = null;
  public $userId = null;
  public $nickName = null;
  public $replyNum = null;
  public $hitsNum = null;
  public $isVote = null;
  public $isGood = null;
  public $isTop = null;
  public $isLock = null;
  public $lastUser = null;
  public $lastNickname = null;
  public $lastTime = null;
  public $isExpired = null;
  public $isPic = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'threadId',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'title',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'userId',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'nickName',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'replyNum',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'hitsNum',
          'type' => TType::I64,
          ),
        7 => array(
          'var' => 'isVote',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'isGood',
          'type' => TType::I32,
          ),
        9 => array(
          'var' => 'isTop',
          'type' => TType::I32,
          ),
        10 => array(
          'var' => 'isLock',
          'type' => TType::I32,
          ),
        11 => array(
          'var' => 'lastUser',
          'type' => TType::I32,
          ),
        12 => array(
          'var' => 'lastNickname',
          'type' => TType::STRING,
          ),
        13 => array(
          'var' => 'lastTime',
          'type' => TType::STRING,
          ),
        14 => array(
          'var' => 'isExpired',
          'type' => TType::I32,
          ),
        15 => array(
          'var' => 'isPic',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['threadId'])) {
        $this->threadId = $vals['threadId'];
      }
      if (isset($vals['title'])) {
        $this->title = $vals['title'];
      }
      if (isset($vals['userId'])) {
        $this->userId = $vals['userId'];
      }
      if (isset($vals['nickName'])) {
        $this->nickName = $vals['nickName'];
      }
      if (isset($vals['replyNum'])) {
        $this->replyNum = $vals['replyNum'];
      }
      if (isset($vals['hitsNum'])) {
        $this->hitsNum = $vals['hitsNum'];
      }
      if (isset($vals['isVote'])) {
        $this->isVote = $vals['isVote'];
      }
      if (isset($vals['isGood'])) {
        $this->isGood = $vals['isGood'];
      }
      if (isset($vals['isTop'])) {
        $this->isTop = $vals['isTop'];
      }
      if (isset($vals['isLock'])) {
        $this->isLock = $vals['isLock'];
      }
      if (isset($vals['lastUser'])) {
        $this->lastUser = $vals['lastUser'];
      }
      if (isset($vals['lastNickname'])) {
        $this->lastNickname = $vals['lastNickname'];
      }
      if (isset($vals['lastTime'])) {
        $this->lastTime = $vals['lastTime'];
      }
      if (isset($vals['isExpired'])) {
        $this->isExpired = $vals['isExpired'];
      }
      if (isset($vals['isPic'])) {
        $this->isPic = $vals['isPic'];
      }
    }
  }

  public function getName() {
    return 'FormuThreadElementsList';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->threadId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->title);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->userId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->nickName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->replyNum);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->hitsNum);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->isVote);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->isGood);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->isTop);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->isLock);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->lastUser);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->lastNickname);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->lastTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->isExpired);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->isPic);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('FormuThreadElementsList');
    if ($this->threadId !== null) {
      $xfer += $output->writeFieldBegin('threadId', TType::STRING, 1);
      $xfer += $output->writeString($this->threadId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->title !== null) {
      $xfer += $output->writeFieldBegin('title', TType::STRING, 2);
      $xfer += $output->writeString($this->title);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userId !== null) {
      $xfer += $output->writeFieldBegin('userId', TType::I32, 3);
      $xfer += $output->writeI32($this->userId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->nickName !== null) {
      $xfer += $output->writeFieldBegin('nickName', TType::STRING, 4);
      $xfer += $output->writeString($this->nickName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->replyNum !== null) {
      $xfer += $output->writeFieldBegin('replyNum', TType::I32, 5);
      $xfer += $output->writeI32($this->replyNum);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->hitsNum !== null) {
      $xfer += $output->writeFieldBegin('hitsNum', TType::I64, 6);
      $xfer += $output->writeI64($this->hitsNum);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->isVote !== null) {
      $xfer += $output->writeFieldBegin('isVote', TType::I32, 7);
      $xfer += $output->writeI32($this->isVote);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->isGood !== null) {
      $xfer += $output->writeFieldBegin('isGood', TType::I32, 8);
      $xfer += $output->writeI32($this->isGood);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->isTop !== null) {
      $xfer += $output->writeFieldBegin('isTop', TType::I32, 9);
      $xfer += $output->writeI32($this->isTop);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->isLock !== null) {
      $xfer += $output->writeFieldBegin('isLock', TType::I32, 10);
      $xfer += $output->writeI32($this->isLock);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lastUser !== null) {
      $xfer += $output->writeFieldBegin('lastUser', TType::I32, 11);
      $xfer += $output->writeI32($this->lastUser);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lastNickname !== null) {
      $xfer += $output->writeFieldBegin('lastNickname', TType::STRING, 12);
      $xfer += $output->writeString($this->lastNickname);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lastTime !== null) {
      $xfer += $output->writeFieldBegin('lastTime', TType::STRING, 13);
      $xfer += $output->writeString($this->lastTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->isExpired !== null) {
      $xfer += $output->writeFieldBegin('isExpired', TType::I32, 14);
      $xfer += $output->writeI32($this->isExpired);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->isPic !== null) {
      $xfer += $output->writeFieldBegin('isPic', TType::I32, 15);
      $xfer += $output->writeI32($this->isPic);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class thrift_ThreadContentElementsList {
  static $_TSPEC;

  public $replyContent = null;
  public $replyId = null;
  public $replyUser = null;
  public $replyNickName = null;
  public $replyTime = null;
  public $replyPoint = null;
  public $replyGrade = null;
  public $isVisible = null;
  public $seqId = null;
  public $replyUserStatus = null;
  public $referIsvisible = null;
  public $referContent = null;
  public $referNickName = null;
  public $referId = null;
  public $referUser = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'replyContent',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'replyId',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'replyUser',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'replyNickName',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'replyTime',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'replyPoint',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'replyGrade',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'isVisible',
          'type' => TType::I32,
          ),
        9 => array(
          'var' => 'seqId',
          'type' => TType::I32,
          ),
        10 => array(
          'var' => 'replyUserStatus',
          'type' => TType::I32,
          ),
        11 => array(
          'var' => 'referIsvisible',
          'type' => TType::I32,
          ),
        12 => array(
          'var' => 'referContent',
          'type' => TType::STRING,
          ),
        13 => array(
          'var' => 'referNickName',
          'type' => TType::STRING,
          ),
        14 => array(
          'var' => 'referId',
          'type' => TType::I32,
          ),
        15 => array(
          'var' => 'referUser',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['replyContent'])) {
        $this->replyContent = $vals['replyContent'];
      }
      if (isset($vals['replyId'])) {
        $this->replyId = $vals['replyId'];
      }
      if (isset($vals['replyUser'])) {
        $this->replyUser = $vals['replyUser'];
      }
      if (isset($vals['replyNickName'])) {
        $this->replyNickName = $vals['replyNickName'];
      }
      if (isset($vals['replyTime'])) {
        $this->replyTime = $vals['replyTime'];
      }
      if (isset($vals['replyPoint'])) {
        $this->replyPoint = $vals['replyPoint'];
      }
      if (isset($vals['replyGrade'])) {
        $this->replyGrade = $vals['replyGrade'];
      }
      if (isset($vals['isVisible'])) {
        $this->isVisible = $vals['isVisible'];
      }
      if (isset($vals['seqId'])) {
        $this->seqId = $vals['seqId'];
      }
      if (isset($vals['replyUserStatus'])) {
        $this->replyUserStatus = $vals['replyUserStatus'];
      }
      if (isset($vals['referIsvisible'])) {
        $this->referIsvisible = $vals['referIsvisible'];
      }
      if (isset($vals['referContent'])) {
        $this->referContent = $vals['referContent'];
      }
      if (isset($vals['referNickName'])) {
        $this->referNickName = $vals['referNickName'];
      }
      if (isset($vals['referId'])) {
        $this->referId = $vals['referId'];
      }
      if (isset($vals['referUser'])) {
        $this->referUser = $vals['referUser'];
      }
    }
  }

  public function getName() {
    return 'ThreadContentElementsList';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->replyContent);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->replyId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->replyUser);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->replyNickName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->replyTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->replyPoint);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->replyGrade);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->isVisible);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->seqId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->replyUserStatus);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->referIsvisible);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->referContent);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->referNickName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->referId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->referUser);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ThreadContentElementsList');
    if ($this->replyContent !== null) {
      $xfer += $output->writeFieldBegin('replyContent', TType::STRING, 1);
      $xfer += $output->writeString($this->replyContent);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->replyId !== null) {
      $xfer += $output->writeFieldBegin('replyId', TType::I64, 2);
      $xfer += $output->writeI64($this->replyId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->replyUser !== null) {
      $xfer += $output->writeFieldBegin('replyUser', TType::I32, 3);
      $xfer += $output->writeI32($this->replyUser);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->replyNickName !== null) {
      $xfer += $output->writeFieldBegin('replyNickName', TType::STRING, 4);
      $xfer += $output->writeString($this->replyNickName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->replyTime !== null) {
      $xfer += $output->writeFieldBegin('replyTime', TType::STRING, 5);
      $xfer += $output->writeString($this->replyTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->replyPoint !== null) {
      $xfer += $output->writeFieldBegin('replyPoint', TType::I32, 6);
      $xfer += $output->writeI32($this->replyPoint);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->replyGrade !== null) {
      $xfer += $output->writeFieldBegin('replyGrade', TType::I32, 7);
      $xfer += $output->writeI32($this->replyGrade);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->isVisible !== null) {
      $xfer += $output->writeFieldBegin('isVisible', TType::I32, 8);
      $xfer += $output->writeI32($this->isVisible);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->seqId !== null) {
      $xfer += $output->writeFieldBegin('seqId', TType::I32, 9);
      $xfer += $output->writeI32($this->seqId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->replyUserStatus !== null) {
      $xfer += $output->writeFieldBegin('replyUserStatus', TType::I32, 10);
      $xfer += $output->writeI32($this->replyUserStatus);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->referIsvisible !== null) {
      $xfer += $output->writeFieldBegin('referIsvisible', TType::I32, 11);
      $xfer += $output->writeI32($this->referIsvisible);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->referContent !== null) {
      $xfer += $output->writeFieldBegin('referContent', TType::STRING, 12);
      $xfer += $output->writeString($this->referContent);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->referNickName !== null) {
      $xfer += $output->writeFieldBegin('referNickName', TType::STRING, 13);
      $xfer += $output->writeString($this->referNickName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->referId !== null) {
      $xfer += $output->writeFieldBegin('referId', TType::I32, 14);
      $xfer += $output->writeI32($this->referId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->referUser !== null) {
      $xfer += $output->writeFieldBegin('referUser', TType::I32, 15);
      $xfer += $output->writeI32($this->referUser);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class thrift_VoteContentElementsList {
  static $_TSPEC;

  public $voteContent = null;
  public $voteSeq = null;
  public $voteNum = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'voteContent',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'voteSeq',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'voteNum',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['voteContent'])) {
        $this->voteContent = $vals['voteContent'];
      }
      if (isset($vals['voteSeq'])) {
        $this->voteSeq = $vals['voteSeq'];
      }
      if (isset($vals['voteNum'])) {
        $this->voteNum = $vals['voteNum'];
      }
    }
  }

  public function getName() {
    return 'VoteContentElementsList';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->voteContent);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->voteSeq);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->voteNum);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('VoteContentElementsList');
    if ($this->voteContent !== null) {
      $xfer += $output->writeFieldBegin('voteContent', TType::STRING, 1);
      $xfer += $output->writeString($this->voteContent);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->voteSeq !== null) {
      $xfer += $output->writeFieldBegin('voteSeq', TType::I32, 2);
      $xfer += $output->writeI32($this->voteSeq);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->voteNum !== null) {
      $xfer += $output->writeFieldBegin('voteNum', TType::I32, 3);
      $xfer += $output->writeI32($this->voteNum);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class thrift_VoteContentElements {
  static $_TSPEC;

  public $voteDate = null;
  public $voteCount = null;
  public $voteContentElementsList = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'voteDate',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'voteCount',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'voteContentElementsList',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'thrift_VoteContentElementsList',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['voteDate'])) {
        $this->voteDate = $vals['voteDate'];
      }
      if (isset($vals['voteCount'])) {
        $this->voteCount = $vals['voteCount'];
      }
      if (isset($vals['voteContentElementsList'])) {
        $this->voteContentElementsList = $vals['voteContentElementsList'];
      }
    }
  }

  public function getName() {
    return 'VoteContentElements';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->voteDate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->voteCount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->voteContentElementsList = array();
            $_size28 = 0;
            $_etype31 = 0;
            $xfer += $input->readListBegin($_etype31, $_size28);
            for ($_i32 = 0; $_i32 < $_size28; ++$_i32)
            {
              $elem33 = null;
              $elem33 = new thrift_VoteContentElementsList();
              $xfer += $elem33->read($input);
              $this->voteContentElementsList []= $elem33;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('VoteContentElements');
    if ($this->voteDate !== null) {
      $xfer += $output->writeFieldBegin('voteDate', TType::STRING, 1);
      $xfer += $output->writeString($this->voteDate);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->voteCount !== null) {
      $xfer += $output->writeFieldBegin('voteCount', TType::I32, 2);
      $xfer += $output->writeI32($this->voteCount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->voteContentElementsList !== null) {
      if (!is_array($this->voteContentElementsList)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('voteContentElementsList', TType::LST, 3);
      {
        $output->writeListBegin(TType::STRUCT, count($this->voteContentElementsList));
        {
          foreach ($this->voteContentElementsList as $iter34)
          {
            $xfer += $iter34->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class thrift_ForumThreadElements {
  static $_TSPEC;

  public $formuThreadElementsList = null;
  public $count = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'formuThreadElementsList',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'thrift_FormuThreadElementsList',
            ),
          ),
        2 => array(
          'var' => 'count',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['formuThreadElementsList'])) {
        $this->formuThreadElementsList = $vals['formuThreadElementsList'];
      }
      if (isset($vals['count'])) {
        $this->count = $vals['count'];
      }
    }
  }

  public function getName() {
    return 'ForumThreadElements';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->formuThreadElementsList = array();
            $_size35 = 0;
            $_etype38 = 0;
            $xfer += $input->readListBegin($_etype38, $_size35);
            for ($_i39 = 0; $_i39 < $_size35; ++$_i39)
            {
              $elem40 = null;
              $elem40 = new thrift_FormuThreadElementsList();
              $xfer += $elem40->read($input);
              $this->formuThreadElementsList []= $elem40;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->count);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ForumThreadElements');
    if ($this->formuThreadElementsList !== null) {
      if (!is_array($this->formuThreadElementsList)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('formuThreadElementsList', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->formuThreadElementsList));
        {
          foreach ($this->formuThreadElementsList as $iter41)
          {
            $xfer += $iter41->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->count !== null) {
      $xfer += $output->writeFieldBegin('count', TType::I64, 2);
      $xfer += $output->writeI64($this->count);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class thrift_ThreadContentElements {
  static $_TSPEC;

  public $title = null;
  public $content = null;
  public $contentCount = null;
  public $userId = null;
  public $nickName = null;
  public $postTime = null;
  public $point = null;
  public $grade = null;
  public $userStatus = null;
  public $isVisible = null;
  public $threadContentElementsList = null;
  public $count = null;
  public $voteContentElements = null;
  public $isHidden = null;
  public $isShow = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'title',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'content',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'contentCount',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'userId',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'nickName',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'postTime',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'point',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'grade',
          'type' => TType::I32,
          ),
        9 => array(
          'var' => 'userStatus',
          'type' => TType::I32,
          ),
        10 => array(
          'var' => 'isVisible',
          'type' => TType::I32,
          ),
        11 => array(
          'var' => 'threadContentElementsList',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'thrift_ThreadContentElementsList',
            ),
          ),
        12 => array(
          'var' => 'count',
          'type' => TType::I32,
          ),
        13 => array(
          'var' => 'voteContentElements',
          'type' => TType::STRUCT,
          'class' => 'thrift_VoteContentElements',
          ),
        14 => array(
          'var' => 'isHidden',
          'type' => TType::I32,
          ),
        15 => array(
          'var' => 'isShow',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['title'])) {
        $this->title = $vals['title'];
      }
      if (isset($vals['content'])) {
        $this->content = $vals['content'];
      }
      if (isset($vals['contentCount'])) {
        $this->contentCount = $vals['contentCount'];
      }
      if (isset($vals['userId'])) {
        $this->userId = $vals['userId'];
      }
      if (isset($vals['nickName'])) {
        $this->nickName = $vals['nickName'];
      }
      if (isset($vals['postTime'])) {
        $this->postTime = $vals['postTime'];
      }
      if (isset($vals['point'])) {
        $this->point = $vals['point'];
      }
      if (isset($vals['grade'])) {
        $this->grade = $vals['grade'];
      }
      if (isset($vals['userStatus'])) {
        $this->userStatus = $vals['userStatus'];
      }
      if (isset($vals['isVisible'])) {
        $this->isVisible = $vals['isVisible'];
      }
      if (isset($vals['threadContentElementsList'])) {
        $this->threadContentElementsList = $vals['threadContentElementsList'];
      }
      if (isset($vals['count'])) {
        $this->count = $vals['count'];
      }
      if (isset($vals['voteContentElements'])) {
        $this->voteContentElements = $vals['voteContentElements'];
      }
      if (isset($vals['isHidden'])) {
        $this->isHidden = $vals['isHidden'];
      }
      if (isset($vals['isShow'])) {
        $this->isShow = $vals['isShow'];
      }
    }
  }

  public function getName() {
    return 'ThreadContentElements';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->title);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->content);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->contentCount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->userId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->nickName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->postTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->point);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->grade);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->userStatus);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->isVisible);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::LST) {
            $this->threadContentElementsList = array();
            $_size42 = 0;
            $_etype45 = 0;
            $xfer += $input->readListBegin($_etype45, $_size42);
            for ($_i46 = 0; $_i46 < $_size42; ++$_i46)
            {
              $elem47 = null;
              $elem47 = new thrift_ThreadContentElementsList();
              $xfer += $elem47->read($input);
              $this->threadContentElementsList []= $elem47;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->count);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRUCT) {
            $this->voteContentElements = new thrift_VoteContentElements();
            $xfer += $this->voteContentElements->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->isHidden);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->isShow);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ThreadContentElements');
    if ($this->title !== null) {
      $xfer += $output->writeFieldBegin('title', TType::STRING, 1);
      $xfer += $output->writeString($this->title);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->content !== null) {
      $xfer += $output->writeFieldBegin('content', TType::STRING, 2);
      $xfer += $output->writeString($this->content);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->contentCount !== null) {
      $xfer += $output->writeFieldBegin('contentCount', TType::I32, 3);
      $xfer += $output->writeI32($this->contentCount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userId !== null) {
      $xfer += $output->writeFieldBegin('userId', TType::I64, 4);
      $xfer += $output->writeI64($this->userId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->nickName !== null) {
      $xfer += $output->writeFieldBegin('nickName', TType::STRING, 5);
      $xfer += $output->writeString($this->nickName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->postTime !== null) {
      $xfer += $output->writeFieldBegin('postTime', TType::STRING, 6);
      $xfer += $output->writeString($this->postTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->point !== null) {
      $xfer += $output->writeFieldBegin('point', TType::I32, 7);
      $xfer += $output->writeI32($this->point);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->grade !== null) {
      $xfer += $output->writeFieldBegin('grade', TType::I32, 8);
      $xfer += $output->writeI32($this->grade);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userStatus !== null) {
      $xfer += $output->writeFieldBegin('userStatus', TType::I32, 9);
      $xfer += $output->writeI32($this->userStatus);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->isVisible !== null) {
      $xfer += $output->writeFieldBegin('isVisible', TType::I32, 10);
      $xfer += $output->writeI32($this->isVisible);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->threadContentElementsList !== null) {
      if (!is_array($this->threadContentElementsList)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('threadContentElementsList', TType::LST, 11);
      {
        $output->writeListBegin(TType::STRUCT, count($this->threadContentElementsList));
        {
          foreach ($this->threadContentElementsList as $iter48)
          {
            $xfer += $iter48->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->count !== null) {
      $xfer += $output->writeFieldBegin('count', TType::I32, 12);
      $xfer += $output->writeI32($this->count);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->voteContentElements !== null) {
      if (!is_object($this->voteContentElements)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('voteContentElements', TType::STRUCT, 13);
      $xfer += $this->voteContentElements->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->isHidden !== null) {
      $xfer += $output->writeFieldBegin('isHidden', TType::I32, 14);
      $xfer += $output->writeI32($this->isHidden);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->isShow !== null) {
      $xfer += $output->writeFieldBegin('isShow', TType::I32, 15);
      $xfer += $output->writeI32($this->isShow);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class thrift_ThreadElementsList {
  static $_TSPEC;

  public $threadId = null;
  public $title = null;
  public $userId = null;
  public $nickName = null;
  public $hitsNum = null;
  public $replyNum = null;
  public $forumId = null;
  public $forumName = null;
  public $createTime = null;
  public $content = null;
  public $isVisible = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'threadId',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'title',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'userId',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'nickName',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'hitsNum',
          'type' => TType::I64,
          ),
        6 => array(
          'var' => 'replyNum',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'forumId',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'forumName',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'createTime',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'content',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'isVisible',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['threadId'])) {
        $this->threadId = $vals['threadId'];
      }
      if (isset($vals['title'])) {
        $this->title = $vals['title'];
      }
      if (isset($vals['userId'])) {
        $this->userId = $vals['userId'];
      }
      if (isset($vals['nickName'])) {
        $this->nickName = $vals['nickName'];
      }
      if (isset($vals['hitsNum'])) {
        $this->hitsNum = $vals['hitsNum'];
      }
      if (isset($vals['replyNum'])) {
        $this->replyNum = $vals['replyNum'];
      }
      if (isset($vals['forumId'])) {
        $this->forumId = $vals['forumId'];
      }
      if (isset($vals['forumName'])) {
        $this->forumName = $vals['forumName'];
      }
      if (isset($vals['createTime'])) {
        $this->createTime = $vals['createTime'];
      }
      if (isset($vals['content'])) {
        $this->content = $vals['content'];
      }
      if (isset($vals['isVisible'])) {
        $this->isVisible = $vals['isVisible'];
      }
    }
  }

  public function getName() {
    return 'ThreadElementsList';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->threadId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->title);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->userId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->nickName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->hitsNum);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->replyNum);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->forumId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->forumName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->createTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->content);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->isVisible);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ThreadElementsList');
    if ($this->threadId !== null) {
      $xfer += $output->writeFieldBegin('threadId', TType::STRING, 1);
      $xfer += $output->writeString($this->threadId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->title !== null) {
      $xfer += $output->writeFieldBegin('title', TType::STRING, 2);
      $xfer += $output->writeString($this->title);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userId !== null) {
      $xfer += $output->writeFieldBegin('userId', TType::I32, 3);
      $xfer += $output->writeI32($this->userId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->nickName !== null) {
      $xfer += $output->writeFieldBegin('nickName', TType::STRING, 4);
      $xfer += $output->writeString($this->nickName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->hitsNum !== null) {
      $xfer += $output->writeFieldBegin('hitsNum', TType::I64, 5);
      $xfer += $output->writeI64($this->hitsNum);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->replyNum !== null) {
      $xfer += $output->writeFieldBegin('replyNum', TType::I32, 6);
      $xfer += $output->writeI32($this->replyNum);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->forumId !== null) {
      $xfer += $output->writeFieldBegin('forumId', TType::I32, 7);
      $xfer += $output->writeI32($this->forumId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->forumName !== null) {
      $xfer += $output->writeFieldBegin('forumName', TType::STRING, 8);
      $xfer += $output->writeString($this->forumName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->createTime !== null) {
      $xfer += $output->writeFieldBegin('createTime', TType::STRING, 9);
      $xfer += $output->writeString($this->createTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->content !== null) {
      $xfer += $output->writeFieldBegin('content', TType::STRING, 10);
      $xfer += $output->writeString($this->content);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->isVisible !== null) {
      $xfer += $output->writeFieldBegin('isVisible', TType::I32, 11);
      $xfer += $output->writeI32($this->isVisible);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class thrift_ThreadElements {
  static $_TSPEC;

  public $threadElementsList = null;
  public $count = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'threadElementsList',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'thrift_ThreadElementsList',
            ),
          ),
        2 => array(
          'var' => 'count',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['threadElementsList'])) {
        $this->threadElementsList = $vals['threadElementsList'];
      }
      if (isset($vals['count'])) {
        $this->count = $vals['count'];
      }
    }
  }

  public function getName() {
    return 'ThreadElements';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->threadElementsList = array();
            $_size49 = 0;
            $_etype52 = 0;
            $xfer += $input->readListBegin($_etype52, $_size49);
            for ($_i53 = 0; $_i53 < $_size49; ++$_i53)
            {
              $elem54 = null;
              $elem54 = new thrift_ThreadElementsList();
              $xfer += $elem54->read($input);
              $this->threadElementsList []= $elem54;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->count);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ThreadElements');
    if ($this->threadElementsList !== null) {
      if (!is_array($this->threadElementsList)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('threadElementsList', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->threadElementsList));
        {
          foreach ($this->threadElementsList as $iter55)
          {
            $xfer += $iter55->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->count !== null) {
      $xfer += $output->writeFieldBegin('count', TType::I32, 2);
      $xfer += $output->writeI32($this->count);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class thrift_ThreadOnlyLookLandList {
  static $_TSPEC;

  public $replyId = null;
  public $replyContent = null;
  public $replyTime = null;
  public $isVisible = null;
  public $seqId = null;
  public $referIsvisible = null;
  public $referContent = null;
  public $referNickName = null;
  public $referId = null;
  public $referUser = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'replyId',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'replyContent',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'replyTime',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'isVisible',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'seqId',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'referIsvisible',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'referContent',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'referNickName',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'referId',
          'type' => TType::I32,
          ),
        10 => array(
          'var' => 'referUser',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['replyId'])) {
        $this->replyId = $vals['replyId'];
      }
      if (isset($vals['replyContent'])) {
        $this->replyContent = $vals['replyContent'];
      }
      if (isset($vals['replyTime'])) {
        $this->replyTime = $vals['replyTime'];
      }
      if (isset($vals['isVisible'])) {
        $this->isVisible = $vals['isVisible'];
      }
      if (isset($vals['seqId'])) {
        $this->seqId = $vals['seqId'];
      }
      if (isset($vals['referIsvisible'])) {
        $this->referIsvisible = $vals['referIsvisible'];
      }
      if (isset($vals['referContent'])) {
        $this->referContent = $vals['referContent'];
      }
      if (isset($vals['referNickName'])) {
        $this->referNickName = $vals['referNickName'];
      }
      if (isset($vals['referId'])) {
        $this->referId = $vals['referId'];
      }
      if (isset($vals['referUser'])) {
        $this->referUser = $vals['referUser'];
      }
    }
  }

  public function getName() {
    return 'ThreadOnlyLookLandList';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->replyId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->replyContent);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->replyTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->isVisible);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->seqId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->referIsvisible);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->referContent);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->referNickName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->referId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->referUser);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ThreadOnlyLookLandList');
    if ($this->replyId !== null) {
      $xfer += $output->writeFieldBegin('replyId', TType::I64, 1);
      $xfer += $output->writeI64($this->replyId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->replyContent !== null) {
      $xfer += $output->writeFieldBegin('replyContent', TType::STRING, 2);
      $xfer += $output->writeString($this->replyContent);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->replyTime !== null) {
      $xfer += $output->writeFieldBegin('replyTime', TType::STRING, 3);
      $xfer += $output->writeString($this->replyTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->isVisible !== null) {
      $xfer += $output->writeFieldBegin('isVisible', TType::I32, 4);
      $xfer += $output->writeI32($this->isVisible);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->seqId !== null) {
      $xfer += $output->writeFieldBegin('seqId', TType::I32, 5);
      $xfer += $output->writeI32($this->seqId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->referIsvisible !== null) {
      $xfer += $output->writeFieldBegin('referIsvisible', TType::I32, 6);
      $xfer += $output->writeI32($this->referIsvisible);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->referContent !== null) {
      $xfer += $output->writeFieldBegin('referContent', TType::STRING, 7);
      $xfer += $output->writeString($this->referContent);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->referNickName !== null) {
      $xfer += $output->writeFieldBegin('referNickName', TType::STRING, 8);
      $xfer += $output->writeString($this->referNickName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->referId !== null) {
      $xfer += $output->writeFieldBegin('referId', TType::I32, 9);
      $xfer += $output->writeI32($this->referId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->referUser !== null) {
      $xfer += $output->writeFieldBegin('referUser', TType::I32, 10);
      $xfer += $output->writeI32($this->referUser);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class thrift_ThreadOnlyLookLand {
  static $_TSPEC;

  public $threadId = null;
  public $title = null;
  public $userId = null;
  public $nickName = null;
  public $point = null;
  public $grade = null;
  public $userStatus = null;
  public $threadOnlyLookLandList = null;
  public $count = null;
  public $content = null;
  public $contentCount = null;
  public $isVisible = null;
  public $postTime = null;
  public $voteContentElements = null;
  public $isHidden = null;
  public $isShow = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'threadId',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'title',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'userId',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'nickName',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'point',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'grade',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'userStatus',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'threadOnlyLookLandList',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'thrift_ThreadOnlyLookLandList',
            ),
          ),
        9 => array(
          'var' => 'count',
          'type' => TType::I32,
          ),
        10 => array(
          'var' => 'content',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'contentCount',
          'type' => TType::I32,
          ),
        12 => array(
          'var' => 'isVisible',
          'type' => TType::I32,
          ),
        13 => array(
          'var' => 'postTime',
          'type' => TType::STRING,
          ),
        14 => array(
          'var' => 'voteContentElements',
          'type' => TType::STRUCT,
          'class' => 'thrift_VoteContentElements',
          ),
        15 => array(
          'var' => 'isHidden',
          'type' => TType::I32,
          ),
        16 => array(
          'var' => 'isShow',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['threadId'])) {
        $this->threadId = $vals['threadId'];
      }
      if (isset($vals['title'])) {
        $this->title = $vals['title'];
      }
      if (isset($vals['userId'])) {
        $this->userId = $vals['userId'];
      }
      if (isset($vals['nickName'])) {
        $this->nickName = $vals['nickName'];
      }
      if (isset($vals['point'])) {
        $this->point = $vals['point'];
      }
      if (isset($vals['grade'])) {
        $this->grade = $vals['grade'];
      }
      if (isset($vals['userStatus'])) {
        $this->userStatus = $vals['userStatus'];
      }
      if (isset($vals['threadOnlyLookLandList'])) {
        $this->threadOnlyLookLandList = $vals['threadOnlyLookLandList'];
      }
      if (isset($vals['count'])) {
        $this->count = $vals['count'];
      }
      if (isset($vals['content'])) {
        $this->content = $vals['content'];
      }
      if (isset($vals['contentCount'])) {
        $this->contentCount = $vals['contentCount'];
      }
      if (isset($vals['isVisible'])) {
        $this->isVisible = $vals['isVisible'];
      }
      if (isset($vals['postTime'])) {
        $this->postTime = $vals['postTime'];
      }
      if (isset($vals['voteContentElements'])) {
        $this->voteContentElements = $vals['voteContentElements'];
      }
      if (isset($vals['isHidden'])) {
        $this->isHidden = $vals['isHidden'];
      }
      if (isset($vals['isShow'])) {
        $this->isShow = $vals['isShow'];
      }
    }
  }

  public function getName() {
    return 'ThreadOnlyLookLand';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->threadId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->title);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->userId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->nickName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->point);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->grade);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->userStatus);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::LST) {
            $this->threadOnlyLookLandList = array();
            $_size56 = 0;
            $_etype59 = 0;
            $xfer += $input->readListBegin($_etype59, $_size56);
            for ($_i60 = 0; $_i60 < $_size56; ++$_i60)
            {
              $elem61 = null;
              $elem61 = new thrift_ThreadOnlyLookLandList();
              $xfer += $elem61->read($input);
              $this->threadOnlyLookLandList []= $elem61;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->count);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->content);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->contentCount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->isVisible);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->postTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::STRUCT) {
            $this->voteContentElements = new thrift_VoteContentElements();
            $xfer += $this->voteContentElements->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->isHidden);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->isShow);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ThreadOnlyLookLand');
    if ($this->threadId !== null) {
      $xfer += $output->writeFieldBegin('threadId', TType::STRING, 1);
      $xfer += $output->writeString($this->threadId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->title !== null) {
      $xfer += $output->writeFieldBegin('title', TType::STRING, 2);
      $xfer += $output->writeString($this->title);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userId !== null) {
      $xfer += $output->writeFieldBegin('userId', TType::I32, 3);
      $xfer += $output->writeI32($this->userId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->nickName !== null) {
      $xfer += $output->writeFieldBegin('nickName', TType::STRING, 4);
      $xfer += $output->writeString($this->nickName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->point !== null) {
      $xfer += $output->writeFieldBegin('point', TType::I32, 5);
      $xfer += $output->writeI32($this->point);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->grade !== null) {
      $xfer += $output->writeFieldBegin('grade', TType::I32, 6);
      $xfer += $output->writeI32($this->grade);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userStatus !== null) {
      $xfer += $output->writeFieldBegin('userStatus', TType::I32, 7);
      $xfer += $output->writeI32($this->userStatus);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->threadOnlyLookLandList !== null) {
      if (!is_array($this->threadOnlyLookLandList)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('threadOnlyLookLandList', TType::LST, 8);
      {
        $output->writeListBegin(TType::STRUCT, count($this->threadOnlyLookLandList));
        {
          foreach ($this->threadOnlyLookLandList as $iter62)
          {
            $xfer += $iter62->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->count !== null) {
      $xfer += $output->writeFieldBegin('count', TType::I32, 9);
      $xfer += $output->writeI32($this->count);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->content !== null) {
      $xfer += $output->writeFieldBegin('content', TType::STRING, 10);
      $xfer += $output->writeString($this->content);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->contentCount !== null) {
      $xfer += $output->writeFieldBegin('contentCount', TType::I32, 11);
      $xfer += $output->writeI32($this->contentCount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->isVisible !== null) {
      $xfer += $output->writeFieldBegin('isVisible', TType::I32, 12);
      $xfer += $output->writeI32($this->isVisible);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->postTime !== null) {
      $xfer += $output->writeFieldBegin('postTime', TType::STRING, 13);
      $xfer += $output->writeString($this->postTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->voteContentElements !== null) {
      if (!is_object($this->voteContentElements)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('voteContentElements', TType::STRUCT, 14);
      $xfer += $this->voteContentElements->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->isHidden !== null) {
      $xfer += $output->writeFieldBegin('isHidden', TType::I32, 15);
      $xfer += $output->writeI32($this->isHidden);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->isShow !== null) {
      $xfer += $output->writeFieldBegin('isShow', TType::I32, 16);
      $xfer += $output->writeI32($this->isShow);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class thrift_PointGrade {
  static $_TSPEC;

  public $point = null;
  public $grade = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'point',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'grade',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['point'])) {
        $this->point = $vals['point'];
      }
      if (isset($vals['grade'])) {
        $this->grade = $vals['grade'];
      }
    }
  }

  public function getName() {
    return 'PointGrade';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->point);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->grade);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PointGrade');
    if ($this->point !== null) {
      $xfer += $output->writeFieldBegin('point', TType::I32, 1);
      $xfer += $output->writeI32($this->point);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->grade !== null) {
      $xfer += $output->writeFieldBegin('grade', TType::I32, 2);
      $xfer += $output->writeI32($this->grade);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class thrift_ProductInfo {
  static $_TSPEC;

  public $sourceId = null;
  public $type = null;
  public $productName = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'sourceId',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'type',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'productName',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['sourceId'])) {
        $this->sourceId = $vals['sourceId'];
      }
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['productName'])) {
        $this->productName = $vals['productName'];
      }
    }
  }

  public function getName() {
    return 'ProductInfo';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->sourceId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->productName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ProductInfo');
    if ($this->sourceId !== null) {
      $xfer += $output->writeFieldBegin('sourceId', TType::STRING, 1);
      $xfer += $output->writeString($this->sourceId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::I32, 2);
      $xfer += $output->writeI32($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->productName !== null) {
      $xfer += $output->writeFieldBegin('productName', TType::STRING, 3);
      $xfer += $output->writeString($this->productName);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class thrift_Result {
  static $_TSPEC;

  public $isSuccess = null;
  public $code = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'isSuccess',
          'type' => TType::BOOL,
          ),
        2 => array(
          'var' => 'code',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['isSuccess'])) {
        $this->isSuccess = $vals['isSuccess'];
      }
      if (isset($vals['code'])) {
        $this->code = $vals['code'];
      }
    }
  }

  public function getName() {
    return 'Result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->isSuccess);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Result');
    if ($this->isSuccess !== null) {
      $xfer += $output->writeFieldBegin('isSuccess', TType::BOOL, 1);
      $xfer += $output->writeBool($this->isSuccess);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->code !== null) {
      $xfer += $output->writeFieldBegin('code', TType::I32, 2);
      $xfer += $output->writeI32($this->code);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class thrift_ThreadTopic {
  static $_TSPEC;

  public $threadId = null;
  public $title = null;
  public $content = null;
  public $contentCount = null;
  public $updateTime = null;
  public $isVisible = null;
  public $isVote = null;
  public $isGood = null;
  public $isTop = null;
  public $isLock = null;
  public $forumId = null;
  public $forumName = null;
  public $userId = null;
  public $nickName = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'threadId',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'title',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'content',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'contentCount',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'updateTime',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'isVisible',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'isVote',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'isGood',
          'type' => TType::I32,
          ),
        9 => array(
          'var' => 'isTop',
          'type' => TType::I32,
          ),
        10 => array(
          'var' => 'isLock',
          'type' => TType::I32,
          ),
        11 => array(
          'var' => 'forumId',
          'type' => TType::I32,
          ),
        12 => array(
          'var' => 'forumName',
          'type' => TType::STRING,
          ),
        13 => array(
          'var' => 'userId',
          'type' => TType::I32,
          ),
        14 => array(
          'var' => 'nickName',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['threadId'])) {
        $this->threadId = $vals['threadId'];
      }
      if (isset($vals['title'])) {
        $this->title = $vals['title'];
      }
      if (isset($vals['content'])) {
        $this->content = $vals['content'];
      }
      if (isset($vals['contentCount'])) {
        $this->contentCount = $vals['contentCount'];
      }
      if (isset($vals['updateTime'])) {
        $this->updateTime = $vals['updateTime'];
      }
      if (isset($vals['isVisible'])) {
        $this->isVisible = $vals['isVisible'];
      }
      if (isset($vals['isVote'])) {
        $this->isVote = $vals['isVote'];
      }
      if (isset($vals['isGood'])) {
        $this->isGood = $vals['isGood'];
      }
      if (isset($vals['isTop'])) {
        $this->isTop = $vals['isTop'];
      }
      if (isset($vals['isLock'])) {
        $this->isLock = $vals['isLock'];
      }
      if (isset($vals['forumId'])) {
        $this->forumId = $vals['forumId'];
      }
      if (isset($vals['forumName'])) {
        $this->forumName = $vals['forumName'];
      }
      if (isset($vals['userId'])) {
        $this->userId = $vals['userId'];
      }
      if (isset($vals['nickName'])) {
        $this->nickName = $vals['nickName'];
      }
    }
  }

  public function getName() {
    return 'ThreadTopic';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->threadId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->title);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->content);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->contentCount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->updateTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->isVisible);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->isVote);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->isGood);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->isTop);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->isLock);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->forumId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->forumName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->userId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->nickName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ThreadTopic');
    if ($this->threadId !== null) {
      $xfer += $output->writeFieldBegin('threadId', TType::STRING, 1);
      $xfer += $output->writeString($this->threadId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->title !== null) {
      $xfer += $output->writeFieldBegin('title', TType::STRING, 2);
      $xfer += $output->writeString($this->title);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->content !== null) {
      $xfer += $output->writeFieldBegin('content', TType::STRING, 3);
      $xfer += $output->writeString($this->content);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->contentCount !== null) {
      $xfer += $output->writeFieldBegin('contentCount', TType::I32, 4);
      $xfer += $output->writeI32($this->contentCount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->updateTime !== null) {
      $xfer += $output->writeFieldBegin('updateTime', TType::STRING, 5);
      $xfer += $output->writeString($this->updateTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->isVisible !== null) {
      $xfer += $output->writeFieldBegin('isVisible', TType::I32, 6);
      $xfer += $output->writeI32($this->isVisible);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->isVote !== null) {
      $xfer += $output->writeFieldBegin('isVote', TType::I32, 7);
      $xfer += $output->writeI32($this->isVote);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->isGood !== null) {
      $xfer += $output->writeFieldBegin('isGood', TType::I32, 8);
      $xfer += $output->writeI32($this->isGood);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->isTop !== null) {
      $xfer += $output->writeFieldBegin('isTop', TType::I32, 9);
      $xfer += $output->writeI32($this->isTop);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->isLock !== null) {
      $xfer += $output->writeFieldBegin('isLock', TType::I32, 10);
      $xfer += $output->writeI32($this->isLock);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->forumId !== null) {
      $xfer += $output->writeFieldBegin('forumId', TType::I32, 11);
      $xfer += $output->writeI32($this->forumId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->forumName !== null) {
      $xfer += $output->writeFieldBegin('forumName', TType::STRING, 12);
      $xfer += $output->writeString($this->forumName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userId !== null) {
      $xfer += $output->writeFieldBegin('userId', TType::I32, 13);
      $xfer += $output->writeI32($this->userId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->nickName !== null) {
      $xfer += $output->writeFieldBegin('nickName', TType::STRING, 14);
      $xfer += $output->writeString($this->nickName);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class thrift_FourmBasicList {
  static $_TSPEC;

  public $threadNum = null;
  public $postNum = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'threadNum',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'postNum',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['threadNum'])) {
        $this->threadNum = $vals['threadNum'];
      }
      if (isset($vals['postNum'])) {
        $this->postNum = $vals['postNum'];
      }
    }
  }

  public function getName() {
    return 'FourmBasicList';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->threadNum);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->postNum);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('FourmBasicList');
    if ($this->threadNum !== null) {
      $xfer += $output->writeFieldBegin('threadNum', TType::I64, 1);
      $xfer += $output->writeI64($this->threadNum);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->postNum !== null) {
      $xfer += $output->writeFieldBegin('postNum', TType::I64, 2);
      $xfer += $output->writeI64($this->postNum);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class thrift_AdminSimpleInfo {
  static $_TSPEC;

  public $adminId = null;
  public $nickName = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'adminId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'nickName',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['adminId'])) {
        $this->adminId = $vals['adminId'];
      }
      if (isset($vals['nickName'])) {
        $this->nickName = $vals['nickName'];
      }
    }
  }

  public function getName() {
    return 'AdminSimpleInfo';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->adminId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->nickName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AdminSimpleInfo');
    if ($this->adminId !== null) {
      $xfer += $output->writeFieldBegin('adminId', TType::I32, 1);
      $xfer += $output->writeI32($this->adminId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->nickName !== null) {
      $xfer += $output->writeFieldBegin('nickName', TType::STRING, 2);
      $xfer += $output->writeString($this->nickName);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class thrift_SnsScoreInfo {
  static $_TSPEC;

  public $level = null;
  public $totalScore = null;
  public $lessScore = null;
  public $nickName = null;
  public $todayScore = null;
  public $smallpic = null;
  public $pic = null;
  public $rank = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'level',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'totalScore',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'lessScore',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'nickName',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'todayScore',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'smallpic',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'pic',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'rank',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['level'])) {
        $this->level = $vals['level'];
      }
      if (isset($vals['totalScore'])) {
        $this->totalScore = $vals['totalScore'];
      }
      if (isset($vals['lessScore'])) {
        $this->lessScore = $vals['lessScore'];
      }
      if (isset($vals['nickName'])) {
        $this->nickName = $vals['nickName'];
      }
      if (isset($vals['todayScore'])) {
        $this->todayScore = $vals['todayScore'];
      }
      if (isset($vals['smallpic'])) {
        $this->smallpic = $vals['smallpic'];
      }
      if (isset($vals['pic'])) {
        $this->pic = $vals['pic'];
      }
      if (isset($vals['rank'])) {
        $this->rank = $vals['rank'];
      }
    }
  }

  public function getName() {
    return 'SnsScoreInfo';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->level);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->totalScore);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->lessScore);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->nickName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->todayScore);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->smallpic);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->pic);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->rank);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SnsScoreInfo');
    if ($this->level !== null) {
      $xfer += $output->writeFieldBegin('level', TType::I32, 1);
      $xfer += $output->writeI32($this->level);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->totalScore !== null) {
      $xfer += $output->writeFieldBegin('totalScore', TType::I32, 2);
      $xfer += $output->writeI32($this->totalScore);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lessScore !== null) {
      $xfer += $output->writeFieldBegin('lessScore', TType::I32, 3);
      $xfer += $output->writeI32($this->lessScore);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->nickName !== null) {
      $xfer += $output->writeFieldBegin('nickName', TType::STRING, 4);
      $xfer += $output->writeString($this->nickName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->todayScore !== null) {
      $xfer += $output->writeFieldBegin('todayScore', TType::I32, 5);
      $xfer += $output->writeI32($this->todayScore);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->smallpic !== null) {
      $xfer += $output->writeFieldBegin('smallpic', TType::STRING, 6);
      $xfer += $output->writeString($this->smallpic);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pic !== null) {
      $xfer += $output->writeFieldBegin('pic', TType::STRING, 7);
      $xfer += $output->writeString($this->pic);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->rank !== null) {
      $xfer += $output->writeFieldBegin('rank', TType::STRING, 8);
      $xfer += $output->writeString($this->rank);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class thrift_LockReason {
  static $_TSPEC;

  public $reason = null;
  public $adminId = null;
  public $forumAdmin = null;
  public $lockDay = null;
  public $unlockDay = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'reason',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'adminId',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'forumAdmin',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'lockDay',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'unlockDay',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['reason'])) {
        $this->reason = $vals['reason'];
      }
      if (isset($vals['adminId'])) {
        $this->adminId = $vals['adminId'];
      }
      if (isset($vals['forumAdmin'])) {
        $this->forumAdmin = $vals['forumAdmin'];
      }
      if (isset($vals['lockDay'])) {
        $this->lockDay = $vals['lockDay'];
      }
      if (isset($vals['unlockDay'])) {
        $this->unlockDay = $vals['unlockDay'];
      }
    }
  }

  public function getName() {
    return 'LockReason';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->reason);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->adminId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->forumAdmin);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->lockDay);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->unlockDay);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('LockReason');
    if ($this->reason !== null) {
      $xfer += $output->writeFieldBegin('reason', TType::STRING, 1);
      $xfer += $output->writeString($this->reason);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->adminId !== null) {
      $xfer += $output->writeFieldBegin('adminId', TType::I32, 2);
      $xfer += $output->writeI32($this->adminId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->forumAdmin !== null) {
      $xfer += $output->writeFieldBegin('forumAdmin', TType::STRING, 3);
      $xfer += $output->writeString($this->forumAdmin);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lockDay !== null) {
      $xfer += $output->writeFieldBegin('lockDay', TType::I32, 4);
      $xfer += $output->writeI32($this->lockDay);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->unlockDay !== null) {
      $xfer += $output->writeFieldBegin('unlockDay', TType::STRING, 5);
      $xfer += $output->writeString($this->unlockDay);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class thrift_ReplyUsers {
  static $_TSPEC;

  public $users = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'users',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['users'])) {
        $this->users = $vals['users'];
      }
    }
  }

  public function getName() {
    return 'ReplyUsers';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->users = array();
            $_size63 = 0;
            $_etype66 = 0;
            $xfer += $input->readListBegin($_etype66, $_size63);
            for ($_i67 = 0; $_i67 < $_size63; ++$_i67)
            {
              $elem68 = null;
              $xfer += $input->readI32($elem68);
              $this->users []= $elem68;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ReplyUsers');
    if ($this->users !== null) {
      if (!is_array($this->users)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('users', TType::LST, 1);
      {
        $output->writeListBegin(TType::I32, count($this->users));
        {
          foreach ($this->users as $iter69)
          {
            $xfer += $output->writeI32($iter69);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class thrift_ModifiedThread {
  static $_TSPEC;

  public $threadId = null;
  public $title = null;
  public $content = null;
  public $appendContent = null;
  public $isVote = null;
  public $isHidden = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'threadId',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'title',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'content',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'appendContent',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'isVote',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'isHidden',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['threadId'])) {
        $this->threadId = $vals['threadId'];
      }
      if (isset($vals['title'])) {
        $this->title = $vals['title'];
      }
      if (isset($vals['content'])) {
        $this->content = $vals['content'];
      }
      if (isset($vals['appendContent'])) {
        $this->appendContent = $vals['appendContent'];
      }
      if (isset($vals['isVote'])) {
        $this->isVote = $vals['isVote'];
      }
      if (isset($vals['isHidden'])) {
        $this->isHidden = $vals['isHidden'];
      }
    }
  }

  public function getName() {
    return 'ModifiedThread';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->threadId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->title);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->content);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->appendContent);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->isVote);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->isHidden);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ModifiedThread');
    if ($this->threadId !== null) {
      $xfer += $output->writeFieldBegin('threadId', TType::STRING, 1);
      $xfer += $output->writeString($this->threadId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->title !== null) {
      $xfer += $output->writeFieldBegin('title', TType::STRING, 2);
      $xfer += $output->writeString($this->title);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->content !== null) {
      $xfer += $output->writeFieldBegin('content', TType::STRING, 3);
      $xfer += $output->writeString($this->content);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->appendContent !== null) {
      $xfer += $output->writeFieldBegin('appendContent', TType::STRING, 4);
      $xfer += $output->writeString($this->appendContent);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->isVote !== null) {
      $xfer += $output->writeFieldBegin('isVote', TType::I32, 5);
      $xfer += $output->writeI32($this->isVote);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->isHidden !== null) {
      $xfer += $output->writeFieldBegin('isHidden', TType::I32, 6);
      $xfer += $output->writeI32($this->isHidden);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class thrift_ScoreRank {
  static $_TSPEC;

  public $userId = null;
  public $nickName = null;
  public $score = null;
  public $photo = null;
  public $sex = null;
  public $age = null;
  public $city = null;
  public $relation = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'userId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'nickName',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'score',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'photo',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'sex',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'age',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'city',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'relation',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['userId'])) {
        $this->userId = $vals['userId'];
      }
      if (isset($vals['nickName'])) {
        $this->nickName = $vals['nickName'];
      }
      if (isset($vals['score'])) {
        $this->score = $vals['score'];
      }
      if (isset($vals['photo'])) {
        $this->photo = $vals['photo'];
      }
      if (isset($vals['sex'])) {
        $this->sex = $vals['sex'];
      }
      if (isset($vals['age'])) {
        $this->age = $vals['age'];
      }
      if (isset($vals['city'])) {
        $this->city = $vals['city'];
      }
      if (isset($vals['relation'])) {
        $this->relation = $vals['relation'];
      }
    }
  }

  public function getName() {
    return 'ScoreRank';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->userId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->nickName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->score);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->photo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->sex);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->age);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->city);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->relation);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ScoreRank');
    if ($this->userId !== null) {
      $xfer += $output->writeFieldBegin('userId', TType::I32, 1);
      $xfer += $output->writeI32($this->userId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->nickName !== null) {
      $xfer += $output->writeFieldBegin('nickName', TType::STRING, 2);
      $xfer += $output->writeString($this->nickName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->score !== null) {
      $xfer += $output->writeFieldBegin('score', TType::I32, 3);
      $xfer += $output->writeI32($this->score);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->photo !== null) {
      $xfer += $output->writeFieldBegin('photo', TType::STRING, 4);
      $xfer += $output->writeString($this->photo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sex !== null) {
      $xfer += $output->writeFieldBegin('sex', TType::I32, 5);
      $xfer += $output->writeI32($this->sex);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->age !== null) {
      $xfer += $output->writeFieldBegin('age', TType::I32, 6);
      $xfer += $output->writeI32($this->age);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->city !== null) {
      $xfer += $output->writeFieldBegin('city', TType::STRING, 7);
      $xfer += $output->writeString($this->city);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->relation !== null) {
      $xfer += $output->writeFieldBegin('relation', TType::I32, 8);
      $xfer += $output->writeI32($this->relation);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class thrift_ScoreRecord {
  static $_TSPEC;

  public $recordName = null;
  public $time = null;
  public $score = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'recordName',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'time',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'score',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['recordName'])) {
        $this->recordName = $vals['recordName'];
      }
      if (isset($vals['time'])) {
        $this->time = $vals['time'];
      }
      if (isset($vals['score'])) {
        $this->score = $vals['score'];
      }
    }
  }

  public function getName() {
    return 'ScoreRecord';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->recordName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->score);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ScoreRecord');
    if ($this->recordName !== null) {
      $xfer += $output->writeFieldBegin('recordName', TType::STRING, 1);
      $xfer += $output->writeString($this->recordName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->time !== null) {
      $xfer += $output->writeFieldBegin('time', TType::STRING, 2);
      $xfer += $output->writeString($this->time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->score !== null) {
      $xfer += $output->writeFieldBegin('score', TType::I32, 3);
      $xfer += $output->writeI32($this->score);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class thrift_ScoreRanks {
  static $_TSPEC;

  public $count = null;
  public $scoreRanks = null;
  public $myRank = null;
  public $myScore = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'count',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'scoreRanks',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'thrift_ScoreRank',
            ),
          ),
        3 => array(
          'var' => 'myRank',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'myScore',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['count'])) {
        $this->count = $vals['count'];
      }
      if (isset($vals['scoreRanks'])) {
        $this->scoreRanks = $vals['scoreRanks'];
      }
      if (isset($vals['myRank'])) {
        $this->myRank = $vals['myRank'];
      }
      if (isset($vals['myScore'])) {
        $this->myScore = $vals['myScore'];
      }
    }
  }

  public function getName() {
    return 'ScoreRanks';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->count);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->scoreRanks = array();
            $_size70 = 0;
            $_etype73 = 0;
            $xfer += $input->readListBegin($_etype73, $_size70);
            for ($_i74 = 0; $_i74 < $_size70; ++$_i74)
            {
              $elem75 = null;
              $elem75 = new thrift_ScoreRank();
              $xfer += $elem75->read($input);
              $this->scoreRanks []= $elem75;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->myRank);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->myScore);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ScoreRanks');
    if ($this->count !== null) {
      $xfer += $output->writeFieldBegin('count', TType::I32, 1);
      $xfer += $output->writeI32($this->count);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->scoreRanks !== null) {
      if (!is_array($this->scoreRanks)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('scoreRanks', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRUCT, count($this->scoreRanks));
        {
          foreach ($this->scoreRanks as $iter76)
          {
            $xfer += $iter76->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->myRank !== null) {
      $xfer += $output->writeFieldBegin('myRank', TType::I32, 3);
      $xfer += $output->writeI32($this->myRank);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->myScore !== null) {
      $xfer += $output->writeFieldBegin('myScore', TType::I32, 4);
      $xfer += $output->writeI32($this->myScore);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class thrift_ScoreRecords {
  static $_TSPEC;

  public $count = null;
  public $scoreRecords = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'count',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'scoreRecords',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'thrift_ScoreRecord',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['count'])) {
        $this->count = $vals['count'];
      }
      if (isset($vals['scoreRecords'])) {
        $this->scoreRecords = $vals['scoreRecords'];
      }
    }
  }

  public function getName() {
    return 'ScoreRecords';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->count);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->scoreRecords = array();
            $_size77 = 0;
            $_etype80 = 0;
            $xfer += $input->readListBegin($_etype80, $_size77);
            for ($_i81 = 0; $_i81 < $_size77; ++$_i81)
            {
              $elem82 = null;
              $elem82 = new thrift_ScoreRecord();
              $xfer += $elem82->read($input);
              $this->scoreRecords []= $elem82;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ScoreRecords');
    if ($this->count !== null) {
      $xfer += $output->writeFieldBegin('count', TType::I32, 1);
      $xfer += $output->writeI32($this->count);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->scoreRecords !== null) {
      if (!is_array($this->scoreRecords)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('scoreRecords', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRUCT, count($this->scoreRecords));
        {
          foreach ($this->scoreRecords as $iter83)
          {
            $xfer += $iter83->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class thrift_HotForumElementsList {
  static $_TSPEC;

  public $forumId = null;
  public $forumName = null;
  public $forumPostCount = null;
  public $rootCatId = null;
  public $rootCatName = null;
  public $hotDegree = null;
  public $forumDesc = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'forumId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'forumName',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'forumPostCount',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'rootCatId',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'rootCatName',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'hotDegree',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'forumDesc',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['forumId'])) {
        $this->forumId = $vals['forumId'];
      }
      if (isset($vals['forumName'])) {
        $this->forumName = $vals['forumName'];
      }
      if (isset($vals['forumPostCount'])) {
        $this->forumPostCount = $vals['forumPostCount'];
      }
      if (isset($vals['rootCatId'])) {
        $this->rootCatId = $vals['rootCatId'];
      }
      if (isset($vals['rootCatName'])) {
        $this->rootCatName = $vals['rootCatName'];
      }
      if (isset($vals['hotDegree'])) {
        $this->hotDegree = $vals['hotDegree'];
      }
      if (isset($vals['forumDesc'])) {
        $this->forumDesc = $vals['forumDesc'];
      }
    }
  }

  public function getName() {
    return 'HotForumElementsList';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->forumId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->forumName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->forumPostCount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->rootCatId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->rootCatName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->hotDegree);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->forumDesc);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('HotForumElementsList');
    if ($this->forumId !== null) {
      $xfer += $output->writeFieldBegin('forumId', TType::I32, 1);
      $xfer += $output->writeI32($this->forumId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->forumName !== null) {
      $xfer += $output->writeFieldBegin('forumName', TType::STRING, 2);
      $xfer += $output->writeString($this->forumName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->forumPostCount !== null) {
      $xfer += $output->writeFieldBegin('forumPostCount', TType::I32, 3);
      $xfer += $output->writeI32($this->forumPostCount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->rootCatId !== null) {
      $xfer += $output->writeFieldBegin('rootCatId', TType::I32, 4);
      $xfer += $output->writeI32($this->rootCatId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->rootCatName !== null) {
      $xfer += $output->writeFieldBegin('rootCatName', TType::STRING, 5);
      $xfer += $output->writeString($this->rootCatName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->hotDegree !== null) {
      $xfer += $output->writeFieldBegin('hotDegree', TType::I32, 6);
      $xfer += $output->writeI32($this->hotDegree);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->forumDesc !== null) {
      $xfer += $output->writeFieldBegin('forumDesc', TType::STRING, 7);
      $xfer += $output->writeString($this->forumDesc);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class thrift_HotForumElements {
  static $_TSPEC;

  public $hotForumElementsList = null;
  public $count = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'hotForumElementsList',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'thrift_HotForumElementsList',
            ),
          ),
        2 => array(
          'var' => 'count',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['hotForumElementsList'])) {
        $this->hotForumElementsList = $vals['hotForumElementsList'];
      }
      if (isset($vals['count'])) {
        $this->count = $vals['count'];
      }
    }
  }

  public function getName() {
    return 'HotForumElements';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->hotForumElementsList = array();
            $_size84 = 0;
            $_etype87 = 0;
            $xfer += $input->readListBegin($_etype87, $_size84);
            for ($_i88 = 0; $_i88 < $_size84; ++$_i88)
            {
              $elem89 = null;
              $elem89 = new thrift_HotForumElementsList();
              $xfer += $elem89->read($input);
              $this->hotForumElementsList []= $elem89;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->count);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('HotForumElements');
    if ($this->hotForumElementsList !== null) {
      if (!is_array($this->hotForumElementsList)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('hotForumElementsList', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->hotForumElementsList));
        {
          foreach ($this->hotForumElementsList as $iter90)
          {
            $xfer += $iter90->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->count !== null) {
      $xfer += $output->writeFieldBegin('count', TType::I64, 2);
      $xfer += $output->writeI64($this->count);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class thrift_SpeThreadElementsList {
  static $_TSPEC;

  public $threadId = null;
  public $title = null;
  public $userId = null;
  public $nickName = null;
  public $replyNum = null;
  public $hitsNum = null;
  public $isVote = null;
  public $isGood = null;
  public $isTop = null;
  public $isLock = null;
  public $lastUser = null;
  public $lastNickname = null;
  public $lastTime = null;
  public $isExpired = null;
  public $isPic = null;
  public $forumId = null;
  public $forumName = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'threadId',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'title',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'userId',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'nickName',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'replyNum',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'hitsNum',
          'type' => TType::I64,
          ),
        7 => array(
          'var' => 'isVote',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'isGood',
          'type' => TType::I32,
          ),
        9 => array(
          'var' => 'isTop',
          'type' => TType::I32,
          ),
        10 => array(
          'var' => 'isLock',
          'type' => TType::I32,
          ),
        11 => array(
          'var' => 'lastUser',
          'type' => TType::I32,
          ),
        12 => array(
          'var' => 'lastNickname',
          'type' => TType::STRING,
          ),
        13 => array(
          'var' => 'lastTime',
          'type' => TType::STRING,
          ),
        14 => array(
          'var' => 'isExpired',
          'type' => TType::I32,
          ),
        15 => array(
          'var' => 'isPic',
          'type' => TType::I32,
          ),
        16 => array(
          'var' => 'forumId',
          'type' => TType::I32,
          ),
        17 => array(
          'var' => 'forumName',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['threadId'])) {
        $this->threadId = $vals['threadId'];
      }
      if (isset($vals['title'])) {
        $this->title = $vals['title'];
      }
      if (isset($vals['userId'])) {
        $this->userId = $vals['userId'];
      }
      if (isset($vals['nickName'])) {
        $this->nickName = $vals['nickName'];
      }
      if (isset($vals['replyNum'])) {
        $this->replyNum = $vals['replyNum'];
      }
      if (isset($vals['hitsNum'])) {
        $this->hitsNum = $vals['hitsNum'];
      }
      if (isset($vals['isVote'])) {
        $this->isVote = $vals['isVote'];
      }
      if (isset($vals['isGood'])) {
        $this->isGood = $vals['isGood'];
      }
      if (isset($vals['isTop'])) {
        $this->isTop = $vals['isTop'];
      }
      if (isset($vals['isLock'])) {
        $this->isLock = $vals['isLock'];
      }
      if (isset($vals['lastUser'])) {
        $this->lastUser = $vals['lastUser'];
      }
      if (isset($vals['lastNickname'])) {
        $this->lastNickname = $vals['lastNickname'];
      }
      if (isset($vals['lastTime'])) {
        $this->lastTime = $vals['lastTime'];
      }
      if (isset($vals['isExpired'])) {
        $this->isExpired = $vals['isExpired'];
      }
      if (isset($vals['isPic'])) {
        $this->isPic = $vals['isPic'];
      }
      if (isset($vals['forumId'])) {
        $this->forumId = $vals['forumId'];
      }
      if (isset($vals['forumName'])) {
        $this->forumName = $vals['forumName'];
      }
    }
  }

  public function getName() {
    return 'SpeThreadElementsList';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->threadId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->title);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->userId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->nickName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->replyNum);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->hitsNum);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->isVote);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->isGood);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->isTop);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->isLock);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->lastUser);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->lastNickname);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->lastTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->isExpired);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->isPic);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->forumId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->forumName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SpeThreadElementsList');
    if ($this->threadId !== null) {
      $xfer += $output->writeFieldBegin('threadId', TType::STRING, 1);
      $xfer += $output->writeString($this->threadId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->title !== null) {
      $xfer += $output->writeFieldBegin('title', TType::STRING, 2);
      $xfer += $output->writeString($this->title);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userId !== null) {
      $xfer += $output->writeFieldBegin('userId', TType::I32, 3);
      $xfer += $output->writeI32($this->userId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->nickName !== null) {
      $xfer += $output->writeFieldBegin('nickName', TType::STRING, 4);
      $xfer += $output->writeString($this->nickName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->replyNum !== null) {
      $xfer += $output->writeFieldBegin('replyNum', TType::I32, 5);
      $xfer += $output->writeI32($this->replyNum);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->hitsNum !== null) {
      $xfer += $output->writeFieldBegin('hitsNum', TType::I64, 6);
      $xfer += $output->writeI64($this->hitsNum);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->isVote !== null) {
      $xfer += $output->writeFieldBegin('isVote', TType::I32, 7);
      $xfer += $output->writeI32($this->isVote);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->isGood !== null) {
      $xfer += $output->writeFieldBegin('isGood', TType::I32, 8);
      $xfer += $output->writeI32($this->isGood);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->isTop !== null) {
      $xfer += $output->writeFieldBegin('isTop', TType::I32, 9);
      $xfer += $output->writeI32($this->isTop);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->isLock !== null) {
      $xfer += $output->writeFieldBegin('isLock', TType::I32, 10);
      $xfer += $output->writeI32($this->isLock);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lastUser !== null) {
      $xfer += $output->writeFieldBegin('lastUser', TType::I32, 11);
      $xfer += $output->writeI32($this->lastUser);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lastNickname !== null) {
      $xfer += $output->writeFieldBegin('lastNickname', TType::STRING, 12);
      $xfer += $output->writeString($this->lastNickname);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lastTime !== null) {
      $xfer += $output->writeFieldBegin('lastTime', TType::STRING, 13);
      $xfer += $output->writeString($this->lastTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->isExpired !== null) {
      $xfer += $output->writeFieldBegin('isExpired', TType::I32, 14);
      $xfer += $output->writeI32($this->isExpired);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->isPic !== null) {
      $xfer += $output->writeFieldBegin('isPic', TType::I32, 15);
      $xfer += $output->writeI32($this->isPic);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->forumId !== null) {
      $xfer += $output->writeFieldBegin('forumId', TType::I32, 16);
      $xfer += $output->writeI32($this->forumId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->forumName !== null) {
      $xfer += $output->writeFieldBegin('forumName', TType::STRING, 17);
      $xfer += $output->writeString($this->forumName);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class thrift_SpeThreadElements {
  static $_TSPEC;

  public $speThreadElementsList = null;
  public $count = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'speThreadElementsList',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'thrift_SpeThreadElementsList',
            ),
          ),
        2 => array(
          'var' => 'count',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['speThreadElementsList'])) {
        $this->speThreadElementsList = $vals['speThreadElementsList'];
      }
      if (isset($vals['count'])) {
        $this->count = $vals['count'];
      }
    }
  }

  public function getName() {
    return 'SpeThreadElements';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->speThreadElementsList = array();
            $_size91 = 0;
            $_etype94 = 0;
            $xfer += $input->readListBegin($_etype94, $_size91);
            for ($_i95 = 0; $_i95 < $_size91; ++$_i95)
            {
              $elem96 = null;
              $elem96 = new thrift_SpeThreadElementsList();
              $xfer += $elem96->read($input);
              $this->speThreadElementsList []= $elem96;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->count);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SpeThreadElements');
    if ($this->speThreadElementsList !== null) {
      if (!is_array($this->speThreadElementsList)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('speThreadElementsList', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->speThreadElementsList));
        {
          foreach ($this->speThreadElementsList as $iter97)
          {
            $xfer += $iter97->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->count !== null) {
      $xfer += $output->writeFieldBegin('count', TType::I32, 2);
      $xfer += $output->writeI32($this->count);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class thrift_Html5ThreadElements {
  static $_TSPEC;

  public $userId = null;
  public $nickName = null;
  public $replyNum = null;
  public $createTime = null;
  public $threadId = null;
  public $title = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'userId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'nickName',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'replyNum',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'createTime',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'threadId',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'title',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['userId'])) {
        $this->userId = $vals['userId'];
      }
      if (isset($vals['nickName'])) {
        $this->nickName = $vals['nickName'];
      }
      if (isset($vals['replyNum'])) {
        $this->replyNum = $vals['replyNum'];
      }
      if (isset($vals['createTime'])) {
        $this->createTime = $vals['createTime'];
      }
      if (isset($vals['threadId'])) {
        $this->threadId = $vals['threadId'];
      }
      if (isset($vals['title'])) {
        $this->title = $vals['title'];
      }
    }
  }

  public function getName() {
    return 'Html5ThreadElements';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->userId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->nickName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->replyNum);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->createTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->threadId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->title);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Html5ThreadElements');
    if ($this->userId !== null) {
      $xfer += $output->writeFieldBegin('userId', TType::I32, 1);
      $xfer += $output->writeI32($this->userId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->nickName !== null) {
      $xfer += $output->writeFieldBegin('nickName', TType::STRING, 2);
      $xfer += $output->writeString($this->nickName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->replyNum !== null) {
      $xfer += $output->writeFieldBegin('replyNum', TType::I32, 3);
      $xfer += $output->writeI32($this->replyNum);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->createTime !== null) {
      $xfer += $output->writeFieldBegin('createTime', TType::STRING, 4);
      $xfer += $output->writeString($this->createTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->threadId !== null) {
      $xfer += $output->writeFieldBegin('threadId', TType::STRING, 5);
      $xfer += $output->writeString($this->threadId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->title !== null) {
      $xfer += $output->writeFieldBegin('title', TType::STRING, 6);
      $xfer += $output->writeString($this->title);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class thrift_TiebaResult {
  static $_TSPEC;

  public $content = null;
  public $code = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'content',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'code',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['content'])) {
        $this->content = $vals['content'];
      }
      if (isset($vals['code'])) {
        $this->code = $vals['code'];
      }
    }
  }

  public function getName() {
    return 'TiebaResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->content);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TiebaResult');
    if ($this->content !== null) {
      $xfer += $output->writeFieldBegin('content', TType::STRING, 1);
      $xfer += $output->writeString($this->content);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->code !== null) {
      $xfer += $output->writeFieldBegin('code', TType::I32, 2);
      $xfer += $output->writeI32($this->code);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

?>
