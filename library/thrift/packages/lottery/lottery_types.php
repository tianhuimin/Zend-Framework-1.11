<?php
/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
include_once $GLOBALS['THRIFT_ROOT'].'/Thrift.php';

include_once $GLOBALS['THRIFT_ROOT'].'/packages/common/common_types.php';

$GLOBALS['E_LotteryType'] = array(
  'EVERYDAY_LOTTERY' => 1,
  'COMMON_LOTTERY' => 2,
  'LOTTERYCARD_LOTTERY' => 3,
);

final class LotteryType {
  const EVERYDAY_LOTTERY = 1;
  const COMMON_LOTTERY = 2;
  const LOTTERYCARD_LOTTERY = 3;
  static public $__names = array(
    1 => 'EVERYDAY_LOTTERY',
    2 => 'COMMON_LOTTERY',
    3 => 'LOTTERYCARD_LOTTERY',
  );
}

$GLOBALS['E_LotteryPrizeType'] = array(
  'TEXT_PRIZE' => 1,
  'VOUCHER_PRIZE' => 2,
  'SCORE_PRIZE' => 3,
  'GIFTS_PRIZE' => 4,
  'CARDS_PRIZE' => 5,
  'FILLING_PRIZE' => 6,
);

final class LotteryPrizeType {
  const TEXT_PRIZE = 1;
  const VOUCHER_PRIZE = 2;
  const SCORE_PRIZE = 3;
  const GIFTS_PRIZE = 4;
  const CARDS_PRIZE = 5;
  const FILLING_PRIZE = 6;
  static public $__names = array(
    1 => 'TEXT_PRIZE',
    2 => 'VOUCHER_PRIZE',
    3 => 'SCORE_PRIZE',
    4 => 'GIFTS_PRIZE',
    5 => 'CARDS_PRIZE',
    6 => 'FILLING_PRIZE',
  );
}

class FillingPrize {
  static $_TSPEC;

  public $content = null;
  public $prizeHint = null;
  public $iconUrl = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'content',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'prizeHint',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'iconUrl',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['content'])) {
        $this->content = $vals['content'];
      }
      if (isset($vals['prizeHint'])) {
        $this->prizeHint = $vals['prizeHint'];
      }
      if (isset($vals['iconUrl'])) {
        $this->iconUrl = $vals['iconUrl'];
      }
    }
  }

  public function getName() {
    return 'FillingPrize';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->content);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->prizeHint);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->iconUrl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('FillingPrize');
    if ($this->content !== null) {
      $xfer += $output->writeFieldBegin('content', TType::STRING, 1);
      $xfer += $output->writeString($this->content);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->prizeHint !== null) {
      $xfer += $output->writeFieldBegin('prizeHint', TType::STRING, 2);
      $xfer += $output->writeString($this->prizeHint);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->iconUrl !== null) {
      $xfer += $output->writeFieldBegin('iconUrl', TType::STRING, 3);
      $xfer += $output->writeString($this->iconUrl);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TextPrize {
  static $_TSPEC;

  public $content = null;
  public $prizeHint = null;
  public $iconUrl = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'content',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'prizeHint',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'iconUrl',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['content'])) {
        $this->content = $vals['content'];
      }
      if (isset($vals['prizeHint'])) {
        $this->prizeHint = $vals['prizeHint'];
      }
      if (isset($vals['iconUrl'])) {
        $this->iconUrl = $vals['iconUrl'];
      }
    }
  }

  public function getName() {
    return 'TextPrize';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->content);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->prizeHint);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->iconUrl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TextPrize');
    if ($this->content !== null) {
      $xfer += $output->writeFieldBegin('content', TType::STRING, 1);
      $xfer += $output->writeString($this->content);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->prizeHint !== null) {
      $xfer += $output->writeFieldBegin('prizeHint', TType::STRING, 2);
      $xfer += $output->writeString($this->prizeHint);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->iconUrl !== null) {
      $xfer += $output->writeFieldBegin('iconUrl', TType::STRING, 3);
      $xfer += $output->writeString($this->iconUrl);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class VoucherPrize {
  static $_TSPEC;

  public $voucherId = null;
  public $prizeHint = null;
  public $repertory = null;
  public $iconUrl = null;
  public $name = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'voucherId',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'prizeHint',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'repertory',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'iconUrl',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['voucherId'])) {
        $this->voucherId = $vals['voucherId'];
      }
      if (isset($vals['prizeHint'])) {
        $this->prizeHint = $vals['prizeHint'];
      }
      if (isset($vals['repertory'])) {
        $this->repertory = $vals['repertory'];
      }
      if (isset($vals['iconUrl'])) {
        $this->iconUrl = $vals['iconUrl'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
    }
  }

  public function getName() {
    return 'VoucherPrize';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->voucherId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->prizeHint);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->repertory);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->iconUrl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('VoucherPrize');
    if ($this->voucherId !== null) {
      $xfer += $output->writeFieldBegin('voucherId', TType::STRING, 1);
      $xfer += $output->writeString($this->voucherId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->prizeHint !== null) {
      $xfer += $output->writeFieldBegin('prizeHint', TType::STRING, 2);
      $xfer += $output->writeString($this->prizeHint);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->repertory !== null) {
      $xfer += $output->writeFieldBegin('repertory', TType::I32, 3);
      $xfer += $output->writeI32($this->repertory);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->iconUrl !== null) {
      $xfer += $output->writeFieldBegin('iconUrl', TType::STRING, 4);
      $xfer += $output->writeString($this->iconUrl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 5);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ScorePrize {
  static $_TSPEC;

  public $score = null;
  public $prizeHint = null;
  public $repertory = null;
  public $iconUrl = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'score',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'prizeHint',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'repertory',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'iconUrl',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['score'])) {
        $this->score = $vals['score'];
      }
      if (isset($vals['prizeHint'])) {
        $this->prizeHint = $vals['prizeHint'];
      }
      if (isset($vals['repertory'])) {
        $this->repertory = $vals['repertory'];
      }
      if (isset($vals['iconUrl'])) {
        $this->iconUrl = $vals['iconUrl'];
      }
    }
  }

  public function getName() {
    return 'ScorePrize';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->score);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->prizeHint);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->repertory);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->iconUrl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ScorePrize');
    if ($this->score !== null) {
      $xfer += $output->writeFieldBegin('score', TType::I32, 1);
      $xfer += $output->writeI32($this->score);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->prizeHint !== null) {
      $xfer += $output->writeFieldBegin('prizeHint', TType::STRING, 2);
      $xfer += $output->writeString($this->prizeHint);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->repertory !== null) {
      $xfer += $output->writeFieldBegin('repertory', TType::I32, 3);
      $xfer += $output->writeI32($this->repertory);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->iconUrl !== null) {
      $xfer += $output->writeFieldBegin('iconUrl', TType::STRING, 4);
      $xfer += $output->writeString($this->iconUrl);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GiftsPrize {
  static $_TSPEC;

  public $giftId = null;
  public $prizeHint = null;
  public $iconUrl = null;
  public $repertory = null;
  public $name = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'giftId',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'prizeHint',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'iconUrl',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'repertory',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['giftId'])) {
        $this->giftId = $vals['giftId'];
      }
      if (isset($vals['prizeHint'])) {
        $this->prizeHint = $vals['prizeHint'];
      }
      if (isset($vals['iconUrl'])) {
        $this->iconUrl = $vals['iconUrl'];
      }
      if (isset($vals['repertory'])) {
        $this->repertory = $vals['repertory'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
    }
  }

  public function getName() {
    return 'GiftsPrize';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->giftId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->prizeHint);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->iconUrl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->repertory);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GiftsPrize');
    if ($this->giftId !== null) {
      $xfer += $output->writeFieldBegin('giftId', TType::STRING, 1);
      $xfer += $output->writeString($this->giftId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->prizeHint !== null) {
      $xfer += $output->writeFieldBegin('prizeHint', TType::STRING, 2);
      $xfer += $output->writeString($this->prizeHint);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->iconUrl !== null) {
      $xfer += $output->writeFieldBegin('iconUrl', TType::STRING, 3);
      $xfer += $output->writeString($this->iconUrl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->repertory !== null) {
      $xfer += $output->writeFieldBegin('repertory', TType::I32, 4);
      $xfer += $output->writeI32($this->repertory);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 5);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CardsPrize {
  static $_TSPEC;

  public $cardId = null;
  public $prizeHint = null;
  public $iconUrl = null;
  public $repertory = null;
  public $name = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'cardId',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'prizeHint',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'iconUrl',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'repertory',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['cardId'])) {
        $this->cardId = $vals['cardId'];
      }
      if (isset($vals['prizeHint'])) {
        $this->prizeHint = $vals['prizeHint'];
      }
      if (isset($vals['iconUrl'])) {
        $this->iconUrl = $vals['iconUrl'];
      }
      if (isset($vals['repertory'])) {
        $this->repertory = $vals['repertory'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
    }
  }

  public function getName() {
    return 'CardsPrize';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->cardId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->prizeHint);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->iconUrl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->repertory);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CardsPrize');
    if ($this->cardId !== null) {
      $xfer += $output->writeFieldBegin('cardId', TType::STRING, 1);
      $xfer += $output->writeString($this->cardId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->prizeHint !== null) {
      $xfer += $output->writeFieldBegin('prizeHint', TType::STRING, 2);
      $xfer += $output->writeString($this->prizeHint);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->iconUrl !== null) {
      $xfer += $output->writeFieldBegin('iconUrl', TType::STRING, 3);
      $xfer += $output->writeString($this->iconUrl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->repertory !== null) {
      $xfer += $output->writeFieldBegin('repertory', TType::I32, 4);
      $xfer += $output->writeI32($this->repertory);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 5);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Prize {
  static $_TSPEC;

  public $prizeType = null;
  public $probability = null;
  public $textPrize = null;
  public $voucherPrize = null;
  public $scorePrize = null;
  public $giftsPrize = null;
  public $cardsPrize = null;
  public $prizeId = null;
  public $fillingPrize = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'prizeType',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'probability',
          'type' => TType::DOUBLE,
          ),
        3 => array(
          'var' => 'textPrize',
          'type' => TType::STRUCT,
          'class' => 'TextPrize',
          ),
        4 => array(
          'var' => 'voucherPrize',
          'type' => TType::STRUCT,
          'class' => 'VoucherPrize',
          ),
        5 => array(
          'var' => 'scorePrize',
          'type' => TType::STRUCT,
          'class' => 'ScorePrize',
          ),
        6 => array(
          'var' => 'giftsPrize',
          'type' => TType::STRUCT,
          'class' => 'GiftsPrize',
          ),
        7 => array(
          'var' => 'cardsPrize',
          'type' => TType::STRUCT,
          'class' => 'CardsPrize',
          ),
        8 => array(
          'var' => 'prizeId',
          'type' => TType::I32,
          ),
        9 => array(
          'var' => 'fillingPrize',
          'type' => TType::STRUCT,
          'class' => 'FillingPrize',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['prizeType'])) {
        $this->prizeType = $vals['prizeType'];
      }
      if (isset($vals['probability'])) {
        $this->probability = $vals['probability'];
      }
      if (isset($vals['textPrize'])) {
        $this->textPrize = $vals['textPrize'];
      }
      if (isset($vals['voucherPrize'])) {
        $this->voucherPrize = $vals['voucherPrize'];
      }
      if (isset($vals['scorePrize'])) {
        $this->scorePrize = $vals['scorePrize'];
      }
      if (isset($vals['giftsPrize'])) {
        $this->giftsPrize = $vals['giftsPrize'];
      }
      if (isset($vals['cardsPrize'])) {
        $this->cardsPrize = $vals['cardsPrize'];
      }
      if (isset($vals['prizeId'])) {
        $this->prizeId = $vals['prizeId'];
      }
      if (isset($vals['fillingPrize'])) {
        $this->fillingPrize = $vals['fillingPrize'];
      }
    }
  }

  public function getName() {
    return 'Prize';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->prizeType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->probability);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->textPrize = new TextPrize();
            $xfer += $this->textPrize->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->voucherPrize = new VoucherPrize();
            $xfer += $this->voucherPrize->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->scorePrize = new ScorePrize();
            $xfer += $this->scorePrize->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->giftsPrize = new GiftsPrize();
            $xfer += $this->giftsPrize->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRUCT) {
            $this->cardsPrize = new CardsPrize();
            $xfer += $this->cardsPrize->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->prizeId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRUCT) {
            $this->fillingPrize = new FillingPrize();
            $xfer += $this->fillingPrize->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Prize');
    if ($this->prizeType !== null) {
      $xfer += $output->writeFieldBegin('prizeType', TType::I32, 1);
      $xfer += $output->writeI32($this->prizeType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->probability !== null) {
      $xfer += $output->writeFieldBegin('probability', TType::DOUBLE, 2);
      $xfer += $output->writeDouble($this->probability);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->textPrize !== null) {
      if (!is_object($this->textPrize)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('textPrize', TType::STRUCT, 3);
      $xfer += $this->textPrize->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->voucherPrize !== null) {
      if (!is_object($this->voucherPrize)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('voucherPrize', TType::STRUCT, 4);
      $xfer += $this->voucherPrize->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->scorePrize !== null) {
      if (!is_object($this->scorePrize)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('scorePrize', TType::STRUCT, 5);
      $xfer += $this->scorePrize->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->giftsPrize !== null) {
      if (!is_object($this->giftsPrize)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('giftsPrize', TType::STRUCT, 6);
      $xfer += $this->giftsPrize->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cardsPrize !== null) {
      if (!is_object($this->cardsPrize)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('cardsPrize', TType::STRUCT, 7);
      $xfer += $this->cardsPrize->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->prizeId !== null) {
      $xfer += $output->writeFieldBegin('prizeId', TType::I32, 8);
      $xfer += $output->writeI32($this->prizeId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->fillingPrize !== null) {
      if (!is_object($this->fillingPrize)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('fillingPrize', TType::STRUCT, 9);
      $xfer += $this->fillingPrize->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class DonateRuleAppId {
  static $_TSPEC;

  public $appId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'appId',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['appId'])) {
        $this->appId = $vals['appId'];
      }
    }
  }

  public function getName() {
    return 'DonateRuleAppId';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->appId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('DonateRuleAppId');
    if ($this->appId !== null) {
      $xfer += $output->writeFieldBegin('appId', TType::I32, 1);
      $xfer += $output->writeI32($this->appId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class DonateRuleBasic {
  static $_TSPEC;

  public $continueLoginDays = null;
  public $basicDonateTimes = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'continueLoginDays',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'basicDonateTimes',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['continueLoginDays'])) {
        $this->continueLoginDays = $vals['continueLoginDays'];
      }
      if (isset($vals['basicDonateTimes'])) {
        $this->basicDonateTimes = $vals['basicDonateTimes'];
      }
    }
  }

  public function getName() {
    return 'DonateRuleBasic';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->continueLoginDays);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->basicDonateTimes);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('DonateRuleBasic');
    if ($this->continueLoginDays !== null) {
      $xfer += $output->writeFieldBegin('continueLoginDays', TType::I32, 1);
      $xfer += $output->writeI32($this->continueLoginDays);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->basicDonateTimes !== null) {
      $xfer += $output->writeFieldBegin('basicDonateTimes', TType::I32, 2);
      $xfer += $output->writeI32($this->basicDonateTimes);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class DonateRuleVip {
  static $_TSPEC;

  public $vip = null;
  public $donateTimes = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'vip',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'donateTimes',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['vip'])) {
        $this->vip = $vals['vip'];
      }
      if (isset($vals['donateTimes'])) {
        $this->donateTimes = $vals['donateTimes'];
      }
    }
  }

  public function getName() {
    return 'DonateRuleVip';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->vip);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->donateTimes);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('DonateRuleVip');
    if ($this->vip !== null) {
      $xfer += $output->writeFieldBegin('vip', TType::I32, 1);
      $xfer += $output->writeI32($this->vip);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->donateTimes !== null) {
      $xfer += $output->writeFieldBegin('donateTimes', TType::I32, 2);
      $xfer += $output->writeI32($this->donateTimes);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class EnteringLotteryRequest {
  static $_TSPEC;

  public $lotteryName = null;
  public $startTime = null;
  public $endTime = null;
  public $isDaily = null;
  public $score = null;
  public $prizes = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'lotteryName',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'startTime',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'endTime',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'isDaily',
          'type' => TType::BOOL,
          ),
        5 => array(
          'var' => 'score',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'prizes',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'Prize',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['lotteryName'])) {
        $this->lotteryName = $vals['lotteryName'];
      }
      if (isset($vals['startTime'])) {
        $this->startTime = $vals['startTime'];
      }
      if (isset($vals['endTime'])) {
        $this->endTime = $vals['endTime'];
      }
      if (isset($vals['isDaily'])) {
        $this->isDaily = $vals['isDaily'];
      }
      if (isset($vals['score'])) {
        $this->score = $vals['score'];
      }
      if (isset($vals['prizes'])) {
        $this->prizes = $vals['prizes'];
      }
    }
  }

  public function getName() {
    return 'EnteringLotteryRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->lotteryName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->startTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->endTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->isDaily);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->score);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::LST) {
            $this->prizes = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readListBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $elem5 = new Prize();
              $xfer += $elem5->read($input);
              $this->prizes []= $elem5;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('EnteringLotteryRequest');
    if ($this->lotteryName !== null) {
      $xfer += $output->writeFieldBegin('lotteryName', TType::STRING, 1);
      $xfer += $output->writeString($this->lotteryName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->startTime !== null) {
      $xfer += $output->writeFieldBegin('startTime', TType::I64, 2);
      $xfer += $output->writeI64($this->startTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->endTime !== null) {
      $xfer += $output->writeFieldBegin('endTime', TType::I64, 3);
      $xfer += $output->writeI64($this->endTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->isDaily !== null) {
      $xfer += $output->writeFieldBegin('isDaily', TType::BOOL, 4);
      $xfer += $output->writeBool($this->isDaily);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->score !== null) {
      $xfer += $output->writeFieldBegin('score', TType::I32, 5);
      $xfer += $output->writeI32($this->score);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->prizes !== null) {
      if (!is_array($this->prizes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('prizes', TType::LST, 6);
      {
        $output->writeListBegin(TType::STRUCT, count($this->prizes));
        {
          foreach ($this->prizes as $iter6)
          {
            $xfer += $iter6->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class EnteringLotteryNewRequest {
  static $_TSPEC;

  public $lotteryName = null;
  public $startTime = null;
  public $endTime = null;
  public $isDaily = null;
  public $score = null;
  public $prizes = null;
  public $vip = null;
  public $lotteryDetail = null;
  public $dayLimit = null;
  public $appIdDonateList = null;
  public $basicDonateList = null;
  public $vipDonateList = null;
  public $publicityImgUrl = null;
  public $multipleParam = null;
  public $isSelectPLayType = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'lotteryName',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'startTime',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'endTime',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'isDaily',
          'type' => TType::BOOL,
          ),
        5 => array(
          'var' => 'score',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'prizes',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'Prize',
            ),
          ),
        7 => array(
          'var' => 'vip',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'lotteryDetail',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'dayLimit',
          'type' => TType::I32,
          ),
        10 => array(
          'var' => 'appIdDonateList',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'DonateRuleAppId',
            ),
          ),
        11 => array(
          'var' => 'basicDonateList',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'DonateRuleBasic',
            ),
          ),
        12 => array(
          'var' => 'vipDonateList',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'DonateRuleVip',
            ),
          ),
        13 => array(
          'var' => 'publicityImgUrl',
          'type' => TType::STRING,
          ),
        14 => array(
          'var' => 'multipleParam',
          'type' => TType::DOUBLE,
          ),
        15 => array(
          'var' => 'isSelectPLayType',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['lotteryName'])) {
        $this->lotteryName = $vals['lotteryName'];
      }
      if (isset($vals['startTime'])) {
        $this->startTime = $vals['startTime'];
      }
      if (isset($vals['endTime'])) {
        $this->endTime = $vals['endTime'];
      }
      if (isset($vals['isDaily'])) {
        $this->isDaily = $vals['isDaily'];
      }
      if (isset($vals['score'])) {
        $this->score = $vals['score'];
      }
      if (isset($vals['prizes'])) {
        $this->prizes = $vals['prizes'];
      }
      if (isset($vals['vip'])) {
        $this->vip = $vals['vip'];
      }
      if (isset($vals['lotteryDetail'])) {
        $this->lotteryDetail = $vals['lotteryDetail'];
      }
      if (isset($vals['dayLimit'])) {
        $this->dayLimit = $vals['dayLimit'];
      }
      if (isset($vals['appIdDonateList'])) {
        $this->appIdDonateList = $vals['appIdDonateList'];
      }
      if (isset($vals['basicDonateList'])) {
        $this->basicDonateList = $vals['basicDonateList'];
      }
      if (isset($vals['vipDonateList'])) {
        $this->vipDonateList = $vals['vipDonateList'];
      }
      if (isset($vals['publicityImgUrl'])) {
        $this->publicityImgUrl = $vals['publicityImgUrl'];
      }
      if (isset($vals['multipleParam'])) {
        $this->multipleParam = $vals['multipleParam'];
      }
      if (isset($vals['isSelectPLayType'])) {
        $this->isSelectPLayType = $vals['isSelectPLayType'];
      }
    }
  }

  public function getName() {
    return 'EnteringLotteryNewRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->lotteryName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->startTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->endTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->isDaily);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->score);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::LST) {
            $this->prizes = array();
            $_size7 = 0;
            $_etype10 = 0;
            $xfer += $input->readListBegin($_etype10, $_size7);
            for ($_i11 = 0; $_i11 < $_size7; ++$_i11)
            {
              $elem12 = null;
              $elem12 = new Prize();
              $xfer += $elem12->read($input);
              $this->prizes []= $elem12;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->vip);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->lotteryDetail);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->dayLimit);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::LST) {
            $this->appIdDonateList = array();
            $_size13 = 0;
            $_etype16 = 0;
            $xfer += $input->readListBegin($_etype16, $_size13);
            for ($_i17 = 0; $_i17 < $_size13; ++$_i17)
            {
              $elem18 = null;
              $elem18 = new DonateRuleAppId();
              $xfer += $elem18->read($input);
              $this->appIdDonateList []= $elem18;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::LST) {
            $this->basicDonateList = array();
            $_size19 = 0;
            $_etype22 = 0;
            $xfer += $input->readListBegin($_etype22, $_size19);
            for ($_i23 = 0; $_i23 < $_size19; ++$_i23)
            {
              $elem24 = null;
              $elem24 = new DonateRuleBasic();
              $xfer += $elem24->read($input);
              $this->basicDonateList []= $elem24;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::LST) {
            $this->vipDonateList = array();
            $_size25 = 0;
            $_etype28 = 0;
            $xfer += $input->readListBegin($_etype28, $_size25);
            for ($_i29 = 0; $_i29 < $_size25; ++$_i29)
            {
              $elem30 = null;
              $elem30 = new DonateRuleVip();
              $xfer += $elem30->read($input);
              $this->vipDonateList []= $elem30;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->publicityImgUrl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->multipleParam);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->isSelectPLayType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('EnteringLotteryNewRequest');
    if ($this->lotteryName !== null) {
      $xfer += $output->writeFieldBegin('lotteryName', TType::STRING, 1);
      $xfer += $output->writeString($this->lotteryName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->startTime !== null) {
      $xfer += $output->writeFieldBegin('startTime', TType::I64, 2);
      $xfer += $output->writeI64($this->startTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->endTime !== null) {
      $xfer += $output->writeFieldBegin('endTime', TType::I64, 3);
      $xfer += $output->writeI64($this->endTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->isDaily !== null) {
      $xfer += $output->writeFieldBegin('isDaily', TType::BOOL, 4);
      $xfer += $output->writeBool($this->isDaily);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->score !== null) {
      $xfer += $output->writeFieldBegin('score', TType::I32, 5);
      $xfer += $output->writeI32($this->score);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->prizes !== null) {
      if (!is_array($this->prizes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('prizes', TType::LST, 6);
      {
        $output->writeListBegin(TType::STRUCT, count($this->prizes));
        {
          foreach ($this->prizes as $iter31)
          {
            $xfer += $iter31->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->vip !== null) {
      $xfer += $output->writeFieldBegin('vip', TType::I32, 7);
      $xfer += $output->writeI32($this->vip);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lotteryDetail !== null) {
      $xfer += $output->writeFieldBegin('lotteryDetail', TType::STRING, 8);
      $xfer += $output->writeString($this->lotteryDetail);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dayLimit !== null) {
      $xfer += $output->writeFieldBegin('dayLimit', TType::I32, 9);
      $xfer += $output->writeI32($this->dayLimit);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->appIdDonateList !== null) {
      if (!is_array($this->appIdDonateList)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('appIdDonateList', TType::LST, 10);
      {
        $output->writeListBegin(TType::STRUCT, count($this->appIdDonateList));
        {
          foreach ($this->appIdDonateList as $iter32)
          {
            $xfer += $iter32->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->basicDonateList !== null) {
      if (!is_array($this->basicDonateList)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('basicDonateList', TType::LST, 11);
      {
        $output->writeListBegin(TType::STRUCT, count($this->basicDonateList));
        {
          foreach ($this->basicDonateList as $iter33)
          {
            $xfer += $iter33->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->vipDonateList !== null) {
      if (!is_array($this->vipDonateList)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('vipDonateList', TType::LST, 12);
      {
        $output->writeListBegin(TType::STRUCT, count($this->vipDonateList));
        {
          foreach ($this->vipDonateList as $iter34)
          {
            $xfer += $iter34->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->publicityImgUrl !== null) {
      $xfer += $output->writeFieldBegin('publicityImgUrl', TType::STRING, 13);
      $xfer += $output->writeString($this->publicityImgUrl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->multipleParam !== null) {
      $xfer += $output->writeFieldBegin('multipleParam', TType::DOUBLE, 14);
      $xfer += $output->writeDouble($this->multipleParam);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->isSelectPLayType !== null) {
      $xfer += $output->writeFieldBegin('isSelectPLayType', TType::BOOL, 15);
      $xfer += $output->writeBool($this->isSelectPLayType);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class EnteringLotteryResponse {
  static $_TSPEC;

  public $result = null;
  public $error = null;
  public $lotteryId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'result',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'error',
          'type' => TType::STRUCT,
          'class' => 'ExceptionDes',
          ),
        3 => array(
          'var' => 'lotteryId',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['result'])) {
        $this->result = $vals['result'];
      }
      if (isset($vals['error'])) {
        $this->error = $vals['error'];
      }
      if (isset($vals['lotteryId'])) {
        $this->lotteryId = $vals['lotteryId'];
      }
    }
  }

  public function getName() {
    return 'EnteringLotteryResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->result);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->error = new ExceptionDes();
            $xfer += $this->error->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->lotteryId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('EnteringLotteryResponse');
    if ($this->result !== null) {
      $xfer += $output->writeFieldBegin('result', TType::I32, 1);
      $xfer += $output->writeI32($this->result);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->error !== null) {
      if (!is_object($this->error)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('error', TType::STRUCT, 2);
      $xfer += $this->error->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lotteryId !== null) {
      $xfer += $output->writeFieldBegin('lotteryId', TType::I32, 3);
      $xfer += $output->writeI32($this->lotteryId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class EnteringLotteryNewResponse {
  static $_TSPEC;

  public $result = null;
  public $error = null;
  public $lotteryId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'result',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'error',
          'type' => TType::STRUCT,
          'class' => 'ExceptionDes',
          ),
        3 => array(
          'var' => 'lotteryId',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['result'])) {
        $this->result = $vals['result'];
      }
      if (isset($vals['error'])) {
        $this->error = $vals['error'];
      }
      if (isset($vals['lotteryId'])) {
        $this->lotteryId = $vals['lotteryId'];
      }
    }
  }

  public function getName() {
    return 'EnteringLotteryNewResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->result);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->error = new ExceptionDes();
            $xfer += $this->error->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->lotteryId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('EnteringLotteryNewResponse');
    if ($this->result !== null) {
      $xfer += $output->writeFieldBegin('result', TType::I32, 1);
      $xfer += $output->writeI32($this->result);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->error !== null) {
      if (!is_object($this->error)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('error', TType::STRUCT, 2);
      $xfer += $this->error->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lotteryId !== null) {
      $xfer += $output->writeFieldBegin('lotteryId', TType::I32, 3);
      $xfer += $output->writeI32($this->lotteryId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetLotteryListRequest {
  static $_TSPEC;

  public $lotteryId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'lotteryId',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['lotteryId'])) {
        $this->lotteryId = $vals['lotteryId'];
      }
    }
  }

  public function getName() {
    return 'GetLotteryListRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->lotteryId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetLotteryListRequest');
    if ($this->lotteryId !== null) {
      $xfer += $output->writeFieldBegin('lotteryId', TType::I32, 1);
      $xfer += $output->writeI32($this->lotteryId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetLotteryListResponse {
  static $_TSPEC;

  public $prizes = null;
  public $lotteryName = null;
  public $error = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'prizes',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'Prize',
            ),
          ),
        2 => array(
          'var' => 'lotteryName',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'error',
          'type' => TType::STRUCT,
          'class' => 'ExceptionDes',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['prizes'])) {
        $this->prizes = $vals['prizes'];
      }
      if (isset($vals['lotteryName'])) {
        $this->lotteryName = $vals['lotteryName'];
      }
      if (isset($vals['error'])) {
        $this->error = $vals['error'];
      }
    }
  }

  public function getName() {
    return 'GetLotteryListResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->prizes = array();
            $_size35 = 0;
            $_etype38 = 0;
            $xfer += $input->readListBegin($_etype38, $_size35);
            for ($_i39 = 0; $_i39 < $_size35; ++$_i39)
            {
              $elem40 = null;
              $elem40 = new Prize();
              $xfer += $elem40->read($input);
              $this->prizes []= $elem40;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->lotteryName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->error = new ExceptionDes();
            $xfer += $this->error->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetLotteryListResponse');
    if ($this->prizes !== null) {
      if (!is_array($this->prizes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('prizes', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->prizes));
        {
          foreach ($this->prizes as $iter41)
          {
            $xfer += $iter41->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lotteryName !== null) {
      $xfer += $output->writeFieldBegin('lotteryName', TType::STRING, 2);
      $xfer += $output->writeString($this->lotteryName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->error !== null) {
      if (!is_object($this->error)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('error', TType::STRUCT, 3);
      $xfer += $this->error->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetLotteryResultRequest {
  static $_TSPEC;

  public $lotteryId = null;
  public $userId = null;
  public $lotteryType = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'lotteryId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'userId',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'lotteryType',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['lotteryId'])) {
        $this->lotteryId = $vals['lotteryId'];
      }
      if (isset($vals['userId'])) {
        $this->userId = $vals['userId'];
      }
      if (isset($vals['lotteryType'])) {
        $this->lotteryType = $vals['lotteryType'];
      }
    }
  }

  public function getName() {
    return 'GetLotteryResultRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->lotteryId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->userId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->lotteryType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetLotteryResultRequest');
    if ($this->lotteryId !== null) {
      $xfer += $output->writeFieldBegin('lotteryId', TType::I32, 1);
      $xfer += $output->writeI32($this->lotteryId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userId !== null) {
      $xfer += $output->writeFieldBegin('userId', TType::I32, 2);
      $xfer += $output->writeI32($this->userId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lotteryType !== null) {
      $xfer += $output->writeFieldBegin('lotteryType', TType::I32, 3);
      $xfer += $output->writeI32($this->lotteryType);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetLotteryResultNewRequest {
  static $_TSPEC;

  public $lotteryId = null;
  public $userId = null;
  public $lotteryType = null;
  public $userName = null;
  public $userVip = null;
  public $userScore = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'lotteryId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'userId',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'lotteryType',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'userName',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'userVip',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'userScore',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['lotteryId'])) {
        $this->lotteryId = $vals['lotteryId'];
      }
      if (isset($vals['userId'])) {
        $this->userId = $vals['userId'];
      }
      if (isset($vals['lotteryType'])) {
        $this->lotteryType = $vals['lotteryType'];
      }
      if (isset($vals['userName'])) {
        $this->userName = $vals['userName'];
      }
      if (isset($vals['userVip'])) {
        $this->userVip = $vals['userVip'];
      }
      if (isset($vals['userScore'])) {
        $this->userScore = $vals['userScore'];
      }
    }
  }

  public function getName() {
    return 'GetLotteryResultNewRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->lotteryId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->userId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->lotteryType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->userName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->userVip);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->userScore);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetLotteryResultNewRequest');
    if ($this->lotteryId !== null) {
      $xfer += $output->writeFieldBegin('lotteryId', TType::I32, 1);
      $xfer += $output->writeI32($this->lotteryId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userId !== null) {
      $xfer += $output->writeFieldBegin('userId', TType::I32, 2);
      $xfer += $output->writeI32($this->userId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lotteryType !== null) {
      $xfer += $output->writeFieldBegin('lotteryType', TType::I32, 3);
      $xfer += $output->writeI32($this->lotteryType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userName !== null) {
      $xfer += $output->writeFieldBegin('userName', TType::STRING, 4);
      $xfer += $output->writeString($this->userName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userVip !== null) {
      $xfer += $output->writeFieldBegin('userVip', TType::I32, 5);
      $xfer += $output->writeI32($this->userVip);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userScore !== null) {
      $xfer += $output->writeFieldBegin('userScore', TType::I32, 6);
      $xfer += $output->writeI32($this->userScore);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetLotteryResultResponse {
  static $_TSPEC;

  public $prize = null;
  public $error = null;
  public $resCode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'prize',
          'type' => TType::STRUCT,
          'class' => 'Prize',
          ),
        2 => array(
          'var' => 'error',
          'type' => TType::STRUCT,
          'class' => 'ExceptionDes',
          ),
        3 => array(
          'var' => 'resCode',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['prize'])) {
        $this->prize = $vals['prize'];
      }
      if (isset($vals['error'])) {
        $this->error = $vals['error'];
      }
      if (isset($vals['resCode'])) {
        $this->resCode = $vals['resCode'];
      }
    }
  }

  public function getName() {
    return 'GetLotteryResultResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->prize = new Prize();
            $xfer += $this->prize->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->error = new ExceptionDes();
            $xfer += $this->error->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->resCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetLotteryResultResponse');
    if ($this->prize !== null) {
      if (!is_object($this->prize)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('prize', TType::STRUCT, 1);
      $xfer += $this->prize->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->error !== null) {
      if (!is_object($this->error)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('error', TType::STRUCT, 2);
      $xfer += $this->error->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->resCode !== null) {
      $xfer += $output->writeFieldBegin('resCode', TType::I32, 3);
      $xfer += $output->writeI32($this->resCode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetLotteryResultNewResponse {
  static $_TSPEC;

  public $prize = null;
  public $error = null;
  public $resCode = null;
  public $remainTimes = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'prize',
          'type' => TType::STRUCT,
          'class' => 'Prize',
          ),
        2 => array(
          'var' => 'error',
          'type' => TType::STRUCT,
          'class' => 'ExceptionDes',
          ),
        3 => array(
          'var' => 'resCode',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'remainTimes',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['prize'])) {
        $this->prize = $vals['prize'];
      }
      if (isset($vals['error'])) {
        $this->error = $vals['error'];
      }
      if (isset($vals['resCode'])) {
        $this->resCode = $vals['resCode'];
      }
      if (isset($vals['remainTimes'])) {
        $this->remainTimes = $vals['remainTimes'];
      }
    }
  }

  public function getName() {
    return 'GetLotteryResultNewResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->prize = new Prize();
            $xfer += $this->prize->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->error = new ExceptionDes();
            $xfer += $this->error->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->resCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->remainTimes);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetLotteryResultNewResponse');
    if ($this->prize !== null) {
      if (!is_object($this->prize)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('prize', TType::STRUCT, 1);
      $xfer += $this->prize->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->error !== null) {
      if (!is_object($this->error)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('error', TType::STRUCT, 2);
      $xfer += $this->error->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->resCode !== null) {
      $xfer += $output->writeFieldBegin('resCode', TType::I32, 3);
      $xfer += $output->writeI32($this->resCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->remainTimes !== null) {
      $xfer += $output->writeFieldBegin('remainTimes', TType::I32, 4);
      $xfer += $output->writeI32($this->remainTimes);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class UserHasLotteryTodayRequest {
  static $_TSPEC;

  public $lotteryId = null;
  public $userId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'lotteryId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'userId',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['lotteryId'])) {
        $this->lotteryId = $vals['lotteryId'];
      }
      if (isset($vals['userId'])) {
        $this->userId = $vals['userId'];
      }
    }
  }

  public function getName() {
    return 'UserHasLotteryTodayRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->lotteryId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->userId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('UserHasLotteryTodayRequest');
    if ($this->lotteryId !== null) {
      $xfer += $output->writeFieldBegin('lotteryId', TType::I32, 1);
      $xfer += $output->writeI32($this->lotteryId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userId !== null) {
      $xfer += $output->writeFieldBegin('userId', TType::I32, 2);
      $xfer += $output->writeI32($this->userId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class UserHasLotteryTodayResponse {
  static $_TSPEC;

  public $hasLottery = null;
  public $error = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'hasLottery',
          'type' => TType::BOOL,
          ),
        2 => array(
          'var' => 'error',
          'type' => TType::STRUCT,
          'class' => 'ExceptionDes',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['hasLottery'])) {
        $this->hasLottery = $vals['hasLottery'];
      }
      if (isset($vals['error'])) {
        $this->error = $vals['error'];
      }
    }
  }

  public function getName() {
    return 'UserHasLotteryTodayResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->hasLottery);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->error = new ExceptionDes();
            $xfer += $this->error->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('UserHasLotteryTodayResponse');
    if ($this->hasLottery !== null) {
      $xfer += $output->writeFieldBegin('hasLottery', TType::BOOL, 1);
      $xfer += $output->writeBool($this->hasLottery);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->error !== null) {
      if (!is_object($this->error)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('error', TType::STRUCT, 2);
      $xfer += $this->error->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class UserCanUseDailyLotteryRequest {
  static $_TSPEC;

  public $userId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'userId',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['userId'])) {
        $this->userId = $vals['userId'];
      }
    }
  }

  public function getName() {
    return 'UserCanUseDailyLotteryRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->userId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('UserCanUseDailyLotteryRequest');
    if ($this->userId !== null) {
      $xfer += $output->writeFieldBegin('userId', TType::I32, 1);
      $xfer += $output->writeI32($this->userId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class UserCanUseDailyLotteryResponse {
  static $_TSPEC;

  public $lotteryId = null;
  public $score = null;
  public $error = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'lotteryId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'score',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'error',
          'type' => TType::STRUCT,
          'class' => 'ExceptionDes',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['lotteryId'])) {
        $this->lotteryId = $vals['lotteryId'];
      }
      if (isset($vals['score'])) {
        $this->score = $vals['score'];
      }
      if (isset($vals['error'])) {
        $this->error = $vals['error'];
      }
    }
  }

  public function getName() {
    return 'UserCanUseDailyLotteryResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->lotteryId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->score);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->error = new ExceptionDes();
            $xfer += $this->error->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('UserCanUseDailyLotteryResponse');
    if ($this->lotteryId !== null) {
      $xfer += $output->writeFieldBegin('lotteryId', TType::I32, 1);
      $xfer += $output->writeI32($this->lotteryId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->score !== null) {
      $xfer += $output->writeFieldBegin('score', TType::I32, 2);
      $xfer += $output->writeI32($this->score);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->error !== null) {
      if (!is_object($this->error)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('error', TType::STRUCT, 3);
      $xfer += $this->error->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetAllLotteryRequest {
  static $_TSPEC;

  public $pageId = null;
  public $limit = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'pageId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'limit',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['pageId'])) {
        $this->pageId = $vals['pageId'];
      }
      if (isset($vals['limit'])) {
        $this->limit = $vals['limit'];
      }
    }
  }

  public function getName() {
    return 'GetAllLotteryRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->pageId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->limit);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetAllLotteryRequest');
    if ($this->pageId !== null) {
      $xfer += $output->writeFieldBegin('pageId', TType::I32, 1);
      $xfer += $output->writeI32($this->pageId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->limit !== null) {
      $xfer += $output->writeFieldBegin('limit', TType::I32, 2);
      $xfer += $output->writeI32($this->limit);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetTodayCanUseLotteryRequest {
  static $_TSPEC;


  public function __construct() {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        );
    }
  }

  public function getName() {
    return 'GetTodayCanUseLotteryRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetTodayCanUseLotteryRequest');
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BatchQueryLotteryInfoRequest {
  static $_TSPEC;

  public $lotteryIdList = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'lotteryIdList',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['lotteryIdList'])) {
        $this->lotteryIdList = $vals['lotteryIdList'];
      }
    }
  }

  public function getName() {
    return 'BatchQueryLotteryInfoRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->lotteryIdList = array();
            $_size42 = 0;
            $_etype45 = 0;
            $xfer += $input->readListBegin($_etype45, $_size42);
            for ($_i46 = 0; $_i46 < $_size42; ++$_i46)
            {
              $elem47 = null;
              $xfer += $input->readI32($elem47);
              $this->lotteryIdList []= $elem47;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BatchQueryLotteryInfoRequest');
    if ($this->lotteryIdList !== null) {
      if (!is_array($this->lotteryIdList)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('lotteryIdList', TType::LST, 1);
      {
        $output->writeListBegin(TType::I32, count($this->lotteryIdList));
        {
          foreach ($this->lotteryIdList as $iter48)
          {
            $xfer += $output->writeI32($iter48);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class LotteryMain {
  static $_TSPEC;

  public $lotteryId = null;
  public $isDaily = null;
  public $score = null;
  public $lotteryName = null;
  public $lotteryState = null;
  public $vip = null;
  public $lotteryDetail = null;
  public $dayLimit = null;
  public $publicityImgUrl = null;
  public $showPageUrl = null;
  public $participateNumber = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'lotteryId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'isDaily',
          'type' => TType::BOOL,
          ),
        3 => array(
          'var' => 'score',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'lotteryName',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'lotteryState',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'vip',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'lotteryDetail',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'dayLimit',
          'type' => TType::I32,
          ),
        9 => array(
          'var' => 'publicityImgUrl',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'showPageUrl',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'participateNumber',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['lotteryId'])) {
        $this->lotteryId = $vals['lotteryId'];
      }
      if (isset($vals['isDaily'])) {
        $this->isDaily = $vals['isDaily'];
      }
      if (isset($vals['score'])) {
        $this->score = $vals['score'];
      }
      if (isset($vals['lotteryName'])) {
        $this->lotteryName = $vals['lotteryName'];
      }
      if (isset($vals['lotteryState'])) {
        $this->lotteryState = $vals['lotteryState'];
      }
      if (isset($vals['vip'])) {
        $this->vip = $vals['vip'];
      }
      if (isset($vals['lotteryDetail'])) {
        $this->lotteryDetail = $vals['lotteryDetail'];
      }
      if (isset($vals['dayLimit'])) {
        $this->dayLimit = $vals['dayLimit'];
      }
      if (isset($vals['publicityImgUrl'])) {
        $this->publicityImgUrl = $vals['publicityImgUrl'];
      }
      if (isset($vals['showPageUrl'])) {
        $this->showPageUrl = $vals['showPageUrl'];
      }
      if (isset($vals['participateNumber'])) {
        $this->participateNumber = $vals['participateNumber'];
      }
    }
  }

  public function getName() {
    return 'LotteryMain';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->lotteryId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->isDaily);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->score);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->lotteryName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->lotteryState);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->vip);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->lotteryDetail);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->dayLimit);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->publicityImgUrl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->showPageUrl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->participateNumber);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('LotteryMain');
    if ($this->lotteryId !== null) {
      $xfer += $output->writeFieldBegin('lotteryId', TType::I32, 1);
      $xfer += $output->writeI32($this->lotteryId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->isDaily !== null) {
      $xfer += $output->writeFieldBegin('isDaily', TType::BOOL, 2);
      $xfer += $output->writeBool($this->isDaily);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->score !== null) {
      $xfer += $output->writeFieldBegin('score', TType::I32, 3);
      $xfer += $output->writeI32($this->score);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lotteryName !== null) {
      $xfer += $output->writeFieldBegin('lotteryName', TType::STRING, 4);
      $xfer += $output->writeString($this->lotteryName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lotteryState !== null) {
      $xfer += $output->writeFieldBegin('lotteryState', TType::I32, 5);
      $xfer += $output->writeI32($this->lotteryState);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->vip !== null) {
      $xfer += $output->writeFieldBegin('vip', TType::I32, 6);
      $xfer += $output->writeI32($this->vip);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lotteryDetail !== null) {
      $xfer += $output->writeFieldBegin('lotteryDetail', TType::STRING, 7);
      $xfer += $output->writeString($this->lotteryDetail);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dayLimit !== null) {
      $xfer += $output->writeFieldBegin('dayLimit', TType::I32, 8);
      $xfer += $output->writeI32($this->dayLimit);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->publicityImgUrl !== null) {
      $xfer += $output->writeFieldBegin('publicityImgUrl', TType::STRING, 9);
      $xfer += $output->writeString($this->publicityImgUrl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->showPageUrl !== null) {
      $xfer += $output->writeFieldBegin('showPageUrl', TType::STRING, 10);
      $xfer += $output->writeString($this->showPageUrl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->participateNumber !== null) {
      $xfer += $output->writeFieldBegin('participateNumber', TType::I32, 11);
      $xfer += $output->writeI32($this->participateNumber);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetAllLotteryResponse {
  static $_TSPEC;

  public $lotteryMainList = null;
  public $count = null;
  public $error = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'lotteryMainList',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'LotteryMain',
            ),
          ),
        2 => array(
          'var' => 'count',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'error',
          'type' => TType::STRUCT,
          'class' => 'ExceptionDes',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['lotteryMainList'])) {
        $this->lotteryMainList = $vals['lotteryMainList'];
      }
      if (isset($vals['count'])) {
        $this->count = $vals['count'];
      }
      if (isset($vals['error'])) {
        $this->error = $vals['error'];
      }
    }
  }

  public function getName() {
    return 'GetAllLotteryResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->lotteryMainList = array();
            $_size49 = 0;
            $_etype52 = 0;
            $xfer += $input->readListBegin($_etype52, $_size49);
            for ($_i53 = 0; $_i53 < $_size49; ++$_i53)
            {
              $elem54 = null;
              $elem54 = new LotteryMain();
              $xfer += $elem54->read($input);
              $this->lotteryMainList []= $elem54;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->count);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->error = new ExceptionDes();
            $xfer += $this->error->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetAllLotteryResponse');
    if ($this->lotteryMainList !== null) {
      if (!is_array($this->lotteryMainList)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('lotteryMainList', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->lotteryMainList));
        {
          foreach ($this->lotteryMainList as $iter55)
          {
            $xfer += $iter55->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->count !== null) {
      $xfer += $output->writeFieldBegin('count', TType::I32, 2);
      $xfer += $output->writeI32($this->count);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->error !== null) {
      if (!is_object($this->error)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('error', TType::STRUCT, 3);
      $xfer += $this->error->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetTodayCanUseLotteryResponse {
  static $_TSPEC;

  public $lotteryMainList = null;
  public $error = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'lotteryMainList',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'LotteryMain',
            ),
          ),
        2 => array(
          'var' => 'error',
          'type' => TType::STRUCT,
          'class' => 'ExceptionDes',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['lotteryMainList'])) {
        $this->lotteryMainList = $vals['lotteryMainList'];
      }
      if (isset($vals['error'])) {
        $this->error = $vals['error'];
      }
    }
  }

  public function getName() {
    return 'GetTodayCanUseLotteryResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->lotteryMainList = array();
            $_size56 = 0;
            $_etype59 = 0;
            $xfer += $input->readListBegin($_etype59, $_size56);
            for ($_i60 = 0; $_i60 < $_size56; ++$_i60)
            {
              $elem61 = null;
              $elem61 = new LotteryMain();
              $xfer += $elem61->read($input);
              $this->lotteryMainList []= $elem61;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->error = new ExceptionDes();
            $xfer += $this->error->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetTodayCanUseLotteryResponse');
    if ($this->lotteryMainList !== null) {
      if (!is_array($this->lotteryMainList)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('lotteryMainList', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->lotteryMainList));
        {
          foreach ($this->lotteryMainList as $iter62)
          {
            $xfer += $iter62->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->error !== null) {
      if (!is_object($this->error)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('error', TType::STRUCT, 2);
      $xfer += $this->error->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BatchQueryLotteryInfoResponse {
  static $_TSPEC;

  public $lotteryMainMap = null;
  public $error = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'lotteryMainMap',
          'type' => TType::MAP,
          'ktype' => TType::I32,
          'vtype' => TType::STRUCT,
          'key' => array(
            'type' => TType::I32,
          ),
          'val' => array(
            'type' => TType::STRUCT,
            'class' => 'LotteryMain',
            ),
          ),
        2 => array(
          'var' => 'error',
          'type' => TType::STRUCT,
          'class' => 'ExceptionDes',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['lotteryMainMap'])) {
        $this->lotteryMainMap = $vals['lotteryMainMap'];
      }
      if (isset($vals['error'])) {
        $this->error = $vals['error'];
      }
    }
  }

  public function getName() {
    return 'BatchQueryLotteryInfoResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::MAP) {
            $this->lotteryMainMap = array();
            $_size63 = 0;
            $_ktype64 = 0;
            $_vtype65 = 0;
            $xfer += $input->readMapBegin($_ktype64, $_vtype65, $_size63);
            for ($_i67 = 0; $_i67 < $_size63; ++$_i67)
            {
              $key68 = 0;
              $val69 = new LotteryMain();
              $xfer += $input->readI32($key68);
              $val69 = new LotteryMain();
              $xfer += $val69->read($input);
              $this->lotteryMainMap[$key68] = $val69;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->error = new ExceptionDes();
            $xfer += $this->error->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BatchQueryLotteryInfoResponse');
    if ($this->lotteryMainMap !== null) {
      if (!is_array($this->lotteryMainMap)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('lotteryMainMap', TType::MAP, 1);
      {
        $output->writeMapBegin(TType::I32, TType::STRUCT, count($this->lotteryMainMap));
        {
          foreach ($this->lotteryMainMap as $kiter70 => $viter71)
          {
            $xfer += $output->writeI32($kiter70);
            $xfer += $viter71->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->error !== null) {
      if (!is_object($this->error)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('error', TType::STRUCT, 2);
      $xfer += $this->error->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetLotteryInfoRequest {
  static $_TSPEC;

  public $lotteryId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'lotteryId',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['lotteryId'])) {
        $this->lotteryId = $vals['lotteryId'];
      }
    }
  }

  public function getName() {
    return 'GetLotteryInfoRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->lotteryId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetLotteryInfoRequest');
    if ($this->lotteryId !== null) {
      $xfer += $output->writeFieldBegin('lotteryId', TType::I32, 1);
      $xfer += $output->writeI32($this->lotteryId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetLotteryInfoNewRequest {
  static $_TSPEC;

  public $lotteryId = null;
  public $userId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'lotteryId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'userId',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['lotteryId'])) {
        $this->lotteryId = $vals['lotteryId'];
      }
      if (isset($vals['userId'])) {
        $this->userId = $vals['userId'];
      }
    }
  }

  public function getName() {
    return 'GetLotteryInfoNewRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->lotteryId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->userId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetLotteryInfoNewRequest');
    if ($this->lotteryId !== null) {
      $xfer += $output->writeFieldBegin('lotteryId', TType::I32, 1);
      $xfer += $output->writeI32($this->lotteryId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userId !== null) {
      $xfer += $output->writeFieldBegin('userId', TType::I32, 2);
      $xfer += $output->writeI32($this->userId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetLotteryInfoResponse {
  static $_TSPEC;

  public $lotteryName = null;
  public $startTime = null;
  public $endTime = null;
  public $isDaily = null;
  public $score = null;
  public $prizes = null;
  public $lotteryState = null;
  public $error = null;
  public $vip = null;
  public $lotteryDetail = null;
  public $dayLimit = null;
  public $publicityImgUrl = null;
  public $showPageUrl = null;
  public $lotteryId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'lotteryName',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'startTime',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'endTime',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'isDaily',
          'type' => TType::BOOL,
          ),
        5 => array(
          'var' => 'score',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'prizes',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'Prize',
            ),
          ),
        7 => array(
          'var' => 'lotteryState',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'error',
          'type' => TType::STRUCT,
          'class' => 'ExceptionDes',
          ),
        9 => array(
          'var' => 'vip',
          'type' => TType::I32,
          ),
        10 => array(
          'var' => 'lotteryDetail',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'dayLimit',
          'type' => TType::I32,
          ),
        12 => array(
          'var' => 'publicityImgUrl',
          'type' => TType::STRING,
          ),
        13 => array(
          'var' => 'showPageUrl',
          'type' => TType::STRING,
          ),
        14 => array(
          'var' => 'lotteryId',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['lotteryName'])) {
        $this->lotteryName = $vals['lotteryName'];
      }
      if (isset($vals['startTime'])) {
        $this->startTime = $vals['startTime'];
      }
      if (isset($vals['endTime'])) {
        $this->endTime = $vals['endTime'];
      }
      if (isset($vals['isDaily'])) {
        $this->isDaily = $vals['isDaily'];
      }
      if (isset($vals['score'])) {
        $this->score = $vals['score'];
      }
      if (isset($vals['prizes'])) {
        $this->prizes = $vals['prizes'];
      }
      if (isset($vals['lotteryState'])) {
        $this->lotteryState = $vals['lotteryState'];
      }
      if (isset($vals['error'])) {
        $this->error = $vals['error'];
      }
      if (isset($vals['vip'])) {
        $this->vip = $vals['vip'];
      }
      if (isset($vals['lotteryDetail'])) {
        $this->lotteryDetail = $vals['lotteryDetail'];
      }
      if (isset($vals['dayLimit'])) {
        $this->dayLimit = $vals['dayLimit'];
      }
      if (isset($vals['publicityImgUrl'])) {
        $this->publicityImgUrl = $vals['publicityImgUrl'];
      }
      if (isset($vals['showPageUrl'])) {
        $this->showPageUrl = $vals['showPageUrl'];
      }
      if (isset($vals['lotteryId'])) {
        $this->lotteryId = $vals['lotteryId'];
      }
    }
  }

  public function getName() {
    return 'GetLotteryInfoResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->lotteryName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->startTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->endTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->isDaily);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->score);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::LST) {
            $this->prizes = array();
            $_size72 = 0;
            $_etype75 = 0;
            $xfer += $input->readListBegin($_etype75, $_size72);
            for ($_i76 = 0; $_i76 < $_size72; ++$_i76)
            {
              $elem77 = null;
              $elem77 = new Prize();
              $xfer += $elem77->read($input);
              $this->prizes []= $elem77;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->lotteryState);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRUCT) {
            $this->error = new ExceptionDes();
            $xfer += $this->error->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->vip);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->lotteryDetail);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->dayLimit);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->publicityImgUrl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->showPageUrl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->lotteryId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetLotteryInfoResponse');
    if ($this->lotteryName !== null) {
      $xfer += $output->writeFieldBegin('lotteryName', TType::STRING, 1);
      $xfer += $output->writeString($this->lotteryName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->startTime !== null) {
      $xfer += $output->writeFieldBegin('startTime', TType::I64, 2);
      $xfer += $output->writeI64($this->startTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->endTime !== null) {
      $xfer += $output->writeFieldBegin('endTime', TType::I64, 3);
      $xfer += $output->writeI64($this->endTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->isDaily !== null) {
      $xfer += $output->writeFieldBegin('isDaily', TType::BOOL, 4);
      $xfer += $output->writeBool($this->isDaily);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->score !== null) {
      $xfer += $output->writeFieldBegin('score', TType::I32, 5);
      $xfer += $output->writeI32($this->score);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->prizes !== null) {
      if (!is_array($this->prizes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('prizes', TType::LST, 6);
      {
        $output->writeListBegin(TType::STRUCT, count($this->prizes));
        {
          foreach ($this->prizes as $iter78)
          {
            $xfer += $iter78->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lotteryState !== null) {
      $xfer += $output->writeFieldBegin('lotteryState', TType::I32, 7);
      $xfer += $output->writeI32($this->lotteryState);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->error !== null) {
      if (!is_object($this->error)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('error', TType::STRUCT, 8);
      $xfer += $this->error->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->vip !== null) {
      $xfer += $output->writeFieldBegin('vip', TType::I32, 9);
      $xfer += $output->writeI32($this->vip);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lotteryDetail !== null) {
      $xfer += $output->writeFieldBegin('lotteryDetail', TType::STRING, 10);
      $xfer += $output->writeString($this->lotteryDetail);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dayLimit !== null) {
      $xfer += $output->writeFieldBegin('dayLimit', TType::I32, 11);
      $xfer += $output->writeI32($this->dayLimit);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->publicityImgUrl !== null) {
      $xfer += $output->writeFieldBegin('publicityImgUrl', TType::STRING, 12);
      $xfer += $output->writeString($this->publicityImgUrl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->showPageUrl !== null) {
      $xfer += $output->writeFieldBegin('showPageUrl', TType::STRING, 13);
      $xfer += $output->writeString($this->showPageUrl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lotteryId !== null) {
      $xfer += $output->writeFieldBegin('lotteryId', TType::I32, 14);
      $xfer += $output->writeI32($this->lotteryId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class DrawAwardPerson {
  static $_TSPEC;

  public $userId = null;
  public $prize = null;
  public $userName = null;
  public $prizeDesc = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'userId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'prize',
          'type' => TType::STRUCT,
          'class' => 'Prize',
          ),
        3 => array(
          'var' => 'userName',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'prizeDesc',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['userId'])) {
        $this->userId = $vals['userId'];
      }
      if (isset($vals['prize'])) {
        $this->prize = $vals['prize'];
      }
      if (isset($vals['userName'])) {
        $this->userName = $vals['userName'];
      }
      if (isset($vals['prizeDesc'])) {
        $this->prizeDesc = $vals['prizeDesc'];
      }
    }
  }

  public function getName() {
    return 'DrawAwardPerson';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->userId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->prize = new Prize();
            $xfer += $this->prize->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->userName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->prizeDesc);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('DrawAwardPerson');
    if ($this->userId !== null) {
      $xfer += $output->writeFieldBegin('userId', TType::I32, 1);
      $xfer += $output->writeI32($this->userId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->prize !== null) {
      if (!is_object($this->prize)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('prize', TType::STRUCT, 2);
      $xfer += $this->prize->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userName !== null) {
      $xfer += $output->writeFieldBegin('userName', TType::STRING, 3);
      $xfer += $output->writeString($this->userName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->prizeDesc !== null) {
      $xfer += $output->writeFieldBegin('prizeDesc', TType::STRING, 4);
      $xfer += $output->writeString($this->prizeDesc);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetLotteryInfoNewResponse {
  static $_TSPEC;

  public $lotteryName = null;
  public $startTime = null;
  public $endTime = null;
  public $isDaily = null;
  public $score = null;
  public $prizes = null;
  public $lotteryState = null;
  public $error = null;
  public $vip = null;
  public $lotteryDetail = null;
  public $dayLimit = null;
  public $publicityImgUrl = null;
  public $showPageUrl = null;
  public $lotteryId = null;
  public $participateNumber = null;
  public $remainTimes = null;
  public $rankingList = null;
  public $resCode = null;
  public $rankingDescList = null;
  public $userVip = null;
  public $userScore = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'lotteryName',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'startTime',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'endTime',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'isDaily',
          'type' => TType::BOOL,
          ),
        5 => array(
          'var' => 'score',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'prizes',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'Prize',
            ),
          ),
        7 => array(
          'var' => 'lotteryState',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'error',
          'type' => TType::STRUCT,
          'class' => 'ExceptionDes',
          ),
        9 => array(
          'var' => 'vip',
          'type' => TType::I32,
          ),
        10 => array(
          'var' => 'lotteryDetail',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'dayLimit',
          'type' => TType::I32,
          ),
        12 => array(
          'var' => 'publicityImgUrl',
          'type' => TType::STRING,
          ),
        13 => array(
          'var' => 'showPageUrl',
          'type' => TType::STRING,
          ),
        14 => array(
          'var' => 'lotteryId',
          'type' => TType::I32,
          ),
        15 => array(
          'var' => 'participateNumber',
          'type' => TType::I32,
          ),
        16 => array(
          'var' => 'remainTimes',
          'type' => TType::I32,
          ),
        17 => array(
          'var' => 'rankingList',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'DrawAwardPerson',
            ),
          ),
        18 => array(
          'var' => 'resCode',
          'type' => TType::I32,
          ),
        19 => array(
          'var' => 'rankingDescList',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        20 => array(
          'var' => 'userVip',
          'type' => TType::I32,
          ),
        21 => array(
          'var' => 'userScore',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['lotteryName'])) {
        $this->lotteryName = $vals['lotteryName'];
      }
      if (isset($vals['startTime'])) {
        $this->startTime = $vals['startTime'];
      }
      if (isset($vals['endTime'])) {
        $this->endTime = $vals['endTime'];
      }
      if (isset($vals['isDaily'])) {
        $this->isDaily = $vals['isDaily'];
      }
      if (isset($vals['score'])) {
        $this->score = $vals['score'];
      }
      if (isset($vals['prizes'])) {
        $this->prizes = $vals['prizes'];
      }
      if (isset($vals['lotteryState'])) {
        $this->lotteryState = $vals['lotteryState'];
      }
      if (isset($vals['error'])) {
        $this->error = $vals['error'];
      }
      if (isset($vals['vip'])) {
        $this->vip = $vals['vip'];
      }
      if (isset($vals['lotteryDetail'])) {
        $this->lotteryDetail = $vals['lotteryDetail'];
      }
      if (isset($vals['dayLimit'])) {
        $this->dayLimit = $vals['dayLimit'];
      }
      if (isset($vals['publicityImgUrl'])) {
        $this->publicityImgUrl = $vals['publicityImgUrl'];
      }
      if (isset($vals['showPageUrl'])) {
        $this->showPageUrl = $vals['showPageUrl'];
      }
      if (isset($vals['lotteryId'])) {
        $this->lotteryId = $vals['lotteryId'];
      }
      if (isset($vals['participateNumber'])) {
        $this->participateNumber = $vals['participateNumber'];
      }
      if (isset($vals['remainTimes'])) {
        $this->remainTimes = $vals['remainTimes'];
      }
      if (isset($vals['rankingList'])) {
        $this->rankingList = $vals['rankingList'];
      }
      if (isset($vals['resCode'])) {
        $this->resCode = $vals['resCode'];
      }
      if (isset($vals['rankingDescList'])) {
        $this->rankingDescList = $vals['rankingDescList'];
      }
      if (isset($vals['userVip'])) {
        $this->userVip = $vals['userVip'];
      }
      if (isset($vals['userScore'])) {
        $this->userScore = $vals['userScore'];
      }
    }
  }

  public function getName() {
    return 'GetLotteryInfoNewResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->lotteryName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->startTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->endTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->isDaily);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->score);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::LST) {
            $this->prizes = array();
            $_size79 = 0;
            $_etype82 = 0;
            $xfer += $input->readListBegin($_etype82, $_size79);
            for ($_i83 = 0; $_i83 < $_size79; ++$_i83)
            {
              $elem84 = null;
              $elem84 = new Prize();
              $xfer += $elem84->read($input);
              $this->prizes []= $elem84;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->lotteryState);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRUCT) {
            $this->error = new ExceptionDes();
            $xfer += $this->error->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->vip);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->lotteryDetail);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->dayLimit);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->publicityImgUrl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->showPageUrl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->lotteryId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->participateNumber);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->remainTimes);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::LST) {
            $this->rankingList = array();
            $_size85 = 0;
            $_etype88 = 0;
            $xfer += $input->readListBegin($_etype88, $_size85);
            for ($_i89 = 0; $_i89 < $_size85; ++$_i89)
            {
              $elem90 = null;
              $elem90 = new DrawAwardPerson();
              $xfer += $elem90->read($input);
              $this->rankingList []= $elem90;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 18:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->resCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 19:
          if ($ftype == TType::LST) {
            $this->rankingDescList = array();
            $_size91 = 0;
            $_etype94 = 0;
            $xfer += $input->readListBegin($_etype94, $_size91);
            for ($_i95 = 0; $_i95 < $_size91; ++$_i95)
            {
              $elem96 = null;
              $xfer += $input->readString($elem96);
              $this->rankingDescList []= $elem96;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 20:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->userVip);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 21:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->userScore);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetLotteryInfoNewResponse');
    if ($this->lotteryName !== null) {
      $xfer += $output->writeFieldBegin('lotteryName', TType::STRING, 1);
      $xfer += $output->writeString($this->lotteryName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->startTime !== null) {
      $xfer += $output->writeFieldBegin('startTime', TType::I64, 2);
      $xfer += $output->writeI64($this->startTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->endTime !== null) {
      $xfer += $output->writeFieldBegin('endTime', TType::I64, 3);
      $xfer += $output->writeI64($this->endTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->isDaily !== null) {
      $xfer += $output->writeFieldBegin('isDaily', TType::BOOL, 4);
      $xfer += $output->writeBool($this->isDaily);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->score !== null) {
      $xfer += $output->writeFieldBegin('score', TType::I32, 5);
      $xfer += $output->writeI32($this->score);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->prizes !== null) {
      if (!is_array($this->prizes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('prizes', TType::LST, 6);
      {
        $output->writeListBegin(TType::STRUCT, count($this->prizes));
        {
          foreach ($this->prizes as $iter97)
          {
            $xfer += $iter97->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lotteryState !== null) {
      $xfer += $output->writeFieldBegin('lotteryState', TType::I32, 7);
      $xfer += $output->writeI32($this->lotteryState);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->error !== null) {
      if (!is_object($this->error)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('error', TType::STRUCT, 8);
      $xfer += $this->error->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->vip !== null) {
      $xfer += $output->writeFieldBegin('vip', TType::I32, 9);
      $xfer += $output->writeI32($this->vip);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lotteryDetail !== null) {
      $xfer += $output->writeFieldBegin('lotteryDetail', TType::STRING, 10);
      $xfer += $output->writeString($this->lotteryDetail);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dayLimit !== null) {
      $xfer += $output->writeFieldBegin('dayLimit', TType::I32, 11);
      $xfer += $output->writeI32($this->dayLimit);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->publicityImgUrl !== null) {
      $xfer += $output->writeFieldBegin('publicityImgUrl', TType::STRING, 12);
      $xfer += $output->writeString($this->publicityImgUrl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->showPageUrl !== null) {
      $xfer += $output->writeFieldBegin('showPageUrl', TType::STRING, 13);
      $xfer += $output->writeString($this->showPageUrl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lotteryId !== null) {
      $xfer += $output->writeFieldBegin('lotteryId', TType::I32, 14);
      $xfer += $output->writeI32($this->lotteryId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->participateNumber !== null) {
      $xfer += $output->writeFieldBegin('participateNumber', TType::I32, 15);
      $xfer += $output->writeI32($this->participateNumber);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->remainTimes !== null) {
      $xfer += $output->writeFieldBegin('remainTimes', TType::I32, 16);
      $xfer += $output->writeI32($this->remainTimes);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->rankingList !== null) {
      if (!is_array($this->rankingList)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('rankingList', TType::LST, 17);
      {
        $output->writeListBegin(TType::STRUCT, count($this->rankingList));
        {
          foreach ($this->rankingList as $iter98)
          {
            $xfer += $iter98->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->resCode !== null) {
      $xfer += $output->writeFieldBegin('resCode', TType::I32, 18);
      $xfer += $output->writeI32($this->resCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->rankingDescList !== null) {
      if (!is_array($this->rankingDescList)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('rankingDescList', TType::LST, 19);
      {
        $output->writeListBegin(TType::STRING, count($this->rankingDescList));
        {
          foreach ($this->rankingDescList as $iter99)
          {
            $xfer += $output->writeString($iter99);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userVip !== null) {
      $xfer += $output->writeFieldBegin('userVip', TType::I32, 20);
      $xfer += $output->writeI32($this->userVip);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userScore !== null) {
      $xfer += $output->writeFieldBegin('userScore', TType::I32, 21);
      $xfer += $output->writeI32($this->userScore);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class DeleteLotteryInfoRequest {
  static $_TSPEC;

  public $lotteryId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'lotteryId',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['lotteryId'])) {
        $this->lotteryId = $vals['lotteryId'];
      }
    }
  }

  public function getName() {
    return 'DeleteLotteryInfoRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->lotteryId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('DeleteLotteryInfoRequest');
    if ($this->lotteryId !== null) {
      $xfer += $output->writeFieldBegin('lotteryId', TType::I32, 1);
      $xfer += $output->writeI32($this->lotteryId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class DeleteLotteryInfoResponse {
  static $_TSPEC;

  public $isSuccess = null;
  public $error = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'isSuccess',
          'type' => TType::BOOL,
          ),
        2 => array(
          'var' => 'error',
          'type' => TType::STRUCT,
          'class' => 'ExceptionDes',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['isSuccess'])) {
        $this->isSuccess = $vals['isSuccess'];
      }
      if (isset($vals['error'])) {
        $this->error = $vals['error'];
      }
    }
  }

  public function getName() {
    return 'DeleteLotteryInfoResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->isSuccess);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->error = new ExceptionDes();
            $xfer += $this->error->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('DeleteLotteryInfoResponse');
    if ($this->isSuccess !== null) {
      $xfer += $output->writeFieldBegin('isSuccess', TType::BOOL, 1);
      $xfer += $output->writeBool($this->isSuccess);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->error !== null) {
      if (!is_object($this->error)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('error', TType::STRUCT, 2);
      $xfer += $this->error->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SetLotteryExpireRequest {
  static $_TSPEC;

  public $lotteryId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'lotteryId',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['lotteryId'])) {
        $this->lotteryId = $vals['lotteryId'];
      }
    }
  }

  public function getName() {
    return 'SetLotteryExpireRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->lotteryId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SetLotteryExpireRequest');
    if ($this->lotteryId !== null) {
      $xfer += $output->writeFieldBegin('lotteryId', TType::I32, 1);
      $xfer += $output->writeI32($this->lotteryId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SetLotteryExpireResponse {
  static $_TSPEC;

  public $isSuccess = null;
  public $error = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'isSuccess',
          'type' => TType::BOOL,
          ),
        2 => array(
          'var' => 'error',
          'type' => TType::STRUCT,
          'class' => 'ExceptionDes',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['isSuccess'])) {
        $this->isSuccess = $vals['isSuccess'];
      }
      if (isset($vals['error'])) {
        $this->error = $vals['error'];
      }
    }
  }

  public function getName() {
    return 'SetLotteryExpireResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->isSuccess);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->error = new ExceptionDes();
            $xfer += $this->error->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SetLotteryExpireResponse');
    if ($this->isSuccess !== null) {
      $xfer += $output->writeFieldBegin('isSuccess', TType::BOOL, 1);
      $xfer += $output->writeBool($this->isSuccess);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->error !== null) {
      if (!is_object($this->error)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('error', TType::STRUCT, 2);
      $xfer += $this->error->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

?>
